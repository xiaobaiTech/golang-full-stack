import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-T_olDrey.js";const l={},u={href:"https://github.com/xiaobaiTech/golangFamily",target:"_blank",rel:"noopener noreferrer"},r=p(`<br><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>我们来看一段日常代码。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bytes&quot;</span>
	<span class="token string">&quot;encoding/json&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;io/ioutil&quot;</span>
	<span class="token string">&quot;net&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> tr <span class="token operator">*</span>http<span class="token punctuation">.</span>Transport

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tr <span class="token operator">=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">{</span>
		MaxIdleConns<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
		Dial<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>netw<span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialTimeout</span><span class="token punctuation">(</span>netw<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//设置建立连接超时</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
			err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">SetDeadline</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//设置发送接受数据超时</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> conn<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com/&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token function">Get</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	body <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	req<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> body<span class="token punctuation">)</span>
	req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>

	client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span>
		Transport<span class="token punctuation">:</span> tr<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
	<span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> res<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	resBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> resBody<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>做的事情，比较简单，就是循环去请求 <code>http://www.baidu.com/</code> , 然后等待响应。</p><p><strong>看上去貌似没啥问题吧。</strong></p><p>代码跑起来，也<strong>确实能正常收发消息</strong>。</p><p>但是这段代码跑<strong>一段时间</strong>，就会出现 <code>i/o timeout</code> 的报错。</p><br><p>这其实是最近排查了的一个问题，发现这个坑可能比较容易踩上，我这边对代码做了简化。</p><p>实际生产中发生的<strong>现象</strong>是，<code>golang</code>服务在发起<code>http</code>调用时，虽然<code>http.Transport</code>设置了<code>3s</code>超时，会偶发出现<code>i/o timeout</code>的报错。</p><p>但是查看下游服务的时候，发现下游服务其实 <code>100ms</code> 就已经返回了。</p><br><h2 id="排查" tabindex="-1"><a class="header-anchor" href="#排查"><span>排查</span></a></h2><figure><img src="https://cdn.xiaobaidebug.top/image/五层网络协议对应的消息体变化分析.png" alt="五层网络协议对应的消息体变化分析" tabindex="0" loading="lazy"><figcaption>五层网络协议对应的消息体变化分析</figcaption></figure><p>就很奇怪了，明明服务端显示处理耗时才<code>100ms</code>，且客户端超时设的是<code>3s</code>, 怎么就出现超时报错 <code>i/o timeout</code> 呢？</p><br><p>这里推测有两个可能。</p><ul><li><p>因为服务端打印的日志其实只是<strong>服务端应用层</strong>打印的日志。但客户端应用层发出数据后，中间还经过<strong>客户端的传输层，网络层，数据链路层和物理层</strong>，再经过<strong>服务端的物理层，数据链路层，网络层，传输层到服务端的应用层</strong>。服务端应用层处耗时<strong>100ms</strong>，再原路返回。那剩下的<code>3s-100ms</code><strong>可能是</strong>耗在了整个流程里的各个层上。比如网络不好的情况下，传输层 TCP 使劲丢包重传之类的原因。</p></li><li><p>网络没问题，客户端到服务端链路整个收发流程大概耗时就是<code>100ms</code>左右。客户端处理逻辑问题导致超时。</p><br></li></ul><p><strong>一般遇到问题，大部分情况下都不会是底层网络的问题，大胆怀疑是自己的问题就对了</strong>，不死心就抓个包看下。</p><figure><img src="https://cdn.xiaobaidebug.top/image/wiresharkcp2.png" alt="抓包结果" tabindex="0" loading="lazy"><figcaption>抓包结果</figcaption></figure><p>分析下，从刚开始三次握手（<strong>画了红框的地方</strong>）。</p><p>到最后出现超时报错 <code>i/o timeout</code> （<strong>画了蓝框的地方</strong>）。</p><p>从<code>time</code>那一列从<code>7</code>到<code>10</code>，确实间隔<code>3s</code>。而且看<strong>右下角</strong>的蓝框，是<code>51169</code>端口发到<code>80</code>端口的一次<code>Reset</code>连接。</p><p><code>80</code>端口是服务端的端口。换句话说就是客户端<code>3s</code>超时<strong>主动</strong>断开链接的。</p><p>但是再仔细看下<strong>第一行</strong>三次握手到<strong>最后</strong>客户端超时主动断开连接的中间，其实有<strong>非常多次 HTTP 请求</strong>。</p><p>回去看代码设置超时的方式。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	tr <span class="token operator">=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">{</span>
		MaxIdleConns<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
		Dial<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>netw<span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialTimeout</span><span class="token punctuation">(</span>netw<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//设置建立连接超时</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
			err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">SetDeadline</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//设置发送接受数据超时</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> conn<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，这里的<code>3s</code>超时，其实是在<strong>建立连接之后</strong>开始算的，而不是<strong>单次调用开始算的</strong>超时。</p><p>看注释里写的是</p><blockquote><p>SetDeadline sets the read and write deadlines associated with the <strong>connection</strong>.</p></blockquote><br><br><h2 id="超时原因" tabindex="-1"><a class="header-anchor" href="#超时原因"><span>超时原因</span></a></h2><p>大家知道<code>HTTP</code>是应用层协议，传输层用的是<code>TCP</code>协议。</p><p>HTTP 协议从<code>1.0</code>以前，默认用的是<code>短连接</code>，每次发起请求都会建立 TCP 连接。收发数据。然后断开连接。</p><p>TCP 连接每次都是三次握手。每次断开都要四次挥手。</p><p>其实没必要每次都建立新连接，建立的连接不断开就好了，每次发送数据都复用就好了。</p><p>于是乎，HTTP 协议从<code>1.1</code>之后就默认使用<code>长连接</code>。具体相关信息可以看之前的 <a href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A1%AC%E6%A0%B8%EF%BC%81%E6%BC%AB%E7%94%BB%E5%9B%BE%E8%A7%A3HTTP%E7%9F%A5%E8%AF%86%E7%82%B9_%E9%9D%A2%E8%AF%95%E9%A2%98">这篇文章</a>。</p><p>那么<code>golang标准库</code>里也兼容这种实现。</p><p>通过建立一个连接池，针对<code>每个域名</code>建立一个 TCP 长连接，比如<code>http://baidu.com</code>和<code>http://golang.com</code> 就是两个不同的域名。</p><p>第一次访问<code>http://baidu.com</code> 域名的时候会建立一个连接，用完之后放到空闲连接池里，下次再要访问<code>http://baidu.com</code> 的时候会重新从连接池里把这个连接捞出来<code>复用</code>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/复用长连接.png" alt="复用长连接" tabindex="0" loading="lazy"><figcaption>复用长连接</figcaption></figure><br>`,44),d={href:"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%BB%99%E5%A4%A7%E5%AE%B6%E4%B8%A2%E8%84%B8%E4%BA%86%EF%BC%8C%E7%94%A8%E4%BA%86%E4%B8%89%E5%B9%B4golang%EF%BC%8C%E6%88%91%E8%BF%98%E6%98%AF%E6%B2%A1%E7%AD%94%E5%AF%B9%E8%BF%99%E9%81%93%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%A2%98.html",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"一个读 goroutine 和一个写 goroutine",-1),m=n("code",null,"3",-1),v=n("code",null,"1+2*N",-1),b=n("code",null,"N",-1),g=p(`<br><p>假设第一次请求要<code>100ms</code>，每次请求完<code>http://baidu.com</code> 后都<strong>放入</strong>连接池中，下次继续复用，重复<code>29</code>次，耗时<code>2900ms</code>。</p><p>第<code>30</code>次请求的时候，连接从建立开始到服务返回前就已经用了<code>3000ms</code>，刚好到设置的<strong>3s</strong>超时阈值，那么此时客户端就会报超时 <code>i/o timeout</code> 。</p><p>虽然这时候服务端其实才花了<code>100ms</code>，但耐不住前面<code>29次</code>加起来的耗时已经很长。</p><p>也就是说只要通过 <code>http.Transport</code> 设置了 <code>err = conn.SetDeadline(time.Now().Add(time.Second * 3)) </code>，并且你用了<strong>长连接</strong>，哪怕服务端处理再快，客户端设置的超时再长，总有一刻，你的程序会报超时错误。</p><h2 id="正确姿势" tabindex="-1"><a class="header-anchor" href="#正确姿势"><span>正确姿势</span></a></h2><p>原本预期是给每次调用设置一个超时，而不是给整个连接设置超时。</p><p>另外，上面出现问题的原因是给长连接设置了超时，且长连接会复用。</p><p>基于这两点，改一下代码。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bytes&quot;</span>
	<span class="token string">&quot;encoding/json&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;io/ioutil&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> tr <span class="token operator">*</span>http<span class="token punctuation">.</span>Transport

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tr <span class="token operator">=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">{</span>
		MaxIdleConns<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
		<span class="token comment">// 下面的代码被干掉了</span>
		<span class="token comment">//Dial: func(netw, addr string) (net.Conn, error) {</span>
		<span class="token comment">//	conn, err := net.DialTimeout(netw, addr, time.Second*2) //设置建立连接超时</span>
		<span class="token comment">//	if err != nil {</span>
		<span class="token comment">//		return nil, err</span>
		<span class="token comment">//	}</span>
		<span class="token comment">//	err = conn.SetDeadline(time.Now().Add(time.Second * 3)) //设置发送接受数据超时</span>
		<span class="token comment">//	if err != nil {</span>
		<span class="token comment">//		return nil, err</span>
		<span class="token comment">//	}</span>
		<span class="token comment">//	return conn, nil</span>
		<span class="token comment">//},</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token function">Get</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	body <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	req<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">&quot;Get&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> body<span class="token punctuation">)</span>
	req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>

	client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span>
		Transport<span class="token punctuation">:</span> tr<span class="token punctuation">,</span>
		Timeout<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>  <span class="token comment">// 超时加在这里，是每次调用的超时</span>
	<span class="token punctuation">}</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
	<span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> res<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	resBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> resBody<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com/&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看注释会发现，改动的点有两个</p><ul><li><p><code>http.Transport</code>里的建立连接时的一些超时设置干掉了。</p></li><li><p>在发起 http 请求的时候会场景<code>http.Client</code>，此时加入超时设置，这里的超时就可以理解为单次请求的超时了。同样可以看下注释</p><blockquote><p>Timeout specifies a time limit for <strong>requests</strong> made by this Client.</p></blockquote></li></ul><p>到这里，代码就改好了，实际生产中问题也就解决了。</p><p>实例代码里，如果拿去跑的话，其实还会下面的错</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>Get http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token punctuation">:</span> EOF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个是因为调用得太猛了，<code>http://www.baidu.com</code> 那边主动断开的连接，可以理解为一个限流措施，目的是为了保护服务器，<strong>毕竟每个人都像这么搞，服务器是会炸的</strong>。。。</p><p>解决方案很简单，每次 HTTP 调用中间加个<code>sleep</code>间隔时间就好。</p><br><p>到这里，其实问题已经解决了，下面会在源码层面分析出现问题的原因。对读源码不感兴趣的朋友们可以不用接着往下看，直接拉到文章底部<strong>右下角</strong>，做点正能量的事情（<strong>点两下</strong>）支持一下。（<strong>疯狂暗示，拜托拜托，这对我真的很重要！</strong>）</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h2><p><strong>用的 go 版本是 1.12.7</strong>。</p><p>从发起一个网络请求开始跟。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>res<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Response<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">do</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token keyword">if</span> resp<span class="token punctuation">,</span> didTimeout<span class="token punctuation">,</span> err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">send</span><span class="token punctuation">(</span>ireq <span class="token operator">*</span>Request<span class="token punctuation">,</span> rt RoundTripper<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	resp<span class="token punctuation">,</span> err <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">RoundTrip</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
 	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 从这里进入 RoundTrip 逻辑</span>
<span class="token operator">/</span>src<span class="token operator">/</span>net<span class="token operator">/</span>http<span class="token operator">/</span>roundtrip<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span> <span class="token number">16</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">RoundTrip</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Response<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">roundTrip</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">roundTrip</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Response<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 尝试去获取一个空闲连接，用于发起 http 连接</span>
  pconn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">getConn</span><span class="token punctuation">(</span>treq<span class="token punctuation">,</span> cm<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 重点关注这个函数，返回是一个长连接</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">getConn</span><span class="token punctuation">(</span>treq <span class="token operator">*</span>transportRequest<span class="token punctuation">,</span> cm connectMethod<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>persistConn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略了大量逻辑，只关注下面两点</span>
	<span class="token comment">// 有空闲连接就返回</span>
	pc <span class="token operator">:=</span> <span class="token operator">&lt;-</span>t<span class="token punctuation">.</span><span class="token function">getIdleConnCh</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span>

  <span class="token comment">// 没有创建连接</span>
  pc<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">dialConn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cm<span class="token punctuation">)</span>

<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里上面很多代码，其实只是为了展示这部分代码是怎么跟踪下来的，方便大家去看源码的时候去跟一下。</p><p>最后一个上面的代码里有个 <code>getConn</code> 方法。在发起网络请求的时候，会先取一个网络连接，取连接有两个来源。</p><ul><li><p>如果有空闲连接，就拿空闲连接</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token operator">/</span>src<span class="token operator">/</span>net<span class="token operator">/</span>http<span class="token operator">/</span>tansport<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">810</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">getIdleConnCh</span><span class="token punctuation">(</span>cm connectMethod<span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token operator">*</span>persistConn <span class="token punctuation">{</span>
   <span class="token comment">// 返回放空闲连接的chan</span>
   ch<span class="token punctuation">,</span> ok <span class="token operator">:=</span> t<span class="token punctuation">.</span>idleConnCh<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
	 <span class="token comment">// ...</span>
   <span class="token keyword">return</span> ch
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>没有空闲连接，就创建长连接。</p></li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token operator">/</span>src<span class="token operator">/</span>net<span class="token operator">/</span>http<span class="token operator">/</span>tansport<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">1357</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">dialConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">dial</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> cm<span class="token punctuation">.</span><span class="token function">addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">go</span> pconn<span class="token punctuation">.</span><span class="token function">readLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">go</span> pconn<span class="token punctuation">.</span><span class="token function">writeLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当<strong>第一次</strong>发起一个 http 请求时，这时候肯定没有空闲连接，会建立一个新连接。同时会创建一个<strong>读 goroutine 和一个写 goroutine</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/读写协程.png" alt="读写协程" tabindex="0" loading="lazy"><figcaption>读写协程</figcaption></figure><p>注意上面代码里的<code>t.dial(ctx, &quot;tcp&quot;, cm.addr())</code>，如果像文章开头那样设置了 <code>http.Transport</code>的</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>Dial<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>netw<span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialTimeout</span><span class="token punctuation">(</span>netw<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//设置建立连接超时</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
   <span class="token punctuation">}</span>
   err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">SetDeadline</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//设置发送接受数据超时</span>
   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> conn<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这里就会在下面的<code>dial</code>里被执行到</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">dial</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> network<span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
  c<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面调用的设置超时，会执行到</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token operator">/</span>src<span class="token operator">/</span>net<span class="token operator">/</span>net<span class="token punctuation">.</span><span class="token keyword">go</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>conn<span class="token punctuation">)</span> <span class="token function">SetDeadline</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">//...</span>
	c<span class="token punctuation">.</span>fd<span class="token punctuation">.</span><span class="token function">SetDeadline</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span>

<span class="token comment">//...</span>

<span class="token keyword">func</span> <span class="token function">setDeadlineImpl</span><span class="token punctuation">(</span>fd <span class="token operator">*</span>FD<span class="token punctuation">,</span> t time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token function">runtime_pollSetDeadline</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span>pd<span class="token punctuation">.</span>runtimeCtx<span class="token punctuation">,</span> d<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>


<span class="token comment">//go:linkname poll_runtime_pollSetDeadline internal/poll.runtime_pollSetDeadline</span>
<span class="token keyword">func</span> <span class="token function">poll_runtime_pollSetDeadline</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> d <span class="token builtin">int64</span><span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
  <span class="token comment">// 设置一个定时器事件</span>
  rtf <span class="token operator">=</span> netpollDeadline
	<span class="token comment">// 并将事件注册到定时器里</span>
  <span class="token function">modtimer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>rt<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>rd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> rtf<span class="token punctuation">,</span> pd<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>rseq<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的源码，简单来说就是，当第一次调用请求的，会建立个连接，这时候还会注册一个<strong>定时器事件</strong>，假设时间设了<code>3s</code>，那么这个事件会在<code>3s</code>后发生，然后执行注册事件的逻辑。而这个注册事件就是<code>netpollDeadline</code>。 <strong>注意这个<code>netpollDeadline</code>，待会会提到。</strong></p><figure><img src="https://cdn.xiaobaidebug.top/image/读写协程定时器事件.png" alt="读写协程定时器事件" tabindex="0" loading="lazy"><figcaption>读写协程定时器事件</figcaption></figure><p>设置了超时事件，且超时事件是 3s 后之后，发生。再次期间正常收发数据。一切如常。</p><p>直到<code>3s</code>过后，这时候看<code>读goroutine</code>，会等待网络数据返回。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token operator">/</span>src<span class="token operator">/</span>net<span class="token operator">/</span>http<span class="token operator">/</span>tansport<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">1642</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>pc <span class="token operator">*</span>persistConn<span class="token punctuation">)</span> <span class="token function">readLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//...</span>
	<span class="token keyword">for</span> alive <span class="token punctuation">{</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> pc<span class="token punctuation">.</span>br<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 阻塞读取服务端返回的数据</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是一直跟代码。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>src<span class="token operator">/</span>bufio<span class="token operator">/</span>bufio<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span> <span class="token number">129</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Reader<span class="token punctuation">)</span> <span class="token function">Peek</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
   b<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Reader<span class="token punctuation">)</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	n<span class="token punctuation">,</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span>rd<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>b<span class="token punctuation">.</span>w<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token operator">/</span>src<span class="token operator">/</span>net<span class="token operator">/</span>http<span class="token operator">/</span>transport<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span> <span class="token number">1517</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>pc <span class="token operator">*</span>persistConn<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	n<span class="token punctuation">,</span> err <span class="token operator">=</span> pc<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// /src/net/net.go: 173</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>conn<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	n<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>fd<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>fd <span class="token operator">*</span>netFD<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	n<span class="token punctuation">,</span> err <span class="token operator">=</span> fd<span class="token punctuation">.</span>pfd<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token operator">/</span>src<span class="token operator">/</span>internal<span class="token operator">/</span>poll<span class="token operator">/</span>fd_unix<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>fd <span class="token operator">*</span>FD<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//...</span>
  <span class="token keyword">if</span> err <span class="token operator">=</span> fd<span class="token punctuation">.</span>pd<span class="token punctuation">.</span><span class="token function">waitRead</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span>isFile<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">continue</span>
  <span class="token punctuation">}</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">)</span> <span class="token function">waitRead</span><span class="token punctuation">(</span>isFile <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> pd<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> isFile<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">)</span> <span class="token function">wait</span><span class="token punctuation">(</span>mode <span class="token builtin">int</span><span class="token punctuation">,</span> isFile <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
  res <span class="token operator">:=</span> <span class="token function">runtime_pollWait</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>runtimeCtx<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token function">convertErr</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> isFile<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直到跟到 <strong>runtime_pollWait</strong>，这个可以简单认为是<strong>等待服务端数据返回</strong>。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//go:linkname poll_runtime_pollWait internal/poll.runtime_pollWait</span>
<span class="token keyword">func</span> <span class="token function">poll_runtime_pollWait</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>

	<span class="token comment">// 1.如果网络正常返回数据就跳出</span>
  <span class="token keyword">for</span> <span class="token operator">!</span><span class="token function">netpollblock</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token function">int32</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2.如果有出错情况也跳出</span>
		err <span class="token operator">=</span> <span class="token function">netpollcheckerr</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token function">int32</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整条链路跟下来，就是会一直等待数据，等待的结果只有两个</p><ul><li>有可以读的数据</li><li>出现报错</li></ul><p>这里面的<strong>报错</strong>，又有那么两种</p><ul><li>连接关闭</li><li>超时</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">netpollcheckerr</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> mode <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> pd<span class="token punctuation">.</span>closing <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">1</span> <span class="token comment">// errClosing</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token char">&#39;r&#39;</span> <span class="token operator">&amp;&amp;</span> pd<span class="token punctuation">.</span>rd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token char">&#39;w&#39;</span> <span class="token operator">&amp;&amp;</span> pd<span class="token punctuation">.</span>wd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">2</span> <span class="token comment">// errTimeout</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中提到的<code>超时</code>，就是指这里面返回的<code>数字2</code>，会通过下面的函数，转化为 <code>ErrTimeout</code>， 而 <code>ErrTimeout.Error()</code> 其实就是 <code>i/o timeout</code>。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">convertErr</span><span class="token punctuation">(</span>res <span class="token builtin">int</span><span class="token punctuation">,</span> isFile <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> res <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token function">errClosing</span><span class="token punctuation">(</span>isFile<span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> ErrTimeout <span class="token comment">// ErrTimeout.Error() 就是 &quot;i/o timeout&quot;</span>
	<span class="token punctuation">}</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;unreachable: &quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unreachable&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么问题来了。上面返回的超时错误，也就是<strong>返回 2 的时候的条件是怎么满足的</strong>？</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token char">&#39;r&#39;</span> <span class="token operator">&amp;&amp;</span> pd<span class="token punctuation">.</span>rd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> <span class="token char">&#39;w&#39;</span> <span class="token operator">&amp;&amp;</span> pd<span class="token punctuation">.</span>wd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">2</span> <span class="token comment">// errTimeout</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还记得刚刚提到的 <code>netpollDeadline</code>吗？</p><p>这里面放了定时器<code>3s</code>到点时执行的逻辑。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">timerproc</span><span class="token punctuation">(</span>tb <span class="token operator">*</span>timersBucket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 计时器到设定时间点了，触发之前注册函数</span>
	<span class="token function">f</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> seq<span class="token punctuation">)</span> <span class="token comment">// 之前注册的是 netpollDeadline</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">netpollDeadline</span><span class="token punctuation">(</span>arg <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> seq <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">netpolldeadlineimpl</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>pollDesc<span class="token punctuation">)</span><span class="token punctuation">,</span> seq<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token operator">/</span>src<span class="token operator">/</span>runtime<span class="token operator">/</span>netpoll<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span> <span class="token number">428</span>
<span class="token keyword">func</span> <span class="token function">netpolldeadlineimpl</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> seq <span class="token builtin">uintptr</span><span class="token punctuation">,</span> read<span class="token punctuation">,</span> write <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//...</span>
	<span class="token keyword">if</span> read <span class="token punctuation">{</span>
		pd<span class="token punctuation">.</span>rd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
		rg <span class="token operator">=</span> <span class="token function">netpollunblock</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里会设置<code>pd.rd=-1</code>，是指 <code>poller descriptor.read deadline</code> ，含义<strong>网络轮询器文件描述符</strong>的<strong>读超时时间</strong>， 我们知道在 linux 里万物皆文件，这里的文件其实是指这次网络通讯中使用到的<strong>socket</strong>。</p><p>这时候再回去看<strong>发生超时的条件</strong>就是<code>if (mode == &#39;r&#39; &amp;&amp; pd.rd &lt; 0) </code>。</p><p>至此。我们的代码里就收到了 <code>io timeout</code> 的报错。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li><p>不要在 <code>http.Transport</code>中设置超时，那是连接的超时，不是请求的超时。否则可能会出现莫名 <code>io timeout</code>报错。</p></li><li><p>请求的超时在创建<code>client</code>里设置。</p></li></ul><p>如果文章对你有帮助，看下文章底部右下角，做点正能量的事情（<strong>点两下</strong>）支持一下。（<strong>疯狂暗示，拜托拜托，这对我真的很重要！</strong>）</p><p>我是小白，我们下期见。</p><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>`,64),f={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"},w=n("h5",{id:"别说了-一起在知识的海洋里呛水吧",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#别说了-一起在知识的海洋里呛水吧"},[n("span",null,"别说了，一起在知识的海洋里呛水吧")])],-1),B=n("p",null,[s("关注公众号:"),n("strong",null,"【小白 debug】")],-1);function A(_,q){const a=o("ExternalLinkIcon");return c(),i("div",null,[n("blockquote",null,[n("p",null,[s("文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获免费面试题集。本文已经收录在 GitHub "),n("a",u,[s("https://github.com/xiaobaiTech/golangFamily"),t(a)]),s(" , 有大厂面试完整考点和成长路线，欢迎 Star。")])]),r,n("blockquote",null,[n("p",null,[s("插个题外话：这也解释了之前"),n("a",d,[s("这篇文章"),t(a)]),s("里最后的疑问，为什么要强调是同一个域名：一个域名会建立一个连接，一个连接对应"),k,s("。正因为是同一个域名，所以最后才会泄漏"),m,s("个 goroutine，如果不同域名的话，那就会泄漏 "),v,s(" 个协程，"),b,s("就是域名数。")])]),g,n("ul",null,[n("li",null,[n("p",null,[n("a",f,[s("golang进阶面试题八股文合集"),t(a)])])]),n("li",null,[n("p",null,[n("a",h,[s("golang基础面试题八股文合集"),t(a)])])]),n("li",null,[n("p",null,[n("a",E,[s("golang常用标准库第三方库大全"),t(a)])])]),n("li",null,[n("p",null,[n("a",y,[s("golang学习路线"),t(a)])])])]),w,B])}const F=e(l,[["render",A],["__file","io_timeout，希望你不要踩到这个http包的坑.html.vue"]]),D=JSON.parse('{"path":"/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/io_timeout%EF%BC%8C%E5%B8%8C%E6%9C%9B%E4%BD%A0%E4%B8%8D%E8%A6%81%E8%B8%A9%E5%88%B0%E8%BF%99%E4%B8%AAhttp%E5%8C%85%E7%9A%84%E5%9D%91.html","title":"i/o timeout ， 希望你不要踩到这个net/http包的坑","lang":"zh-CN","frontmatter":{"title":"i/o timeout ， 希望你不要踩到这个net/http包的坑","date":"2021-05-18T22:57:55.000Z","tags":null,"categories":"golang面试题","description":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获免费面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 问题 我们来看一段日常代码。 做的事情，比较简单，就是循环去请求 http://www.ba...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/io_timeout%EF%BC%8C%E5%B8%8C%E6%9C%9B%E4%BD%A0%E4%B8%8D%E8%A6%81%E8%B8%A9%E5%88%B0%E8%BF%99%E4%B8%AAhttp%E5%8C%85%E7%9A%84%E5%9D%91.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"i/o timeout ， 希望你不要踩到这个net/http包的坑"}],["meta",{"property":"og:description","content":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获免费面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 问题 我们来看一段日常代码。 做的事情，比较简单，就是循环去请求 http://www.ba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/image/%E4%BA%94%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%B6%88%E6%81%AF%E4%BD%93%E5%8F%98%E5%8C%96%E5%88%86%E6%9E%90.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T13:55:00.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"i/o timeout ， 希望你不要踩到这个net/http包的坑"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:published_time","content":"2021-05-18T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-12T13:55:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"i/o timeout ， 希望你不要踩到这个net/http包的坑\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/image/%E4%BA%94%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%B6%88%E6%81%AF%E4%BD%93%E5%8F%98%E5%8C%96%E5%88%86%E6%9E%90.png\\",\\"https://cdn.xiaobaidebug.top/image/wiresharkcp2.png\\",\\"https://cdn.xiaobaidebug.top/image/%E5%A4%8D%E7%94%A8%E9%95%BF%E8%BF%9E%E6%8E%A5.png\\",\\"https://cdn.xiaobaidebug.top/image/%E8%AF%BB%E5%86%99%E5%8D%8F%E7%A8%8B.png\\",\\"https://cdn.xiaobaidebug.top/image/%E8%AF%BB%E5%86%99%E5%8D%8F%E7%A8%8B%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BA%8B%E4%BB%B6.png\\"],\\"datePublished\\":\\"2021-05-18T22:57:55.000Z\\",\\"dateModified\\":\\"2024-05-12T13:55:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/io_timeout%EF%BC%8C%E5%B8%8C%E6%9C%9B%E4%BD%A0%E4%B8%8D%E8%A6%81%E8%B8%A9%E5%88%B0%E8%BF%99%E4%B8%AAhttp%E5%8C%85%E7%9A%84%E5%9D%91.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/io_timeout%EF%BC%8C%E5%B8%8C%E6%9C%9B%E4%BD%A0%E4%B8%8D%E8%A6%81%E8%B8%A9%E5%88%B0%E8%BF%99%E4%B8%AAhttp%E5%8C%85%E7%9A%84%E5%9D%91.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"i/o timeout ， 希望你不要踩到这个net/http包的坑"}],["meta",{"property":"og:description","content":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获免费面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 问题 我们来看一段日常代码。 做的事情，比较简单，就是循环去请求 http://www.ba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T13:55:00.000Z"}],["meta",{"property":"article:published_time","content":"2021-05-18T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-12T13:55:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"i/o timeout ， 希望你不要踩到这个net/http包的坑\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-05-18T22:57:55.000Z\\",\\"dateModified\\":\\"2024-05-12T13:55:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"排查","slug":"排查","link":"#排查","children":[]},{"level":2,"title":"超时原因","slug":"超时原因","link":"#超时原因","children":[]},{"level":2,"title":"正确姿势","slug":"正确姿势","link":"#正确姿势","children":[]},{"level":2,"title":"源码分析","slug":"源码分析","link":"#源码分析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315540000,"updatedTime":1715522100000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":3},{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":13.48,"words":4044},"filePathRelative":"golang/核心知识点/io_timeout，希望你不要踩到这个http包的坑.md","localizedDate":"2021年5月18日","autoDesc":true}');export{F as comp,D as data};
