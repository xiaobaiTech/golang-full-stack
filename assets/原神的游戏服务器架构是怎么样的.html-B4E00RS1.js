import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as o,e as r}from"./app-DwpWJ2P8.js";const n={},g=r('<h2 id="原神的游戏服务器架构是怎么样的" tabindex="-1"><a class="header-anchor" href="#原神的游戏服务器架构是怎么样的"><span>原神的游戏服务器架构是怎么样的？</span></a></h2><p>现在最火的游戏「<strong>原神</strong>」，它的玩法有点像「<strong>塞尔达旷野之息</strong>」，<strong>是故意的还是不小心？</strong></p><p>你可能无所吊谓，但如果换成你最爱的<strong>王者农药</strong>或者<strong>吃鸡战场</strong>，又或者是你最烦的<strong>渣渣辉</strong>代言的<strong>一刀 999</strong>呢？</p><p>那么问题来了，你知道它们的<strong>游戏服务器架构</strong>是怎么样的吗？</p><p>今天我们从单机游戏开始聊起，让大家了解下网络游戏架构的演化过程，最后看看大家最关心的<strong>原神游戏服务器架构</strong>是怎么样的。</p><h3 id="单机游戏" tabindex="-1"><a class="header-anchor" href="#单机游戏"><span>单机游戏</span></a></h3><p>小时候我爸斥&quot;巨资&quot;给我买了个小霸王，希望我能通过它学会怎么用五笔输入法在键盘打字。</p><p>不出意外，打字我是一丁点没学会，但却对「超级玛丽」哪一关的角落里有变身蘑菇了然于心。</p><p>后来家里有了电脑后，我学会了玩「暴力摩托」，「侠盗猎车」。</p><p>它们都有个共同点，<strong>不需要联网</strong>，因此，我们一般称它为<strong>单机游戏</strong>。</p><p>本质上，它们也是计算机<strong>进程</strong>的一种。</p><p>通过进程里的<strong>代码逻辑</strong>，我们能在游戏世界内探索地图的每个角落，能拾取道具，还能跟怪物对战，释放技能。</p><p>所有的游戏逻辑都在用户的电脑里，因此，就算没网，用户也一样能玩游戏。</p><figure><img src="https://cdn.xiaobaidebug.top/1678582811976.png" alt="单机游戏" tabindex="0" loading="lazy"><figcaption>单机游戏</figcaption></figure><p>但这样就有个问题，正因为<strong>所有的代码逻辑</strong>都在用户那，因此用户就可以通过修改进程数据来达到<strong>作弊</strong>的效果。比如，当角色挂了的时候，观察哪部分进程数据发生了变化，我们就大概能猜出内存里哪个地方是<strong>控制复活次数</strong>的，将它改大，你就能实现<strong>无限续命</strong>。我相信你肯定玩过<strong>99 条命</strong>版本的「魂斗罗」和「超级玛丽」。</p><br><h3 id="网络游戏" tabindex="-1"><a class="header-anchor" href="#网络游戏"><span>网络游戏</span></a></h3><p>表面上看，作弊貌似会让玩家更爽，但那都是短期的，它其实影响了游戏的公平性，长期来看，它会让用户流失的更快，进而影响游戏营收。</p><p>因此作为开发者，我们得让用户改不了一些<strong>核心数据</strong>，那最好的办法就是将核心数据逻辑从用户侧挪出去，放到远端服务器里。</p><p>于是，游戏就被分成了<strong>两部分</strong>，一部分是游戏画面，负责玩家交互，画面渲染等，这就是<strong>游戏客户端</strong>。另一部分负责游戏角色的核心玩法逻辑和数据，这就是<strong>游戏服务端</strong>，放游戏核心逻辑数据的那个服务器，我们叫它<strong>GameServer</strong>。</p><p>于是游戏架构成了这样。玩家客户端通过网络直连<strong>GameServer</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1678583573686.png" alt="最简单的网络游戏架构" tabindex="0" loading="lazy"><figcaption>最简单的网络游戏架构</figcaption></figure><p>但我们总不能给每个玩家都给配一个<strong>GameServer</strong>，因此<strong>GameServer</strong>需要<strong>支持多人同时在线</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1678583949128.png" alt="多人同时在线游戏" tabindex="0" loading="lazy"><figcaption>多人同时在线游戏</figcaption></figure><p>这就是最简单的<strong>网络游戏架构</strong>。早期的网络游戏，以及现在很多简单的<strong>小程序游戏</strong>服务端都是这么做的。</p><p>但这样有个很大的问题，因为游戏这块蛋糕很大，所以总会遇到很多<strong>挺刑</strong>的事情。</p><p>如果让用户直连游戏服务端，那相当于把<strong>游戏服务端的 ip</strong>暴露给了所有人。</p><p>不赚钱还好，一旦游戏赚钱，就会遇到各种攻击。</p><blockquote><p>你猜《羊了个羊》最火的时候为啥老是崩溃？</p></blockquote><p>假设一个<strong>GameServer</strong>能承载 4k 个玩家，服务器内存储着 4k 个游戏玩家当前的游戏数据状态，一旦服务器遭受直接攻击，那 4k 个玩家都会被影响，并且这类服务器承载了大量游戏逻辑，因此启动需要加载各种地图，商品，怪物等各种配置，会很慢，每一秒玩家都在流失，<strong>每一次崩溃都可能让老板的宝马变青桔</strong>。</p><p>这攻击的是服务器吗？这明明攻击的是老板的钱包。</p><p>那么问题来了。</p><p>既然那么危险，那为什么现在很多简单的<strong>小程序游戏</strong>服务端还是这么设计？</p><p>当然是因为游戏还没赚钱，需要快速上线，小作坊盈利要紧！更复杂更安全的游戏架构，意味着更高的开发成本，怎么说呢，别人都还没开始攻击老板钱包，你就先攻击起来了？想成为优秀人才被输送到社会吗？</p><blockquote><p>只是开个玩笑，不好笑就当我没说过</p></blockquote><p>有没有更好的方案？</p><p>有。</p><h3 id="引入-gateway-和-logingate" tabindex="-1"><a class="header-anchor" href="#引入-gateway-和-logingate"><span>引入 Gateway 和 logingate</span></a></h3><p>我们可以在客户端和 GameServer 之间再加一层<strong>网关服务器</strong>，也叫<code>Gateway</code>，于是服务架构就成了下面这样。通过<strong>多个 Gateway</strong>去连接 Gameserver。Gateway 内部<strong>几乎</strong>没什么逻辑，你可以认为它就是<strong>简单转发</strong>客户端数据到 Gameserver。</p><figure><img src="https://cdn.xiaobaidebug.top/1665647681905.png" alt="用户直连网关" tabindex="0" loading="lazy"><figcaption>用户直连网关</figcaption></figure><p>每个<code>Gateway</code>只服务<strong>部分用户</strong>，一旦它被攻击导致崩了，客户端发起重连，就能打到其他<code>Gateway</code>上，<code>GameServer</code>支持游戏角色掉线重连，从效果上来看，就像是你打着打着游戏进个电梯，从电梯出来后转转菊花，就又重新连上了。</p><figure><img src="https://cdn.xiaobaidebug.top/1679492759529.png" alt="gateway崩溃后不太影响用户" tabindex="0" loading="lazy"><figcaption>gateway崩溃后不太影响用户</figcaption></figure><p>但 Gateway 那么多，客户端第一次登录的时候，怎么知道自己该登录到哪个 Gateway 呢？因此我们还需要一个<strong>登录服务器</strong>，也就是<code>Logingate</code>，用于处理第一次登录的用户请求。用户登录时，Logingate 根据当前 Gateway 的人数分布情况，将用户分发到某个比较空闲的 Gateway 上，实现一定程度的<strong>负载均衡</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1678585121090.png" alt="加入logingate" tabindex="0" loading="lazy"><figcaption>加入logingate</figcaption></figure><h3 id="引入-dbserver" tabindex="-1"><a class="header-anchor" href="#引入-dbserver"><span>引入 DBserver</span></a></h3><p>用户在游戏里创建了角色，下线后过几天再打开，需要能接着玩。这就需要我们有个地方<strong>保存用户数据</strong>，比如<code>mysql</code>数据库。</p><p>Gameserver 中用户产生的数据都会写入到数据库中，但写数据库操作其实是很耗时的，因此一般不能放在玩家的<strong>主流程</strong>里<strong>同步</strong>执行，只能<strong>异步</strong>操作。</p><p>当用户变多，异步写数据库的操作就会变多。Gameserver 是经常有版本迭代的，重启服务器很常见，这时候就需要等待这些写数据库操作完成后才能重启。</p><p>就挺不方便的。</p><p>怎么办呢？考虑到写 DB 的这一行为基本上不太会变化，完全可以从 Gameserver 单独拎出来，做成一个新的<code>DBServer</code>。于是架构就成了下面这样。</p><figure><img src="https://cdn.xiaobaidebug.top/1678585535958.png" alt="加入DBServer" tabindex="0" loading="lazy"><figcaption>加入DBServer</figcaption></figure><p>类似的还能拆的功能还有很多，比如<strong>商城</strong>服务器，<strong>语音</strong>服务器，<strong>聊天邮件</strong>服务器等。</p><p>这样<code>Gameserver</code>就可以更专注的去写游戏业务逻辑了。</p><h3 id="一般-gameserver-怎么扩展" tabindex="-1"><a class="header-anchor" href="#一般-gameserver-怎么扩展"><span>一般 Gameserver 怎么扩展</span></a></h3><p>玩家<strong>多次重复登录</strong>游戏时，用到的 Logingate, Gateway, DBServer 都<strong>可以是不同的</strong>。</p><p>怎么理解上面这句话？</p><p>我不是每次登录都非得将登录请求打到<strong>同一个</strong>登录服务器 Logingate 上，只要任意一个 Logingate 能帮我验证下账号密码就好了。因此我们说这样的服务是<strong>无状态</strong>的，当请求的流量变大，无状态的服务感觉扛不住了，多复制几个同样的实例出来就好了，这就是所谓的<strong>水平扩展</strong>。</p><p>但 Gameserver 却不同，对于<strong>多人在线游戏</strong>（mmorpg）来说，你这次登录的是 A 服务器，被里面的某个玩家砍下线了，你当然希望重新上线能回到那个玩家身边，再战三百回合。因此我们说 Gameserver 是<strong>有状态</strong>的，不能通过单纯的水平扩展来提升服务的同时在线人数。</p><p><strong>那么有状态的服务器该怎么扩展呢？</strong></p><p>对于常见的 mmorpg 类型游戏，比如大家刷网页最烦的一刀 999 的传奇类游戏，因为游戏玩法就是要<strong>多人同屏对战</strong>，对战时的伤害计算等逻辑全都是纯内存操作。技能释放时机，怪物或玩家角色死亡顺序都直接影响玩家最终的收益，所以它们需要有严格的先后顺序。这就导致了这类游戏，<strong>很多时候</strong>就是一个服务器大概几千人全都放在一个<strong>单线程</strong>里去执行游戏逻辑。</p><p>想要支撑更多的玩家同时在线的话，就得<strong>开新服</strong>，意思就是以前面提到的服务器架构（Gameserver, Gateway, DBserver, Logingate）为<strong>一组</strong>，平行扩展出非常<strong>多组</strong>这样的服务出来，服务器<strong>组与组之间完全隔离</strong>。</p><p>所以你登录游戏的时候，经常能看到各种广东 1 区，上海 5 区。</p><figure><img src="https://cdn.xiaobaidebug.top/1678585935832.png" alt="分区分服" tabindex="0" loading="lazy"><figcaption>分区分服</figcaption></figure><p>当然，拆分服务区除了技术上的考虑外，还有游戏策划上的设计。比如广东 1 区和广东 2 区刚开服的时候火爆得很，每个区都会产生个<code>top1</code>的老板，后期玩家随着时间逐渐流失，就可以将两个区合并，重新刺激玩家进行竞争，为了保住 top1 的位置，老板们争相充钱。</p><p>小伎俩，但就是<strong>屡试不爽</strong>。</p><p>这套组合拳下来，<strong>老板的青桔又能重新变回宝马</strong>。</p><h3 id="原神的-gameserver-怎么扩展" tabindex="-1"><a class="header-anchor" href="#原神的-gameserver-怎么扩展"><span>原神的 Gameserver 怎么扩展</span></a></h3><p>但是「原神」明显不属于上面这一类拆分方式。</p><p>从登录界面可以看出「原神」并没有这种花里胡哨的分区方式。</p><p>目测是整个<strong>国内大陆同服</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1678462343039.jpeg" alt="原神登录界面" tabindex="0" loading="lazy"><figcaption>原神登录界面</figcaption></figure><p>这是不是说，这么多玩家，全都挤在一个<code>Gameserver</code>里？</p><p>那当然不是，原神这么火爆，几个亿的在线，全都挤在一个<code>Gameserver</code>里的话，服务器根本扛不住。原神从<strong>玩法</strong>上就跟传奇这类游戏不同，传奇这类 mmorpg 的玩法就是千百人同时在线<strong>同屏 PK</strong>，玩家间的<strong>交互非常强</strong>。上次在这个地图被人砍下线了，再次上线还得回到原地对着砍你的仇家无能狂怒一下。</p><p>而原神大部分时候它就是个<strong>类似单机游戏</strong>的玩法，玩家就你自己一个，大部分时候<strong>几乎没</strong>什么玩家间的交互。不管你登录到哪个 Gameserver，它都能根据玩家角色上的进度数据调整剧情。因此大部分时候 Gameserver 就像是<strong>无状态</strong>的，那意味着 Gameserver 可以<strong>无限扩展</strong>。</p><p>但它也<strong>不是纯单机</strong>，也有几个玩家组队刷怪的玩法，可以理解为一个<strong>小房间</strong>玩法，所以需要引入一些<strong>中心服务器</strong>（集群）去协调玩家之间的交互。</p><figure><img src="https://cdn.xiaobaidebug.top/1678587308872.png" alt="加入中心服务器后可无限扩展的游戏架构" tabindex="0" loading="lazy"><figcaption>加入中心服务器后可无限扩展的游戏架构</figcaption></figure><p>如果玩家之间发生交互，比如 A 玩家要进入 B 玩家的大世界，那就让<strong>中心服务器</strong>控制将 A 玩家跳转到 B 玩家所在的 Gameserver 中，将两个玩家放在一个线程里去执行逻辑。</p><p>而类似吃鸡和王者荣耀这种就是典型的<strong>房间类</strong>游戏，每一局游戏都会将<strong>限制人数</strong>的<code>n个人</code>从游戏大厅转移到一个<strong>游戏房间</strong>里，实际上就是将<code>n个</code>玩家齐刷刷放到某个 Gameserver 中，通过<strong>单线程</strong>将<code>n个人</code>的游戏逻辑跑起来。因此房间类服务器天然就是可以<strong>无限扩展</strong>的。</p><figure><img src="https://cdn.xiaobaidebug.top/1678588288646.png" alt="房间服务器" tabindex="0" loading="lazy"><figcaption>房间服务器</figcaption></figure><h3 id="mmorpg-游戏服务器怎么拆分" tabindex="-1"><a class="header-anchor" href="#mmorpg-游戏服务器怎么拆分"><span>mmorpg 游戏服务器怎么拆分</span></a></h3><p>上面提到，像传奇这类 mmorpg 会将所有玩家都挤到一个 Gameserver 中，因此<strong>单区单服</strong>同时在线能有几千人就差不多了。但如果我们确实想要<strong>提升单区单服</strong>的同时在线人数，有什么办法可以做拆分呢？</p><p>我们回过头来想想，所有人都挤在<strong>单个线程</strong>的话会有个很明显的问题，A 地图一千多个玩家在打<strong>世界 boss</strong>，卡的要死可以理解，但 B 地图新手村里没几个人，也会觉得卡卡的。</p><p>就不太合理，因此我们可以根据<strong>地图场景</strong>进行拆分，大部分游戏是可以根据<strong>地图和副本</strong>拆分成一小块一小块的，玩家之间一般也只会在<strong>单个地图</strong>里发生对战等强交互行为。</p><p>所以，我们可以将大地图拆成多个小地图，将 Gameserver 也分成多个，<strong>每个 Gameserver 负责一部分小地图</strong>，这样地图拆的越小，单个 Gameserver 负责的人就越少，于是乎游戏整体承载的人数就变多了。</p><p>是不是很妙！！</p><p>同样，切分地图的方法其实也非常适合「原神」这种<strong>超大世界地图</strong>的游戏。</p><figure><img src="https://cdn.xiaobaidebug.top/1678589735855.png" alt="一个子地图对应一个服务器" tabindex="0" loading="lazy"><figcaption>一个子地图对应一个服务器</figcaption></figure><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong>单机游戏</strong>有被作弊的风险，因此可以考虑将<strong>核心</strong>数据放到游戏服务器中。</li><li>让客户端直连<code>Gameserver</code>，可能会导致暴露核心服务器<code>IP</code>，有<strong>被攻击</strong>风险，因此需要在客户端和<code>Gameserver</code>之间加个<code>Gateway</code>和<code>Logingate</code>，同时还能将数据存储相关的功能拆出去变成<code>DBServer</code>，同样还能拆出聊天服务器邮件服务器等，让<code>Gameserver</code>更专注于业务逻辑。</li><li><code>Gameserver</code>本身是个超级单体，支撑的玩家数量有限，想要支撑更多玩家人数的话，就需要<strong>对 Gameserver 进行扩展</strong>。根据游戏的不同，我们会有不同的策略，比如传奇这类<strong>mmorpg</strong>可以考虑多开几个区服，或者根据地图去拆分。王者农药和吃鸡是<strong>房间类</strong>游戏，天然支持无限<strong>水平扩展</strong>，「<strong>原神</strong>」大部分时候更像<strong>单机游戏</strong>，因此也很适合水平扩展。</li></ul><h3 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h3><p>上面提到了一个<strong>将大地图拆成小地图</strong>的方式去拆分游戏服务器的策略。这对于地图与地图之间交互较弱的游戏非常适合，但对于一些<strong>无缝</strong>超大地图的游戏，玩家是要能看到对面地图的玩家和怪物的，如果对地图进行拆分，这种情况该怎么处理呢？</p>',91),a=[g];function s(p,i){return e(),o("div",null,a)}const l=t(n,[["render",s],["__file","原神的游戏服务器架构是怎么样的.html.vue"]]),E=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8E%9F%E7%A5%9E%E7%9A%84%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84.html","title":"","lang":"zh-CN","frontmatter":{"description":"原神的游戏服务器架构是怎么样的？ 现在最火的游戏「原神」，它的玩法有点像「塞尔达旷野之息」，是故意的还是不小心？ 你可能无所吊谓，但如果换成你最爱的王者农药或者吃鸡战场，又或者是你最烦的渣渣辉代言的一刀 999呢？ 那么问题来了，你知道它们的游戏服务器架构是怎么样的吗？ 今天我们从单机游戏开始聊起，让大家了解下网络游戏架构的演化过程，最后看看大家最关心...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8E%9F%E7%A5%9E%E7%9A%84%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:description","content":"原神的游戏服务器架构是怎么样的？ 现在最火的游戏「原神」，它的玩法有点像「塞尔达旷野之息」，是故意的还是不小心？ 你可能无所吊谓，但如果换成你最爱的王者农药或者吃鸡战场，又或者是你最烦的渣渣辉代言的一刀 999呢？ 那么问题来了，你知道它们的游戏服务器架构是怎么样的吗？ 今天我们从单机游戏开始聊起，让大家了解下网络游戏架构的演化过程，最后看看大家最关心..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/1678582811976.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-26T01:50:16.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-04-26T01:50:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/1678582811976.png\\",\\"https://cdn.xiaobaidebug.top/1678583573686.png\\",\\"https://cdn.xiaobaidebug.top/1678583949128.png\\",\\"https://cdn.xiaobaidebug.top/1665647681905.png\\",\\"https://cdn.xiaobaidebug.top/1679492759529.png\\",\\"https://cdn.xiaobaidebug.top/1678585121090.png\\",\\"https://cdn.xiaobaidebug.top/1678585535958.png\\",\\"https://cdn.xiaobaidebug.top/1678585935832.png\\",\\"https://cdn.xiaobaidebug.top/1678462343039.jpeg\\",\\"https://cdn.xiaobaidebug.top/1678587308872.png\\",\\"https://cdn.xiaobaidebug.top/1678588288646.png\\",\\"https://cdn.xiaobaidebug.top/1678589735855.png\\"],\\"dateModified\\":\\"2024-04-26T01:50:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8E%9F%E7%A5%9E%E7%9A%84%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8E%9F%E7%A5%9E%E7%9A%84%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:description","content":"原神的游戏服务器架构是怎么样的？ 现在最火的游戏「原神」，它的玩法有点像「塞尔达旷野之息」，是故意的还是不小心？ 你可能无所吊谓，但如果换成你最爱的王者农药或者吃鸡战场，又或者是你最烦的渣渣辉代言的一刀 999呢？ 那么问题来了，你知道它们的游戏服务器架构是怎么样的吗？ 今天我们从单机游戏开始聊起，让大家了解下网络游戏架构的演化过程，最后看看大家最关心..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-26T01:50:16.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-26T01:50:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-26T01:50:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"原神的游戏服务器架构是怎么样的？","slug":"原神的游戏服务器架构是怎么样的","link":"#原神的游戏服务器架构是怎么样的","children":[{"level":3,"title":"单机游戏","slug":"单机游戏","link":"#单机游戏","children":[]},{"level":3,"title":"网络游戏","slug":"网络游戏","link":"#网络游戏","children":[]},{"level":3,"title":"引入 Gateway 和 logingate","slug":"引入-gateway-和-logingate","link":"#引入-gateway-和-logingate","children":[]},{"level":3,"title":"引入 DBserver","slug":"引入-dbserver","link":"#引入-dbserver","children":[]},{"level":3,"title":"一般 Gameserver 怎么扩展","slug":"一般-gameserver-怎么扩展","link":"#一般-gameserver-怎么扩展","children":[]},{"level":3,"title":"原神的 Gameserver 怎么扩展","slug":"原神的-gameserver-怎么扩展","link":"#原神的-gameserver-怎么扩展","children":[]},{"level":3,"title":"mmorpg 游戏服务器怎么拆分","slug":"mmorpg-游戏服务器怎么拆分","link":"#mmorpg-游戏服务器怎么拆分","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"最后","slug":"最后","link":"#最后","children":[]}]}],"git":{"createdTime":1714096216000,"updatedTime":1714096216000,"contributors":[{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":12.34,"words":3701},"filePathRelative":"计算机基础/网络基础/核心知识点/原神的游戏服务器架构是怎么样的.md","localizedDate":"2024年4月26日","autoDesc":true}');export{l as comp,E as data};
