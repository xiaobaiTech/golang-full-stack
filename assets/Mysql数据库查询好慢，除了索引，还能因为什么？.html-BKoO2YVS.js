import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as l,b as s,d as e,e as o,o as r,r as c}from"./app-CfNjLirf.js";const i={},d={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function m(b,n){const a=c("ExternalLinkIcon");return r(),t("div",null,[n[4]||(n[4]=l(`<h1 id="mysql-数据库查询好慢-除了索引-还能因为什么" tabindex="-1"><a class="header-anchor" href="#mysql-数据库查询好慢-除了索引-还能因为什么"><span>mysql 数据库查询好慢，除了索引，还能因为什么？</span></a></h1><br><p>我熟练应用 ctrl c 和 ctrl v 开发 curd 代码好多年了。</p><p>mysql 查询为什么会慢，关于这个问题，在实际开发经常会遇到，而面试中，也是个高频题。</p><p>遇到这种问题，我们一般也会想到是因为索引。</p><p><strong>那除开索引之外，还有哪些因素会导致数据库查询变慢呢？</strong></p><p><strong>有哪些操作，可以提升 mysql 的查询能力呢？</strong></p><p>今天这篇文章，我们就来聊聊会导致数据库查询变慢的场景有哪些，并给出原因和解决方案。</p><br><h3 id="数据库查询流程" tabindex="-1"><a class="header-anchor" href="#数据库查询流程"><span>数据库查询流程</span></a></h3><p>我们先来看下，一条查询语句下来，会经历哪些流程。</p><p>比如我们有一张数据库表</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名字&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>gender<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;性别&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_age<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_gender<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>gender<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们平常写的应用代码（go 或 C++之类的），这时候就叫<strong>客户端</strong>了。</p><p>客户端底层会带着账号密码，尝试向 mysql 建立一条 TCP 长链接。</p><p>mysql 的<strong>连接管理模块</strong>会对这条连接进行管理。</p><p>建立连接后，客户端执行一条查询 sql 语句。 比如：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端会将 sql 语句通过网络连接给 mysql。</p><p>mysql 收到 sql 语句后，会在<strong>分析器</strong>中先判断下 SQL 语句有没有语法错误，比如 select，如果少打一个<code>l</code>，写成<code>slect</code>，则会报错<code>You have an error in your SQL syntax; </code>。这个报错对于我这样的手残党来说可以说是很熟悉了。</p><p>接下来是<strong>优化器</strong>，在这里会<strong>根据一定的规则选择该用什么索引</strong>。</p><p>之后，才是通过<strong>执行器</strong>去调用<strong>存储引擎</strong>的接口函数。</p><figure><img src="https://cdn.xiaobaidebug.top/Mysql架构56.drawio.png" alt="Mysql架构" tabindex="0" loading="lazy"><figcaption>Mysql架构</figcaption></figure><p><strong>存储引擎</strong>类似于一个个组件，它们才是 mysql 真正获取一行行数据并返回数据的地方，存储引擎是可以替换更改的，既可以用不支持事务的 MyISAM，也可以替换成支持事务的 Innodb。这个可以在建表的时候指定。比如</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在最常用的是<strong>InnoDB</strong>。</p><p>我们就重点说这个。</p><p>InnoDB 中，因为直接操作磁盘会比较慢，所以加了一层内存提提速，叫<strong>buffer pool</strong>，这里面，放了很多内存页，每一页 16KB，有些内存页放的是数据库表里看到的那种一行行的数据，有些则是放的索引信息。</p><figure><img src="https://cdn.xiaobaidebug.top/image/bufferPool与磁盘2.png" alt="bufferPool与磁盘" tabindex="0" loading="lazy"><figcaption>bufferPool与磁盘</figcaption></figure><p>查询 SQL 到了 InnoDB 中。会根据前面优化器里计算得到的索引，去<strong>查询相应的索引页</strong>，如果不在 buffer pool 里则从磁盘里加载索引页。<strong>再通过索引页加速查询，得到数据页</strong>的具体位置。如果这些数据页不在 buffer pool 中，则从磁盘里加载进来。</p><p>这样我们就得到了我们想要的一行行数据。</p><figure><img src="https://cdn.xiaobaidebug.top/image/索引页与磁盘页的关系.png" alt="索引页与磁盘页的关系" tabindex="0" loading="lazy"><figcaption>索引页与磁盘页的关系</figcaption></figure><p>最后将得到的数据结果返回给客户端。</p><br><h3 id="慢查询分析" tabindex="-1"><a class="header-anchor" href="#慢查询分析"><span>慢查询分析</span></a></h3><p>如果上面的流程比较慢的话，我们可以通过开启<code>profiling</code>看到流程慢在哪。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> profiling<span class="token operator">=</span><span class="token keyword">ON</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected<span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;profiling&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token operator">|</span> profiling     <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后正常执行 sql 语句。</p><p>这些 SQL 语句的执行时间都会被记录下来，此时你想查看有哪些语句被记录下来了，可以执行 <code>show profiles;</code></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> profiles<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+------------+---------------------------------------------------+</span>
<span class="token operator">|</span> Query_ID <span class="token operator">|</span> Duration   <span class="token operator">|</span> Query                                             <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+------------+---------------------------------------------------+</span>
<span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0.06811025</span> <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age<span class="token operator">&gt;=</span><span class="token number">60</span>                  <span class="token operator">|</span>
<span class="token operator">|</span>        <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">0.00151375</span> <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">80</span>  <span class="token operator">|</span>
<span class="token operator">|</span>        <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">0.00230425</span> <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">60</span>  <span class="token operator">|</span>
<span class="token operator">|</span>        <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">0.00070400</span> <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">|</span>
<span class="token operator">|</span>        <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">0.07797650</span> <span class="token operator">|</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age<span class="token operator">!=</span><span class="token number">60</span>                  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+------------+---------------------------------------------------+</span>
<span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关注下上面的<code>query_id</code>，比如<code>select * from user where age&gt;=60 </code>对应的 query_id 是 1，如果你想查看这条 SQL 语句的具体耗时，那么可以执行以下的命令。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> profile <span class="token keyword">for</span> query <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------------------+----------+</span>
<span class="token operator">|</span> <span class="token keyword">Status</span>               <span class="token operator">|</span> Duration <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------------+----------+</span>
<span class="token operator">|</span> <span class="token keyword">starting</span>             <span class="token operator">|</span> <span class="token number">0.000074</span> <span class="token operator">|</span>
<span class="token operator">|</span> checking permissions <span class="token operator">|</span> <span class="token number">0.000010</span> <span class="token operator">|</span>
<span class="token operator">|</span> Opening <span class="token keyword">tables</span>       <span class="token operator">|</span> <span class="token number">0.000034</span> <span class="token operator">|</span>
<span class="token operator">|</span> init                 <span class="token operator">|</span> <span class="token number">0.000032</span> <span class="token operator">|</span>
<span class="token operator">|</span> System <span class="token keyword">lock</span>          <span class="token operator">|</span> <span class="token number">0.000027</span> <span class="token operator">|</span>
<span class="token operator">|</span> optimizing           <span class="token operator">|</span> <span class="token number">0.000020</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token keyword">statistics</span>           <span class="token operator">|</span> <span class="token number">0.000058</span> <span class="token operator">|</span>
<span class="token operator">|</span> preparing            <span class="token operator">|</span> <span class="token number">0.000018</span> <span class="token operator">|</span>
<span class="token operator">|</span> executing            <span class="token operator">|</span> <span class="token number">0.000013</span> <span class="token operator">|</span>
<span class="token operator">|</span> Sending <span class="token keyword">data</span>         <span class="token operator">|</span> <span class="token number">0.067701</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token keyword">end</span>                  <span class="token operator">|</span> <span class="token number">0.000021</span> <span class="token operator">|</span>
<span class="token operator">|</span> query <span class="token keyword">end</span>            <span class="token operator">|</span> <span class="token number">0.000015</span> <span class="token operator">|</span>
<span class="token operator">|</span> closing <span class="token keyword">tables</span>       <span class="token operator">|</span> <span class="token number">0.000014</span> <span class="token operator">|</span>
<span class="token operator">|</span> freeing items        <span class="token operator">|</span> <span class="token number">0.000047</span> <span class="token operator">|</span>
<span class="token operator">|</span> cleaning up          <span class="token operator">|</span> <span class="token number">0.000027</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------------+----------+</span>
<span class="token number">15</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的各个项，大家就可以看到具体耗时在哪。比如从上面可以看出 Sending data 的耗时最大，这个是指<strong>执行器</strong>开始查询数据并将数据发送给客户端的耗时，因为我的这张表符合条件的数据有<strong>好几万条</strong>，所以这块耗时最大，也符合预期。</p><p>一般情况下，我们开发过程中，耗时大部分时候都在<code>Sending data</code>阶段，而这一阶段里如果慢的话，最容易想到的还是索引相关的原因。</p><br><h3 id="索引相关原因" tabindex="-1"><a class="header-anchor" href="#索引相关原因"><span>索引相关原因</span></a></h3><p>索引相关的问题，一般能用 explain 命令帮助分析。通过它能看到<strong>用了哪些索引</strong>，大概会<strong>扫描多少行</strong>之类的信息。</p><p>mysql 会在<strong>优化器阶段</strong>里看下选择哪个索引，查询速度会更快。</p><p>一般主要考虑几个因素，比如：</p><ul><li>选择这个索引大概要扫描<strong>多少行</strong>（rows）</li><li>为了把这些行取出来，需要读<strong>多少个 16kb 的页</strong></li><li>走普通索引需要回表，主键索引则不需要，<strong>回表成本</strong>大不大？</li></ul><br><p>回到 show profile 中提到的 sql 语句，我们使用<code>explain select * from user where age&gt;=60</code> 分析一下。</p><figure><img src="https://cdn.xiaobaidebug.top/image/image-20220319080215281.png" alt="explain sql" tabindex="0" loading="lazy"><figcaption>explain sql</figcaption></figure><p>上面的这条语句，使用的<code>type</code>为 ALL，意味着是<strong>全表扫描</strong>，<code>possible_keys</code>是指<strong>可能用得到的索引</strong>，这里可能使用到的索引是为 age 建的普通索引，但实际上数据库使用的索引是在<code>key</code>那一列，是<code>NULL</code>。也就是说<strong>这句 sql 不走索引，全表扫描</strong>。</p><p>这个是因为数据表里，符合条件的数据行数（<code>rows</code>）太多，如果使用 age 索引，那么需要将它们从 age 索引中读出来，并且 age 索引是<strong>普通索引</strong>，还需要<strong>回表</strong>找到对应的<strong>主键</strong>才能找到对应的<strong>数据页</strong>。算下来还不如直接走主键划算。于是最终选择了全表扫描。</p><p>当然上面只是举了个例子，实际上，mysql 执行 sql 时，<strong>不用索引或者用的索引不符合我们预期</strong>这件事经常发生，索引失效的场景有很多，比如用了<strong>不等号，隐式转换</strong>等，这个相信大家背八股文的时候也背过不少了，我也不再赘述。</p><p>聊两个生产中容易遇到的问题吧。</p><br><h4 id="索引不符合预期" tabindex="-1"><a class="header-anchor" href="#索引不符合预期"><span>索引不符合预期</span></a></h4><p>实际开发中有些情况比较特殊，比如有些数据库表一开始数据量小，索引少，执行 sql 时，确实使用了符合你预期的索引。但随时时间边长，开发的人变多了，数据量也变大了，甚至还可能会加入一些其他重复多余的索引，就有可能出现用着用着，用到了不符合你预期的其他索引了。从而导致查询突然变慢。</p><p>这种问题，也好解决，可以通过<code>force index</code><strong>指定索引</strong>。比如</p><figure><img src="https://cdn.xiaobaidebug.top/image/image-20220319093631814.png" alt="force index指定索引" tabindex="0" loading="lazy"><figcaption>force index指定索引</figcaption></figure><p>通过<code>explain</code>可以看出，加了 force index 之后，sql 就选用了 idx_age 这个索引了。</p><br><h4 id="走了索引还是很慢" tabindex="-1"><a class="header-anchor" href="#走了索引还是很慢"><span>走了索引还是很慢</span></a></h4><p>有些 sql，用<code>explain</code>命令看，明明是走索引的，但还是很慢。一般是两种情况：</p><p>第一种是索引区分度太低，比如网页全路径的 url 链接，这拿来做索引，一眼看过去全都是同一个域名，如果<strong>前缀索引</strong>的长度建得不够长，那这走索引跟走<strong>全表扫描</strong>似的，正确姿势是尽量让索引的<strong>区分度</strong>更高，比如域名去掉，只拿后面 URI 部分去做索引。</p><figure><img src="https://cdn.xiaobaidebug.top/image/索引前缀区分度太低.drawio.png" alt="索引前缀区分度太低" tabindex="0" loading="lazy"><figcaption>索引前缀区分度太低</figcaption></figure><p>第二种是索引中匹配到的数据太大，这时候需要关注的是 explain 里的<strong>rows</strong>字段了。</p><p>它是用于<strong>预估</strong>这个查询语句需要查的行数的，它不一定完全准确，但可以体现个大概量级。</p><p>当它很大时，一般常见的是下面几种情况。</p><ul><li><p>如果这个字段具有<strong>唯一</strong>的属性，比如电话号码等，一般是不应该有大量重复的，那可能是你代码逻辑出现了<strong>大量重复插入</strong>的操作，你需要检查下代码逻辑，或者需要加个<strong>唯一索引</strong>限制下。</p></li><li><p>如果这个字段下的数据就是会很大，是否需要全部拿？如果不需要，加个<code>limit</code>限制下。如果确实要拿全部，那也不能一次性全拿，今天你数据量小，可能一次取一两万都没啥压力，万一哪天涨到了十万级别，那一次性取就有点吃不消了。你可能需要<strong>分批次取</strong>，具体操作是先用<code>order by id</code>排序一下，拿到一批数据后取<code>最大id</code>作为下次取数据的起始位置。</p></li></ul><br><h3 id="连接数过小" tabindex="-1"><a class="header-anchor" href="#连接数过小"><span>连接数过小</span></a></h3><p>索引相关的原因我们聊完了，我们来聊聊，<strong>除了索引之外，还有哪些因素会限制我们的查询速度的。</strong></p><p>我们可以看到，mysql 的 server 层里有个<strong>连接管理</strong>，它的作用是管理客户端和 mysql 之间的长连接。</p><p>正常情况下，客户端与 server 层如果只有<strong>一条</strong>连接，那么在执行 sql 查询之后，只能阻塞等待结果返回，如果有大量查询同时并发请求，那么<strong>后面的请求都需要等待前面的请求执行完成</strong>后，才能开始执行。</p><figure><img src="https://cdn.xiaobaidebug.top/image/连接过少会导致sql阻塞.png" alt="连接过少会导致sql阻塞" tabindex="0" loading="lazy"><figcaption>连接过少会导致sql阻塞</figcaption></figure><p>因此很多时候我们的应用程序，比如 go 或 java 这些，<strong>会打印出 sql 执行了几分钟的日志，但实际上你把这条语句单独拎出来执行，却又是毫秒级别的。<strong>这都是因为这些 sql 语句在</strong>等待</strong>前面的 sql 执行完成。</p><p>怎么解决呢？</p><p>如果我们能<strong>多建几条连接</strong>，那么请求就可以并发执行，后面的连接就不用等那么久了。</p><figure><img src="https://cdn.xiaobaidebug.top/image/增加连接可以加快执行sql.png" alt="增加连接可以加快执行sql" tabindex="0" loading="lazy"><figcaption>增加连接可以加快执行sql</figcaption></figure><p>而连接数过小的问题，<strong>受数据库和客户端两侧同时限制</strong>。</p><br><h4 id="数据库连接数过小" tabindex="-1"><a class="header-anchor" href="#数据库连接数过小"><span>数据库连接数过小</span></a></h4><p>mysql 的最大连接数默认是<code>100</code>, 最大可以达到<code>16384</code>。</p><p>可以通过设置 mysql 的<code>max_connections</code>参数，更改数据库的最大连接数。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token keyword">global</span> max_connections<span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;max_connections&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-----------------+-------+</span>
<span class="token operator">|</span> Variable_name   <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------------+-------+</span>
<span class="token operator">|</span> max_connections <span class="token operator">|</span> <span class="token number">500</span>   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的操作，就把最大连接数改成了 500。</p><br><h4 id="应用侧连接数过小" tabindex="-1"><a class="header-anchor" href="#应用侧连接数过小"><span>应用侧连接数过小</span></a></h4><p>数据库连接大小是调整过了，但貌似问题还是没有变化？还是有很多 sql 执行达到了几分钟，甚至超时？</p><p>那有可能是因为你应用侧（go，java 写的应用，也就是 mysql 的客户端）的连接数也过小。</p><p>应用侧与 mysql 底层的连接，是<strong>基于 TCP 协议的长链接</strong>，而 TCP 协议，需要经过<strong>三次握手和四次挥手</strong>来实现建连和释放。如果我每次执行 sql 都重新建立一个新的连接的话，那就要不断握手和挥手，这很<strong>耗时</strong>。所以一般会建立一个<strong>长连接池</strong>，连接用完之后，塞到连接池里，下次要执行 sql 的时候，再从里面捞一条连接出来用，非常环保。</p><figure><img src="https://cdn.xiaobaidebug.top/image/connection_pool.png" alt="连接池原理" tabindex="0" loading="lazy"><figcaption>连接池原理</figcaption></figure><p>我们一般写代码的时候，都会通过第三方的<strong>orm 库</strong>来对数据库进行操作，而成熟的 orm 库，<strong>百分之一千万都会有个连接池。</strong></p><p>而这个连接池，一般会有个大小。这个大小就控制了你的连接数最大值，如果说你的连接池太小，都还没有数据库的大，那调了数据库的最大连接数也没啥作用。</p><p>一般情况下，可以翻下你使用的 orm 库的文档，看下怎么设置这个连接池的大小，就几行代码的事情，改改就好。比如 go 语言里的<code>gorm</code>里是这么设置的</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span>
	sqlDB<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// SetMaxIdleConns 设置空闲连接池中连接的最大数量</span>
	sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
	<span class="token comment">// SetMaxOpenConns 设置打开数据库连接的最大数量</span>
	sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="buffer-pool-太小" tabindex="-1"><a class="header-anchor" href="#buffer-pool-太小"><span>buffer pool 太小</span></a></h3><p>连接数是上去了，速度也提升了。</p><p>曾经遇到过面试官会追问，<strong>有没有其他办法可以让速度更快呢？</strong></p><p>那必须要眉头紧锁，假装思考，然后说**：有的**。</p><p>我们在前面的数据库查询流程里，提到了进了 innodb 之后，会有一层内存 buffer pool，用于将磁盘数据页加载到内存页中，只要查询到 buffer pool 里有，就可以直接返回，否则就要走磁盘 IO，那就慢了。</p><p>也就是说，<strong>如果我的 buffer pool 越大，那我们能放的数据页就越多，相应的，sql 查询时就更可能命中 buffer pool，那查询速度自然就更快了。</strong></p><p>可以通过下面的命令查询到 buffer pool 的大小，单位是<code>Byte</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">&#39;innodb_buffer_pool_size&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------------------+-----------+</span>
<span class="token operator">|</span> Variable_name           <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+-----------+</span>
<span class="token operator">|</span> innodb_buffer_pool_size <span class="token operator">|</span> <span class="token number">134217728</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是<code>128Mb</code>。</p><p>如果想要调大一点。可以执行</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token keyword">global</span> innodb_buffer_pool_size <span class="token operator">=</span> <span class="token number">536870912</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">&#39;innodb_buffer_pool_size&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------------------+-----------+</span>
<span class="token operator">|</span> Variable_name           <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+-----------+</span>
<span class="token operator">|</span> innodb_buffer_pool_size <span class="token operator">|</span> <span class="token number">536870912</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就把 buffer pool 增大到 512Mb 了。</p><p>但是吧，如果 buffer pool 大小正常，只是<strong>别的原因</strong>导致的查询变慢，那改 buffer pool 毫无意义。</p><p>但问题又来了。</p><br><h4 id="怎么知道-buffer-pool-是不是太小了" tabindex="-1"><a class="header-anchor" href="#怎么知道-buffer-pool-是不是太小了"><span>怎么知道 buffer pool 是不是太小了？</span></a></h4><p>这个我们可以看<strong>buffer pool 的缓存命中率</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/image-20220319113917654.png" alt="查看buffer pool命中率" tabindex="0" loading="lazy"><figcaption>查看buffer pool命中率</figcaption></figure><p>通过 <code>show status like &#39;Innodb_buffer_pool_%&#39;;</code>可以看到跟 buffer pool 有关的一些信息。</p><p><code>Innodb_buffer_pool_read_requests</code>表示读请求的次数。</p><p><code>Innodb_buffer_pool_reads</code> 表示从物理磁盘中读取数据的请求次数。</p><p>所以 buffer pool 的命中率就可以这样得到：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>buffer pool 命中率 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>Innodb_buffer_pool_reads<span class="token operator">/</span>Innodb_buffer_pool_read_requests<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token operator">%</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如我上面截图里的就是，1 - (405/2278354) = 99.98%。可以说命中率非常高了。</p><p>一般情况下<strong>buffer pool 命中率</strong>都在<code>99%</code>以上，如果低于这个值，才需要考虑加大 innodb buffer pool 的大小。</p><p>当然，还可以把这个命中率做到<strong>监控</strong>里，这样半夜 sql 变慢了，早上上班还能定位到原因，就很舒服。</p><br><h3 id="还有哪些骚操作" tabindex="-1"><a class="header-anchor" href="#还有哪些骚操作"><span>还有哪些骚操作？</span></a></h3><p>前面提到的是在<strong>存储引擎层</strong>里加入了 buffer pool 用于缓存内存页，这样可以加速查询。</p><p>那同样的道理，<strong>server 层</strong>也可以加个缓存，直接将第一次查询的结果缓存下来，这样<strong>下次</strong>查询就能立刻返回，听着挺美的。</p><p>按道理，如果命中缓存的话，确实是能为查询加速的。但这个功能限制很大，其中最大的问题是只要数据库表被更新过，表里面的<strong>所有缓存都会失效</strong>，数据表频繁的更新，就会带来频繁的缓存失效。所以这个功能只适合用于那些<strong>不怎么更新的数据表。</strong></p><p>另外，这个功能在<code>8.0版本</code>之后，就被<strong>干掉</strong>了。所以这功能用来聊聊天可以，没必要真的在生产中使用啊。</p><figure><img src="https://cdn.xiaobaidebug.top/image/查询缓存被删除.png" alt="查询缓存被删除" tabindex="0" loading="lazy"><figcaption>查询缓存被删除</figcaption></figure><br><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>数据查询过慢一般是索引问题，可能是因为选错索引，也可能是因为查询的行数太多。</li><li>客户端和数据库连接数过小，会限制 sql 的查询并发数，增大连接数可以提升速度。</li><li>innodb 里会有一层内存 buffer pool 用于提升查询速度，命中率一般&gt;99%，如果低于这个值，可以考虑增大 buffer pool 的大小，这样也可以提升速度。</li><li>查询缓存（query cache）确实能为查询提速，但一般不建议打开，因为限制比较大，并且 8.0 以后的 mysql 里已经将这个功能干掉了。</li></ul><h3 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h3><p>最近原创更文的阅读量稳步下跌，思前想后，夜里辗转反侧。</p><p>我有个不成熟的请求。</p><figure><img src="https://cdn.xiaobaidebug.top/image/u=2281575747,3550568508&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><p><strong>离开广东好长时间了，好久没人叫我靓仔了。</strong></p><p>大家可以在<strong>评论区</strong>里，叫我一靓仔吗？</p><p>我这么善良质朴的愿望，能被满足吗？</p><p>如果实在叫不出口的话，能帮我点下右下角的<strong>点赞和在看</strong>吗？</p><br><h6 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h6><p>关注公众号:【小白 debug】</p><br><p>不满足于在留言区说骚话？</p><p>加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。就<strong>超！开！心！</strong></p><img src="https://cdn.xiaobaidebug.top/image-20220522162616202.png" width="50%" align="center"><figure><img src="https://cdn.xiaobaidebug.top/image/006APoFYly1g5q9gn2jipg308w08wqdi.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>`,154)),s("ul",null,[s("li",null,[s("p",null,[s("a",d,[n[0]||(n[0]=e("golang进阶面试题八股文合集")),o(a)])])]),s("li",null,[s("p",null,[s("a",u,[n[1]||(n[1]=e("golang基础面试题八股文合集")),o(a)])])]),s("li",null,[s("p",null,[s("a",k,[n[2]||(n[2]=e("golang常用标准库第三方库大全")),o(a)])])]),s("li",null,[s("p",null,[s("a",g,[n[3]||(n[3]=e("golang学习路线")),o(a)])])])])])}const E=p(i,[["render",m],["__file","Mysql数据库查询好慢，除了索引，还能因为什么？.html.vue"]]),y=JSON.parse('{"path":"/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E5%A5%BD%E6%85%A2%EF%BC%8C%E9%99%A4%E4%BA%86%E7%B4%A2%E5%BC%95%EF%BC%8C%E8%BF%98%E8%83%BD%E5%9B%A0%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F.html","title":"mysql 数据库查询好慢，除了索引，还能因为什么？","lang":"zh-CN","frontmatter":{"description":"mysql 数据库查询好慢，除了索引，还能因为什么？ 我熟练应用 ctrl c 和 ctrl v 开发 curd 代码好多年了。 mysql 查询为什么会慢，关于这个问题，在实际开发经常会遇到，而面试中，也是个高频题。 遇到这种问题，我们一般也会想到是因为索引。 那除开索引之外，还有哪些因素会导致数据库查询变慢呢？ 有哪些操作，可以提升 mysql 的...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E5%A5%BD%E6%85%A2%EF%BC%8C%E9%99%A4%E4%BA%86%E7%B4%A2%E5%BC%95%EF%BC%8C%E8%BF%98%E8%83%BD%E5%9B%A0%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"mysql 数据库查询好慢，除了索引，还能因为什么？"}],["meta",{"property":"og:description","content":"mysql 数据库查询好慢，除了索引，还能因为什么？ 我熟练应用 ctrl c 和 ctrl v 开发 curd 代码好多年了。 mysql 查询为什么会慢，关于这个问题，在实际开发经常会遇到，而面试中，也是个高频题。 遇到这种问题，我们一般也会想到是因为索引。 那除开索引之外，还有哪些因素会导致数据库查询变慢呢？ 有哪些操作，可以提升 mysql 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/Mysql%E6%9E%B6%E6%9E%8456.drawio.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T01:53:36.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"mysql 数据库查询好慢，除了索引，还能因为什么？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-07-16T01:53:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql 数据库查询好慢，除了索引，还能因为什么？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/Mysql%E6%9E%B6%E6%9E%8456.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/bufferPool%E4%B8%8E%E7%A3%81%E7%9B%982.png\\",\\"https://cdn.xiaobaidebug.top/image/%E7%B4%A2%E5%BC%95%E9%A1%B5%E4%B8%8E%E7%A3%81%E7%9B%98%E9%A1%B5%E7%9A%84%E5%85%B3%E7%B3%BB.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20220319080215281.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20220319093631814.png\\",\\"https://cdn.xiaobaidebug.top/image/%E7%B4%A2%E5%BC%95%E5%89%8D%E7%BC%80%E5%8C%BA%E5%88%86%E5%BA%A6%E5%A4%AA%E4%BD%8E.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/%E8%BF%9E%E6%8E%A5%E8%BF%87%E5%B0%91%E4%BC%9A%E5%AF%BC%E8%87%B4sql%E9%98%BB%E5%A1%9E.png\\",\\"https://cdn.xiaobaidebug.top/image/%E5%A2%9E%E5%8A%A0%E8%BF%9E%E6%8E%A5%E5%8F%AF%E4%BB%A5%E5%8A%A0%E5%BF%AB%E6%89%A7%E8%A1%8Csql.png\\",\\"https://cdn.xiaobaidebug.top/image/connection_pool.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20220319113917654.png\\",\\"https://cdn.xiaobaidebug.top/image/%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E8%A2%AB%E5%88%A0%E9%99%A4.png\\",\\"https://cdn.xiaobaidebug.top/image/u=2281575747,3550568508&fm=253&fmt=auto&app=120&f=JPEG.jpeg\\",\\"https://cdn.xiaobaidebug.top/image/006APoFYly1g5q9gn2jipg308w08wqdi.gif\\"],\\"dateModified\\":\\"2024-07-16T01:53:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E5%A5%BD%E6%85%A2%EF%BC%8C%E9%99%A4%E4%BA%86%E7%B4%A2%E5%BC%95%EF%BC%8C%E8%BF%98%E8%83%BD%E5%9B%A0%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E5%A5%BD%E6%85%A2%EF%BC%8C%E9%99%A4%E4%BA%86%E7%B4%A2%E5%BC%95%EF%BC%8C%E8%BF%98%E8%83%BD%E5%9B%A0%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"mysql 数据库查询好慢，除了索引，还能因为什么？"}],["meta",{"property":"og:description","content":"mysql 数据库查询好慢，除了索引，还能因为什么？ 我熟练应用 ctrl c 和 ctrl v 开发 curd 代码好多年了。 mysql 查询为什么会慢，关于这个问题，在实际开发经常会遇到，而面试中，也是个高频题。 遇到这种问题，我们一般也会想到是因为索引。 那除开索引之外，还有哪些因素会导致数据库查询变慢呢？ 有哪些操作，可以提升 mysql 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T01:53:36.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T01:53:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql 数据库查询好慢，除了索引，还能因为什么？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-16T01:53:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"数据库查询流程","slug":"数据库查询流程","link":"#数据库查询流程","children":[]},{"level":3,"title":"慢查询分析","slug":"慢查询分析","link":"#慢查询分析","children":[]},{"level":3,"title":"索引相关原因","slug":"索引相关原因","link":"#索引相关原因","children":[]},{"level":3,"title":"连接数过小","slug":"连接数过小","link":"#连接数过小","children":[]},{"level":3,"title":"buffer pool 太小","slug":"buffer-pool-太小","link":"#buffer-pool-太小","children":[]},{"level":3,"title":"还有哪些骚操作？","slug":"还有哪些骚操作","link":"#还有哪些骚操作","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1721094816000,"contributors":[{"name":"xiaobai-tech","email":"948485496@qq.com","commits":3},{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":2}]},"readingTime":{"minutes":15.39,"words":4618},"filePathRelative":"中间件/mysql/核心知识点/Mysql数据库查询好慢，除了索引，还能因为什么？.md","localizedDate":"2024年2月19日","autoDesc":true}');export{E as comp,y as data};
