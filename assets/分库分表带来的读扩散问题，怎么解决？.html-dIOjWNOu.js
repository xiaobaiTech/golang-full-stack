import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as r,c as s,a as t,b as e,d as o,e as p}from"./app-BsGbjd6a.js";const g={},d=p(`<h1 id="啥-分库分表会带来读扩散问题-怎么解决" tabindex="-1"><a class="header-anchor" href="#啥-分库分表会带来读扩散问题-怎么解决"><span>啥？分库分表会带来读扩散问题？怎么解决？？？</span></a></h1><br><p>今天这篇文章，其实也是我曾经面试中遇到过的真题。</p><p><strong>分库分表</strong>大家可能听得多了，但<strong>读扩散</strong>问题大家了解吗？</p><p>这里涉及到几个问题。</p><p>分库分表是什么？</p><p>读扩散问题是什么？</p><p>分库分表为什么会引发读扩散问题？</p><p>怎么解决读扩散问题？</p><p>能不能不要在评论区叫我刁毛？</p><br><figure><img src="https://cdn.xiaobaidebug.top/9a9f7046fbb668643c3466b50354a569.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不好意思，失态了。</p><br><p>这些问题还是比较有意思的。</p><p>相信兄弟们也一定有机会遇到哈哈哈。</p><p>我们先从分库分表的话题聊起吧。</p><br><h2 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表"><span>分库分表</span></a></h2><p>我们平时做项目开发。一开始，通常都先用一张数据表，而一般来说数据表写到2kw条数据之后，底层B+树的层级结构就可能会变高，不同层级的数据页一般都放在磁盘里不同的地方，换言之，磁盘IO就会增多，带来的便是查询性能变差。<strong>如果对上面这句话有疑惑的话，可以去看下我之前写的文章。</strong></p><p>于是，当我们单表需要管理的数据变得越来越多，就不得不考虑数据库<strong>分表</strong>。而这里的分表，分为<strong>水平分表和垂直分表</strong>。</p><p><strong>垂直分表</strong>的原理比较简单，一般就是把某几列拆成一个新表，这样单行数据就会变小，B+树里的单个数据页（固定16kb）内能放入的行数就会变多，从而使单表能放入更多的数据。</p><p>垂直分表没有太多可以说的点。下面，我们重点说说最常见的<strong>水平分表</strong>。</p><p>水平分表有好几种做法，但不管是哪种，本质上都是将原来的 <code>user</code> 表，变成 <code>user_0, user1, user2 .... uerN</code>这样的N多张小表。</p><p>从读写一张user<strong>大表</strong>，变成读写 user_1 ... userN 这样的N张<strong>小表</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/分表3.png" alt="分表" tabindex="0" loading="lazy"><figcaption>分表</figcaption></figure><p>每一张小表里，只保存一部分数据，但具体保存多少，这个自己定，一般就订个<strong>500w~2kw</strong>。</p><p><strong>那分表具体怎么做？</strong></p><br><h3 id="根据id范围分表" tabindex="-1"><a class="header-anchor" href="#根据id范围分表"><span>根据id范围分表</span></a></h3><p>我认为最好用的，是根据id范围进行分表。</p><p>我们假设每张分表能放<code>2kw</code>行数据。那user0就放主键id为<code>1~2kw</code>的数据。user1就放id为<code>2kw+1 ~ 4kw</code>，user2就放id为<code>4kw+1 ~ 6kw</code>， userN就放 <code>2N kw+1 ~ 2(N+1)kw</code>。</p><figure><img src="https://cdn.xiaobaidebug.top/根据id范围分表.png" alt="根据id范围分表" tabindex="0" loading="lazy"><figcaption>根据id范围分表</figcaption></figure><p>假设现在有条数据，id=3kw，将这个<code>3kw除2kw = 1.5</code>，向下取整得到<code>1</code>，那就可以得到这条数据属于<code>user1表</code>。于是去读写user1表就行了。这就完成了数据的路由逻辑，我们把这部分逻辑封装起来，放在数据库和业务代码之间。</p><p>这样。<strong>对于业务代码来说</strong>，它只知道自己在读写一张 user 表，根本不知道底下还分了那么多张小表。</p><p><strong>对于数据库来说</strong>，它并不知道自己被分表了，它只知道有那么几张表，正好名字长得比较像而已。</p><p>这还只是在<strong>一个数据库</strong>里做分表，如果范围再搞大点，还能在<strong>多个数据库</strong>里做分表，这就是所谓的<strong>分库分表</strong>。</p><p>不管是单库分表还是分库分表，都可以通过这样一个中间层逻辑做路由。</p><p>还真的就应了那句话，没有什么是加中间层不能解决的。</p><p>如果有，就多加一层。</p><p>至于这个中间层的实现方式就更灵活了，它既可以像<strong>第三方orm库</strong>那样加在业务代码中。</p><figure><img src="https://cdn.xiaobaidebug.top/通过orm读写分表.drawio.png" alt="通过orm读写分表" tabindex="0" loading="lazy"><figcaption>通过orm读写分表</figcaption></figure><p>也可以在mysql和业务代码之间加个<strong>proxy服务</strong>。</p><p>如果是通过第三方orm库的方式来做的话，那需要根据不同语言实现不同的代码库，所以不少厂都选择后者加个proxy的方式，这样就不需要关心上游服务用的是什么语言。</p><figure><img src="https://cdn.xiaobaidebug.top/通过proxy管理分表.drawio.png" alt="通过proxy管理分表" tabindex="0" loading="lazy"><figcaption>通过proxy管理分表</figcaption></figure><br><h3 id="根据id取模分表" tabindex="-1"><a class="header-anchor" href="#根据id取模分表"><span>根据id取模分表</span></a></h3><p>这时候就有兄弟要提出问题了，&quot;我看很多方案都<strong>对id取模</strong>，你这个方案是不是不完整？&quot;。</p><p>取模的方案也是很常见的。</p><p>比如一个id=31进来，我们一共分了5张表，分别是user0到user4。对<code>31%5=1</code>，取模得<code>1</code>，于是就能知道应该读写<code>user1</code>表。</p><figure><img src="https://cdn.xiaobaidebug.top/根据id取模分表.drawio.png" alt="根据id取模分表" tabindex="0" loading="lazy"><figcaption>根据id取模分表</figcaption></figure><p><strong>优点</strong>当然是比较简单。而且读写数据都可以很均匀的分摊到每个分表上。</p><p>但<strong>缺点</strong>也比较明显，如果想要扩展表的个数，比如从5张表变成8张表。那同样还是id=31的数据，<code>31%8 = 7</code>，就需要读写user7这张表。跟原来就对不上了。</p><p>这就需要考虑<strong>数据迁移</strong>的问题。很头秃。</p><p>为了避免后续扩展的问题，我见过一些业务一开始就将数据预估得很大，然后心一横，分成100张表，一张表如果存个2kw条，那也能存20亿数据了。</p><p>也不是说这样不行吧，就是这个业务直到最后放弃的时候，也就存了百万条数据，每次打开数据库表能看到茫茫多的user_xx，就是不太舒服，专业点，叫增加了程序员的<strong>心智负担</strong>。</p><br><p>而上面一种方式，根据id范围去分表，就能很好的解决这些问题，数据少的时候，表也少，随着数据增多，表会慢慢变多。而且这样表还可以无限扩展。</p><p>那是不是说取模的做法就用不上了呢？</p><p>也不是。</p><br><h3 id="将上面两种方式结合起来" tabindex="-1"><a class="header-anchor" href="#将上面两种方式结合起来"><span>将上面两种方式结合起来</span></a></h3><p>id取模的做法，最大的好处是，新写入的数据都是实实在在的分散到了<strong>多张表</strong>上。</p><p>而根据id范围去做分表，因为id是递增的，那新写入的数据一般都会落到<strong>某一张表</strong>上，如果你的业务场景写数据特别频繁，那这张表就会出现<strong>写热点</strong>的问题。</p><p>这时候就可以将id取模和id范围分表的方式结合起来。</p><p>我们可以在某个id范围里，引入取模的功能。比如 以前 <code>2kw~4kw</code>是user1表，现在可以在这个范围<strong>再分成5个表</strong>，也就是引入user1-0, user1-2到user1-4，在这5个表里取模。</p><p>举个例子，id=3kw，根据范围，会分到user1表，然后再进行取模 3kw % 5 = 0，也就是读写user1-0表。</p><p>这样就可以将写单表分摊为写多表。</p><p>这在分库的场景下优势会更明显，不同的库，可以把服务部署到不同的机器上，这样各个机器的性能都能被用起来。</p><figure><img src="https://cdn.xiaobaidebug.top/根据id范围分表后再取模.drawio.png" alt="根据id范围分表后再取模" tabindex="0" loading="lazy"><figcaption>根据id范围分表后再取模</figcaption></figure><br><h2 id="读扩散问题" tabindex="-1"><a class="header-anchor" href="#读扩散问题"><span>读扩散问题</span></a></h2><p>我们上面提到的好几种分表方式，都用了id这一列作为<strong>分表的依据</strong>，这其实就是所谓的<strong>分片键</strong>。</p><p>实际上我们一般也是用的<strong>数据库主键</strong>作为<strong>分片键</strong>。</p><p>这样，理想情况下我们已知一个id，不管是根据哪种规则，我们都能很快定位到该读哪个分表。</p><p>但很多情况下，我们的查询又不是只查主键，如果我的数据库表有一列name，并且加了个普通索引。</p><p>这样我执行下面的sql</p><div class="language-SQL line-numbers-mode" data-ext="SQL" data-title="SQL"><pre class="language-SQL"><code>select * from user where name = &quot;小白&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于name并不是分片键，我们没法定位到具体要到哪个分表上去执行sql。</p><p>于是就会对<strong>所有分表</strong>都执行上面的sql，当然不会是串行执行sql，一般都是<strong>并发</strong>执行sql的。</p><p>如果我有100张表，就执行100次sql。</p><p>如果我有200张表，就执行200次sql。</p><p>随着我的表越来越多，次数会越来越多，这就是所谓的<strong>读扩散问题</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/读扩散问题.drawio.png" alt="读扩散问题" tabindex="0" loading="lazy"><figcaption>读扩散问题</figcaption></figure><p>这是个比较有趣的问题，它确实是个问题，但大部分的业务不会去处理它，读100次怎么了，数据增长之后读的次数会不断增加又怎么了？但架不住我的<strong>业务不赚钱</strong>啊，也根本<strong>长不了那么多数据</strong>啊。</p><br><p>话是这么说没错，但面试官问你的时候，你得知道怎么处理啊。</p><br><h3 id="引入新表来做分表" tabindex="-1"><a class="header-anchor" href="#引入新表来做分表"><span>引入新表来做分表</span></a></h3><p>问题的核心在于，主键是分片键，而普通索引列并不分片。</p><p>那好办，我们单独建个<strong>新的分片表</strong>，这个新表里的列就只有旧表的主键id和普通索引列，而这次换普通索引列来做分片键。</p><figure><img src="https://cdn.xiaobaidebug.top/通过新索引表解决读扩散问题.drawio.png" alt="通过新索引表解决读扩散问题" tabindex="0" loading="lazy"><figcaption>通过新索引表解决读扩散问题</figcaption></figure><p>这样当我们要查询普通索引列时，先到这个新的分片表里做一次查询，就能迅速定位到对应的主键id，然后再拿主键id去旧的分片表里查一次数据。这样就从原来漫无目的的全表扩散查询，缩减为只查固定几个表了。</p><p>举个例子。比如我的表原本长下面这样，其中id列是主键，同时也是分片键，name列是非主键索引。为了简化，假设三条数据一张表。</p><p>此时分表里 <code>id=1,4,6</code> 的都有<code>name=&quot;小白&quot;</code> 的数据。</p><p>当我们执行 <code>select * from user where name = &quot;小白&quot;;</code> 则需要并发查3张表，随着表变多，查询次数会变得更多。</p><figure><img src="https://cdn.xiaobaidebug.top/举例说明读扩散问题1.drawio.png" alt="举例说明读扩散问题" tabindex="0" loading="lazy"><figcaption>举例说明读扩散问题</figcaption></figure><p>但如果我们为name列<strong>建个新表(nameX)，以name为新的分片键</strong>。</p><p>这样我们可以先执行 <code>select id from nameX where name = &quot;小白&quot;;</code></p><p>再拿着结果里的ids去查询 <code>select * from user where id in (ids);</code> 这样就算表变多了，也可以迅速定位到某几张具体的表，减少了查询次数。</p><figure><img src="https://cdn.xiaobaidebug.top/举例说明通过新索引表解决读扩散问题.drawio.png" alt="举例说明通过新索引表解决读扩散问题" tabindex="0" loading="lazy"><figcaption>举例说明通过新索引表解决读扩散问题</figcaption></figure><p>但这个做法的缺点也比较明显，你需要维护两套表，并且普通索引列更新时，要两张表同时进行更改。</p><p>有一定的开发量</p><p>有没有更简单的方案？</p><br><h3 id="使用其他更合适的存储" tabindex="-1"><a class="header-anchor" href="#使用其他更合适的存储"><span>使用其他更合适的存储</span></a></h3><p>我们常规的查询是通过id主键去查询对应的name列。而像上面的方案，则通过引入一个新表，<strong>倒过来</strong>，先用name查到对应的id，再拿id去获取具体的数据。这其实就像是建立了一个新的索引一样，像这种，通过name列反查原数据的思想，其实就很类似于<strong>倒排索引</strong>。</p><p><strong>相当于我们是利用了倒排索引的思路去解决分表下的数据查询问题。</strong></p><p>回想下，其实我们的<strong>原始需求</strong>无非就是在大量数据的场景下依然能提供普通索引列或其他更多维度的查询。</p><p>这种场合，更适合使用es，es天然分片，而且内部利用<strong>倒排索引</strong>的形式来加速数据查询。</p><p>哦？兄弟萌，又是它，<strong>倒排索引</strong>，又是个极小的细节，做好笔记。</p><figure><img src="https://cdn.xiaobaidebug.top/006APoFYly8gqiccw4k14g308c05qq3b.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>举个例子，我同样是一行数据 id,name,age。在mysql里，你得根据id分片，如果要支持name和age的查询，为了防止读扩散，你得分别再建一个name的分片表和一个age的分片表。</p><p>而如果你用es，它会在它内部以id分片键进行分片，同时还能建一个name到id，和一个age到id的倒排索引。这是不是就跟上面做的事情没啥区别。</p><p>而且将mysql接入es也非常简单，我们可以通过开源工具 <code>canal</code> 监听mysql的<code>binlog</code>日志变更，再将数据解析后写入es，这样es就能提供<strong>近实时</strong>的查询能力。</p><figure><img src="https://cdn.xiaobaidebug.top/mysql同步es.drawio.png" alt="mysql同步es" tabindex="0" loading="lazy"><figcaption>mysql同步es</figcaption></figure><p>觉得es+mysql还是繁琐？有没有其他更简洁的方案？</p><p>有。</p><p>别用mysql了，改用<strong>tidb</strong>吧，相信大家多少也听说过这个名称，这是个<strong>分布式数据库</strong>。</p><p>它通过引入<strong>Range</strong>的概念进行数据表分片，比如第一个分片表的id在0<sub>2kw，第二个分片表的id在2kw</sub>4kw。</p><p>哦？有没有很熟悉，这不就是文章开头提到的根据id范围进行数据库分表吗？</p><p>它支持普通索引，并且普通索引也是分片的，这是不是又跟上面提到的倒排索引方案很类似。</p><p>又是个极小的细节。</p><figure><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F13563824367%2F1000&amp;refer=http%3A%2F%2Finews.gtimg.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1655796068&amp;t=e1cb280210d4e1526024b6c757e0b747" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>并且tidb跟mysql的语法几乎一致，现在也有非常多现成的工具可以帮你把数据从mysql迁移到tidb。所以开发成本并不高。</p><figure><img src="https://cdn.xiaobaidebug.top/用tidb替换mysql.drawio.png" alt="用tidb替换mysql" tabindex="0" loading="lazy"><figcaption>用tidb替换mysql</figcaption></figure><br><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li><p>mysql在单表数据过大时，查询性能会变差，因此当数据量变得巨大时，需要考虑水平分表。</p></li><li><p>水平分表需要选定一个分片键，一般选择主键，然后根据id进行取模，或者根据id的范围进行分表。</p></li><li><p>mysql水平分表后，对于非分片键字段的查询会有读扩散的问题，可以用普通索引列作分片键建一个新表，先查新表拿到id后再回到原表再查一次原表。这本质上是借鉴了倒排索引的思路。</p></li><li><p>如果想要支持更多维度的查询，可以监听mysql的binlog，将数据写入到es，提供近实时的查询能力。</p></li><li><p>当然，用tidb替换mysql也是个思路。tidb属实是个好东西，不少厂都拿它换个皮贴个标，做成自己的<strong>自研数据库</strong>，非常推荐大家学习一波。</p></li><li><p>不要做过早的优化，没事别上来就分100个表，很多时候真用不上。</p></li></ul><br><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,131),c={href:"https://mp.weixin.qq.com/s/OI5y4HMTuEZR1hoz9aOMxg",target:"_blank",rel:"noopener noreferrer"},l=p('<br><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>当年我还在某个游戏项目组里做开发的时候，从企鹅那边挖来的策划信誓旦旦的说，我们要做的这款游戏老少皆宜，肯定是爆款。要做成全球同服。上线至少<strong>过亿注册</strong>，<strong>十万人同时在线</strong>。要好好规划和设计。</p><br><p>我们算了下，信他能有个1亿注册。用了id范围的方式进行分片，分了<strong>4张表</strong>。</p><p>搞得我热血沸腾。</p><p>那天晚上下班，夏蝉鸣泣，从赤道吹来的热风阵阵拂过我的手臂，我听着泽野弘之的歌，就算是开电瓶车，我都感觉自己像是在开高达。</p><br><p>一年后。</p><p>游戏上线前一天通知运维加机器，怕顶不住，要整夜关注。</p><p>后来上线了，全球最高在线人数<code>58</code>人。其中有<code>7</code>个是项目组成员。</p><br><p>还是夏天，还是同样的下班路，想哭，但我不能哭，因为骑电瓶车的时候擦眼泪不安全。</p><br><hr><p>最近原创更文的阅读量稳步下跌，思前想后，夜里辗转反侧。</p><p>我有个不成熟的请求。</p><img src="https://cdn.xiaobaidebug.top/image-20220522162506224.png" alt="" style="zoom:20%;"><br><p><strong>离开广东好长时间了，好久没人叫我靓仔了。</strong></p><p>大家可以在<strong>评论区</strong>里，叫我一靓仔吗？</p><p>我这么善良质朴的愿望，能被满足吗？</p><p>如果实在叫不出口的话，能帮我点下右下角的<strong>点赞和在看</strong>吗？</p><br><h5 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h5><p><strong>点击</strong>下方名片，关注公众号:【小白debug】<br><img src="https://cdn.xiaobaidebug.top/扫码_搜索联合传播样式-标准色版.png" alt="" loading="lazy"></p><br><p>不满足于在留言区说骚话？</p><p>加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。就<strong>超！开！心！</strong></p><img src="https://cdn.xiaobaidebug.top/image-20220522162616202.png" alt="" style="zoom:50%;"><figure><img src="https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>',32),E={href:"https://mp.weixin.qq.com/s/PP80aD-GQp7VtgyfHj392g",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/0-YBxU1cSbDdzcZEZjmQYA",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s/YpQGsRyyrGNDu1cOuMy83w",target:"_blank",rel:"noopener noreferrer"};function h(u,A){const i=n("ExternalLinkIcon");return r(),s("div",null,[d,t("p",null,[e("《图解分库分表》 "),t("a",c,[e("https://mp.weixin.qq.com/s/OI5y4HMTuEZR1hoz9aOMxg"),o(i)])]),l,t("ul",null,[t("li",null,[t("a",E,[e("程序员防猝死指南"),o(i)])]),t("li",null,[t("a",m,[e("TCP粘包 数据包：我只是犯了每个数据包都会犯的错 |硬核图解"),o(i)])]),t("li",null,[t("a",b,[e("动图图解！既然IP层会分片，为什么TCP层也还要分段？"),o(i)])])])])}const x=a(g,[["render",h],["__file","分库分表带来的读扩散问题，怎么解决？.html.vue"]]),y=JSON.parse('{"path":"/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%AF%BB%E6%89%A9%E6%95%A3%E9%97%AE%E9%A2%98%EF%BC%8C%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F.html","title":"啥？分库分表会带来读扩散问题？怎么解决？？？","lang":"zh-CN","frontmatter":{"description":"啥？分库分表会带来读扩散问题？怎么解决？？？ 今天这篇文章，其实也是我曾经面试中遇到过的真题。 分库分表大家可能听得多了，但读扩散问题大家了解吗？ 这里涉及到几个问题。 分库分表是什么？ 读扩散问题是什么？ 分库分表为什么会引发读扩散问题？ 怎么解决读扩散问题？ 能不能不要在评论区叫我刁毛？ 不好意思，失态了。 这些问题还是比较有意思的。 相信兄弟们也...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%AF%BB%E6%89%A9%E6%95%A3%E9%97%AE%E9%A2%98%EF%BC%8C%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"啥？分库分表会带来读扩散问题？怎么解决？？？"}],["meta",{"property":"og:description","content":"啥？分库分表会带来读扩散问题？怎么解决？？？ 今天这篇文章，其实也是我曾经面试中遇到过的真题。 分库分表大家可能听得多了，但读扩散问题大家了解吗？ 这里涉及到几个问题。 分库分表是什么？ 读扩散问题是什么？ 分库分表为什么会引发读扩散问题？ 怎么解决读扩散问题？ 能不能不要在评论区叫我刁毛？ 不好意思，失态了。 这些问题还是比较有意思的。 相信兄弟们也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/9a9f7046fbb668643c3466b50354a569.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-19T03:57:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"啥？分库分表会带来读扩散问题？怎么解决？？？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-02-19T03:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"啥？分库分表会带来读扩散问题？怎么解决？？？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/9a9f7046fbb668643c3466b50354a569.gif\\",\\"https://cdn.xiaobaidebug.top/%E5%88%86%E8%A1%A83.png\\",\\"https://cdn.xiaobaidebug.top/%E6%A0%B9%E6%8D%AEid%E8%8C%83%E5%9B%B4%E5%88%86%E8%A1%A8.png\\",\\"https://cdn.xiaobaidebug.top/%E9%80%9A%E8%BF%87orm%E8%AF%BB%E5%86%99%E5%88%86%E8%A1%A8.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E9%80%9A%E8%BF%87proxy%E7%AE%A1%E7%90%86%E5%88%86%E8%A1%A8.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E6%A0%B9%E6%8D%AEid%E5%8F%96%E6%A8%A1%E5%88%86%E8%A1%A8.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E6%A0%B9%E6%8D%AEid%E8%8C%83%E5%9B%B4%E5%88%86%E8%A1%A8%E5%90%8E%E5%86%8D%E5%8F%96%E6%A8%A1.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E8%AF%BB%E6%89%A9%E6%95%A3%E9%97%AE%E9%A2%98.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E9%80%9A%E8%BF%87%E6%96%B0%E7%B4%A2%E5%BC%95%E8%A1%A8%E8%A7%A3%E5%86%B3%E8%AF%BB%E6%89%A9%E6%95%A3%E9%97%AE%E9%A2%98.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E%E8%AF%BB%E6%89%A9%E6%95%A3%E9%97%AE%E9%A2%981.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E%E9%80%9A%E8%BF%87%E6%96%B0%E7%B4%A2%E5%BC%95%E8%A1%A8%E8%A7%A3%E5%86%B3%E8%AF%BB%E6%89%A9%E6%95%A3%E9%97%AE%E9%A2%98.drawio.png\\",\\"https://cdn.xiaobaidebug.top/006APoFYly8gqiccw4k14g308c05qq3b.gif\\",\\"https://cdn.xiaobaidebug.top/mysql%E5%90%8C%E6%AD%A5es.drawio.png\\",\\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F13563824367%2F1000&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655796068&t=e1cb280210d4e1526024b6c757e0b747\\",\\"https://cdn.xiaobaidebug.top/%E7%94%A8tidb%E6%9B%BF%E6%8D%A2mysql.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E6%89%AB%E7%A0%81_%E6%90%9C%E7%B4%A2%E8%81%94%E5%90%88%E4%BC%A0%E6%92%AD%E6%A0%B7%E5%BC%8F-%E6%A0%87%E5%87%86%E8%89%B2%E7%89%88.png\\",\\"https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi.gif\\"],\\"dateModified\\":\\"2024-02-19T03:57:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%AF%BB%E6%89%A9%E6%95%A3%E9%97%AE%E9%A2%98%EF%BC%8C%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%AF%BB%E6%89%A9%E6%95%A3%E9%97%AE%E9%A2%98%EF%BC%8C%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"啥？分库分表会带来读扩散问题？怎么解决？？？"}],["meta",{"property":"og:description","content":"啥？分库分表会带来读扩散问题？怎么解决？？？ 今天这篇文章，其实也是我曾经面试中遇到过的真题。 分库分表大家可能听得多了，但读扩散问题大家了解吗？ 这里涉及到几个问题。 分库分表是什么？ 读扩散问题是什么？ 分库分表为什么会引发读扩散问题？ 怎么解决读扩散问题？ 能不能不要在评论区叫我刁毛？ 不好意思，失态了。 这些问题还是比较有意思的。 相信兄弟们也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-19T03:57:35.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-19T03:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"啥？分库分表会带来读扩散问题？怎么解决？？？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-19T03:57:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"分库分表","slug":"分库分表","link":"#分库分表","children":[{"level":3,"title":"根据id范围分表","slug":"根据id范围分表","link":"#根据id范围分表","children":[]},{"level":3,"title":"根据id取模分表","slug":"根据id取模分表","link":"#根据id取模分表","children":[]},{"level":3,"title":"将上面两种方式结合起来","slug":"将上面两种方式结合起来","link":"#将上面两种方式结合起来","children":[]}]},{"level":2,"title":"读扩散问题","slug":"读扩散问题","link":"#读扩散问题","children":[{"level":3,"title":"引入新表来做分表","slug":"引入新表来做分表","link":"#引入新表来做分表","children":[]},{"level":3,"title":"使用其他更合适的存储","slug":"使用其他更合适的存储","link":"#使用其他更合适的存储","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1708315055000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1}]},"readingTime":{"minutes":14.82,"words":4446},"filePathRelative":"中间件/mysql/核心知识点/分库分表带来的读扩散问题，怎么解决？.md","localizedDate":"2024年2月19日","autoDesc":true}');export{x as comp,y as data};
