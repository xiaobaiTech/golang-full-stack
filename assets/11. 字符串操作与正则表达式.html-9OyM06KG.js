import{_ as a,c as e,a as s,o as t}from"./app-YFeEz-zg.js";const o={};function p(l,n){return t(),e("div",null,n[0]||(n[0]=[s(`<h1 id="_11-字符串操作与正则表达式" tabindex="-1"><a class="header-anchor" href="#_11-字符串操作与正则表达式"><span>11. 字符串操作与正则表达式</span></a></h1><p>在这一节里，我们要探讨一下在 Python 中如何处理文字，也就是字符串（String）操作以及使用正则表达式（Regular Expression）。</p><h2 id="从头说起-什么是字符串" tabindex="-1"><a class="header-anchor" href="#从头说起-什么是字符串"><span>从头说起：什么是字符串？</span></a></h2><p>在编程中，我们经常需要处理文本信息，比如存储用户的名字、打印一段话等等。这些文本信息实际上是由字符组成的，而 Python 中用一对单引号或双引号括起来的内容就是一个字符串。</p><p>举个例子：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span>
message <span class="token operator">=</span> <span class="token string">&#39;Hello, how are you?&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>name</code> 和 <code>message</code> 就是字符串变量，分别存储了名字和问候语。</p><h2 id="字符串的基本操作" tabindex="-1"><a class="header-anchor" href="#字符串的基本操作"><span>字符串的基本操作</span></a></h2><h3 id="_1-字符串拼接" tabindex="-1"><a class="header-anchor" href="#_1-字符串拼接"><span>1. 字符串拼接</span></a></h3><p>我们可以使用 <code>+</code> 来将两个字符串连接起来：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>greeting <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span>
name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span>
message <span class="token operator">=</span> greeting <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，<code>message</code> 就会变成 <code>&quot;Hello, Alice&quot;</code>。</p><h3 id="_2-字符串长度" tabindex="-1"><a class="header-anchor" href="#_2-字符串长度"><span>2. 字符串长度</span></a></h3><p>你可以用 <code>len()</code> 函数来获取字符串的长度：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>message <span class="token operator">=</span> <span class="token string">&quot;Hello, how are you?&quot;</span>
length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 <code>length</code> 就会得到 <code>18</code>，因为这句话有 18 个字符。</p><h3 id="_3-字符串索引" tabindex="-1"><a class="header-anchor" href="#_3-字符串索引"><span>3. 字符串索引</span></a></h3><p>每个字符都有一个索引，表示它在字符串中的位置。注意，Python 中索引是从 0 开始的。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>message <span class="token operator">=</span> <span class="token string">&quot;Hello, how are you?&quot;</span>
first_char <span class="token operator">=</span> message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 获取第一个字符，结果是 &#39;H&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-子字符串" tabindex="-1"><a class="header-anchor" href="#_4-子字符串"><span>4. 子字符串</span></a></h3><p>你可以使用切片来获取字符串的一部分：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>message <span class="token operator">=</span> <span class="token string">&quot;Hello, how are you?&quot;</span>
substring <span class="token operator">=</span> message<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>  <span class="token comment"># 获取从第7个到第9个字符，结果是 &#39;how&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-替换子串" tabindex="-1"><a class="header-anchor" href="#_5-替换子串"><span>5. 替换子串</span></a></h3><p>如果你想把字符串中的某一部分替换成其他内容，可以使用 <code>replace()</code> 方法：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>message <span class="token operator">=</span> <span class="token string">&quot;Hello, how are you?&quot;</span>
new_message <span class="token operator">=</span> message<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，<code>new_message</code> 就会成为 <code>&quot;Hi, how are you?&quot;</code>。</p><h3 id="_6-分割与连接" tabindex="-1"><a class="header-anchor" href="#_6-分割与连接"><span>6. 分割与连接</span></a></h3><p>你可以使用 <code>split()</code> 方法将一个字符串拆分成多个部分：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>sentence <span class="token operator">=</span> <span class="token string">&quot;Hello, how are you?&quot;</span>
words <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 用逗号和空格分割字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>words</code> 就会成为一个列表 <code>[&quot;Hello&quot;, &quot;how are you?&quot;]</code>。</p><p>相反，你也可以使用 <code>join()</code> 方法将多个字符串连接成一个：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;how are you?&quot;</span><span class="token punctuation">]</span>
sentence <span class="token operator">=</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span>  <span class="token comment"># 用逗号和空格连接字符串列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sentence</code> 就会成为 <code>&quot;Hello, how are you?&quot;</code>。</p><h2 id="正则表达式-强大的模式匹配工具" tabindex="-1"><a class="header-anchor" href="#正则表达式-强大的模式匹配工具"><span>正则表达式：强大的模式匹配工具</span></a></h2><p>正则表达式是一种强大的模式匹配工具，可以用来寻找、匹配和替换文本中的特定模式。</p><h3 id="常用正则表达式元字符" tabindex="-1"><a class="header-anchor" href="#常用正则表达式元字符"><span>常用正则表达式元字符</span></a></h3><p>以下是一些常用的正则表达式元字符及其含义：</p><ul><li><code>*</code>：匹配前一个字符（或表达式）0 次或多次。</li><li><code>.</code>：匹配任意单个字符，除了换行符 <code>\\n</code>。</li><li><code>?</code>：匹配前一个字符（或表达式）0 次或 1 次，即可选。</li><li><code>\\d</code>：匹配任意一个数字（0-9）。</li><li><code>\\w</code>：匹配字母、数字、下划线，等同于 <code>[a-zA-Z0-9_]</code>。</li><li><code>^</code>：以某字符开头。</li><li><code>$</code>：以某字符结尾。</li><li><code>[]</code>：表示一个字符集合，匹配其中任意一个字符。</li><li><code>|</code>：或，匹配两者中的任意一个。</li><li><code>()</code>：用于分组表达式。</li><li><code>{}</code>：大括号用来指定一个模式的重复次数。具体来说： <ul><li><code>{n}</code> 表示前面的模式恰好重复 n 次。比如：<code>a{3}</code> 匹配连续出现 3 次的字母 &quot;a&quot;，例如 &quot;aaa&quot;。</li><li><code>{n,}</code> 表示前面的模式至少重复 n 次，可以是更多。比如：<code>[A-Za-z]{5,}</code> 匹配包含至少 5 个连续字母的字符串。</li><li><code>{n,m}</code> 表示前面的模式重复次数介于 n 到 m 之间（包括 n 和 m）。比如：<code>\\d{2,4}</code> 匹配包含 2 到 4 个连续数字的字符串，例如 &quot;123&quot; 或 &quot;4567&quot;。</li></ul></li></ul><h3 id="示例-匹配中国三大运营商的手机号码" tabindex="-1"><a class="header-anchor" href="#示例-匹配中国三大运营商的手机号码"><span>示例：匹配中国三大运营商的手机号码</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> <span class="token string">r&quot;(^1(3[4-9]|4[7]|5[0-27-9]|8[2-478]|9[8-9])\\d{8}$)&quot;</span>
phone_numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;13912345678&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;18888888888&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;13345678901&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;17777777777&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;16666666666&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> number <span class="token keyword">in</span> phone_numbers<span class="token punctuation">:</span>
    <span class="token keyword">if</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span><span class="token string"> 是有效的手机号码&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span><span class="token string"> 不是有效的手机号码&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，我们使用了正则表达式 <code>(^1(3[4-9]|4[7]|5[0-27-9]|8[2-478]|9[8-9])\\d{8}$)</code> 来匹配中国三大运营商的手机号码。</p><ul><li><code>^1</code>：表示手机号码开头为数字 1。</li><li><code>(3[4-9]|4[7]|5[0-27-9]|8[2-478]|9[8-9])</code>：匹配第二位数字，涵盖了所有符合条件的开头数字。</li><li><code>\\d{8}</code>：匹配后面的 8 个数字。</li><li><code>$</code>：表示手机号码的结束。</li></ul><p>这个正则表达式可以有效匹配以数字 1 开头，符合中国三大运营商规定的手机号码格式。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>通过这篇文章，我们学习了字符串的常用操作方法以及如何利用正则表达式进行模式匹配。我们还编写了一个匹配中国三大运营商手机号码的实例，巩固了所学知识。</p><p>希望你现在对字符串操作和正则表达式有了更清晰的理解。继续加油，你已经迈出了成为 Python 大师的重要一步！</p><h2 id="实战-提取电子邮件地址" tabindex="-1"><a class="header-anchor" href="#实战-提取电子邮件地址"><span>实战：提取电子邮件地址</span></a></h2><p>让我们通过一个实战来巩固所学知识。假设我们有一个文本，里面包含了一些电子邮件地址，我们想要将它们提取出来。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re

text <span class="token operator">=</span> <span class="token string">&quot;Contact us at support@example.com or info@mywebsite.com for assistance.&quot;</span>

<span class="token comment"># 定义匹配电子邮件的正则表达式</span>
pattern <span class="token operator">=</span> <span class="token string">r&#39;\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b&#39;</span>

emails <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> text<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>emails<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中，我们使用了正则表达式 <code>pattern</code> 来匹配电子邮件地址，然后用 <code>re.findall()</code> 方法找到了所有匹配的结果。运行这段代码，你将会得到一个包含了所有匹配的电子邮件地址的列表。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>通过这篇文章，我们学习了如何在 Python 中进行字符串操作，包括拼接、获取长度、索引、切片、替换、分割与连接等方法。此外，我们还了解了正则表达式的基本概念，并通过实战演示了如何使用正则表达式来提取电子邮件地址。</p><p>希望你现在对字符串操作和正则表达式有了更清晰的认识。继续加油，你已经迈出了成为 Python 大师的一大步！</p>`,53)]))}const c=a(o,[["render",p],["__file","11. 字符串操作与正则表达式.html.vue"]]),r=JSON.parse('{"path":"/script/python/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"11. 字符串操作与正则表达式","lang":"zh-CN","frontmatter":{"description":"11. 字符串操作与正则表达式 在这一节里，我们要探讨一下在 Python 中如何处理文字，也就是字符串（String）操作以及使用正则表达式（Regular Expression）。 从头说起：什么是字符串？ 在编程中，我们经常需要处理文本信息，比如存储用户的名字、打印一段话等等。这些文本信息实际上是由字符组成的，而 Python 中用一对单引号或双...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/script/python/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"11. 字符串操作与正则表达式"}],["meta",{"property":"og:description","content":"11. 字符串操作与正则表达式 在这一节里，我们要探讨一下在 Python 中如何处理文字，也就是字符串（String）操作以及使用正则表达式（Regular Expression）。 从头说起：什么是字符串？ 在编程中，我们经常需要处理文本信息，比如存储用户的名字、打印一段话等等。这些文本信息实际上是由字符组成的，而 Python 中用一对单引号或双..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-17T02:00:57.000Z"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-05-17T02:00:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11. 字符串操作与正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-17T02:00:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/script/python/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/script/python/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/11.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"11. 字符串操作与正则表达式"}],["meta",{"property":"og:description","content":"11. 字符串操作与正则表达式 在这一节里，我们要探讨一下在 Python 中如何处理文字，也就是字符串（String）操作以及使用正则表达式（Regular Expression）。 从头说起：什么是字符串？ 在编程中，我们经常需要处理文本信息，比如存储用户的名字、打印一段话等等。这些文本信息实际上是由字符组成的，而 Python 中用一对单引号或双..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-17T02:00:57.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-17T02:00:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11. 字符串操作与正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-17T02:00:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"从头说起：什么是字符串？","slug":"从头说起-什么是字符串","link":"#从头说起-什么是字符串","children":[]},{"level":2,"title":"字符串的基本操作","slug":"字符串的基本操作","link":"#字符串的基本操作","children":[{"level":3,"title":"1. 字符串拼接","slug":"_1-字符串拼接","link":"#_1-字符串拼接","children":[]},{"level":3,"title":"2. 字符串长度","slug":"_2-字符串长度","link":"#_2-字符串长度","children":[]},{"level":3,"title":"3. 字符串索引","slug":"_3-字符串索引","link":"#_3-字符串索引","children":[]},{"level":3,"title":"4. 子字符串","slug":"_4-子字符串","link":"#_4-子字符串","children":[]},{"level":3,"title":"5. 替换子串","slug":"_5-替换子串","link":"#_5-替换子串","children":[]},{"level":3,"title":"6. 分割与连接","slug":"_6-分割与连接","link":"#_6-分割与连接","children":[]}]},{"level":2,"title":"正则表达式：强大的模式匹配工具","slug":"正则表达式-强大的模式匹配工具","link":"#正则表达式-强大的模式匹配工具","children":[{"level":3,"title":"常用正则表达式元字符","slug":"常用正则表达式元字符","link":"#常用正则表达式元字符","children":[]},{"level":3,"title":"示例：匹配中国三大运营商的手机号码","slug":"示例-匹配中国三大运营商的手机号码","link":"#示例-匹配中国三大运营商的手机号码","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"实战：提取电子邮件地址","slug":"实战-提取电子邮件地址","link":"#实战-提取电子邮件地址","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1715911257000,"updatedTime":1715911257000,"contributors":[{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":5.19,"words":1557},"filePathRelative":"script/python/第1章：Python 基础知识/11. 字符串操作与正则表达式.md","localizedDate":"2024年5月17日","autoDesc":true}');export{c as comp,r as data};
