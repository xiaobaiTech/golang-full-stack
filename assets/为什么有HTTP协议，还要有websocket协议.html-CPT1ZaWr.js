import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as g,o as s,c as p,a as t,b as e,d as i,e as a}from"./app-CVBBBkvE.js";const r={},c={href:"https://github.com/xiaobaiTech/golangFamily",target:"_blank",rel:"noopener noreferrer"},d=t("br",null,null,-1),l=t("p",null,[e("平时我们打开网页，比如购物网站某宝。都是点一下"),t("strong",null,"列表商品"),e("，跳转一下网页就到了"),t("strong",null,"商品详情"),e("。")],-1),E={href:"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A1%AC%E6%A0%B8%EF%BC%81%E6%BC%AB%E7%94%BB%E5%9B%BE%E8%A7%A3HTTP%E7%9F%A5%E8%AF%86%E7%82%B9_%E9%9D%A2%E8%AF%95%E9%A2%98.html",target:"_blank",rel:"noopener noreferrer"},b=t("strong",null,"前端发一次 HTTP 请求，网站返回一次 HTTP 响应",-1),B=a(`<p>这种由客户端主动请求，服务器响应的方式也满足大部分网页的功能场景。</p><p>但有没有发现，这种情况下，服务器从来就不会<strong>主动</strong>给客户端发一次消息。</p><p>就像你喜欢的女生从来不会主动找你一样。</p><br><p>但如果现在，你在刷网页的时候<strong>右下角</strong>突然弹出一个<strong>小广告</strong>，提示你【<strong>一个人在家偷偷才能玩哦</strong>】。</p><p><strong>求知，好学，勤奋</strong>，这些刻在你 DNA 里的东西都动起来了。</p><p>你点开后发现。</p><p>长相平平无奇的古某提示你&quot;道士 9 条狗，全服横着走&quot;。</p><p>影帝某辉老师跟你说&quot;系兄弟就来砍我&quot;。</p><figure><img src="https://cdn.xiaobaidebug.top/image-20220827161615614.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>来都来了，你就选了个角色进到了游戏界面里。</p><figure><img src="https://cdn.xiaobaidebug.top/创建角色页面.jpeg" alt="创建角色页面" tabindex="0" loading="lazy"><figcaption>创建角色页面</figcaption></figure><p>这时候，上来就是一个小怪，从远处走来，然后疯狂拿木棒子抽你。</p><p><strong>你全程没点任何一次鼠标</strong>。服务器就自动将怪物的移动数据和攻击数据源源不断发给你了。</p><p>这....太暖心了。</p><p>感动之余，问题就来了，</p><p>像这种<strong>看起来服务器主动发消息给客户端的场景</strong>，是怎么做到的？</p><p>在真正回答这个问题之前，我们先来聊下一些相关的知识背景。</p><br><h2 id="使用-http-不断轮询" tabindex="-1"><a class="header-anchor" href="#使用-http-不断轮询"><span>使用 HTTP 不断轮询</span></a></h2><p>其实问题的痛点在于，<strong>怎么样才能在用户不做任何操作的情况下，网页能收到消息并发生变更。</strong></p><p>最常见的解决方案是，<strong>网页的前端代码里不断定时发 HTTP 请求到服务器，服务器收到请求后给客户端响应消息。</strong></p><p>这其实时一种<strong>伪</strong>服务器推的形式。</p><p>它其实并不是服务器主动发消息到客户端，而是客户端自己不断偷偷请求服务器，只是用户无感知而已。</p><p>用这种方式的场景也有很多，最常见的就是<strong>扫码登录</strong>。</p><p>比如某信公众号平台，登录页面二维码出现之后，<strong>前端</strong>网页根本不知道用户扫没扫，于是不断去向<strong>后端</strong>服务器询问，看有没有人扫过这个码。而且是以大概 1 到 2 秒的间隔去不断发出请求，这样可以保证用户在扫码后能在 1 到 2s 内得到及时的反馈，不至于<strong>等太久</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/使用HTTP定时轮询3.drawio.png" alt="使用HTTP定时轮询" tabindex="0" loading="lazy"><figcaption>使用HTTP定时轮询</figcaption></figure><p>但这样，会有两个比较明显的问题</p><ul><li>当你打开 F12 页面时，你会发现满屏的 HTTP 请求。虽然很小，但这其实也消耗带宽，同时也会增加下游服务器的负担。</li><li>最坏情况下，用户在扫码后，需要等个 1~2s，正好才触发下一次 http 请求，然后才跳转页面，用户会感到<strong>明显的卡顿</strong>。</li></ul><p>使用起来的体验就是，二维码出现后，手机扫一扫，然后在手机上点个确认，这时候<strong>卡顿等个 1~2s</strong>，页面才跳转。</p><figure><img src="https://cdn.xiaobaidebug.top/image-20220824090204629.png" alt="不断轮询查看是否有扫码" tabindex="0" loading="lazy"><figcaption>不断轮询查看是否有扫码</figcaption></figure><p>那么问题又来了，<strong>有没有更好的解决方案？</strong></p><p>有，而且实现起来成本还非常低。</p><br><h2 id="长轮询" tabindex="-1"><a class="header-anchor" href="#长轮询"><span>长轮询</span></a></h2><p>我们知道，HTTP 请求发出后，一般会给服务器留一定的时间做响应，比如 3s，规定时间内没返回，就认为是超时。</p><p>如果我们的 HTTP 请求<strong>将超时设置的很大</strong>，比如 30s，<strong>在这 30s 内只要服务器收到了扫码请求，就立马返回给客户端网页。如果超时，那就立马发起下一次请求。</strong></p><p>这样就减少了 HTTP 请求的个数，并且由于大部分情况下，用户都会在某个 30s 的区间内做扫码操作，所以响应也是及时的。</p><figure><img src="https://cdn.xiaobaidebug.top/长轮询.drawio.png" alt="长轮询" tabindex="0" loading="lazy"><figcaption>长轮询</figcaption></figure><p>比如，某度云网盘就是这么干的。所以你会发现一扫码，手机上点个确认，电脑端网页就<strong>秒跳转</strong>，体验很好。</p><figure><img src="https://cdn.xiaobaidebug.top/image-20220824085627057.png" alt="长轮询的方式来替代" tabindex="0" loading="lazy"><figcaption>长轮询的方式来替代</figcaption></figure><p>真一举两得。</p><p>像这种发起一个请求，在较长时间内等待服务器响应的机制，就是所谓的<strong>长轮询机制</strong>。我们常用的消息队列 RocketMQ 中，消费者去取数据时，也用到了这种方式。</p><figure><img src="https://cdn.xiaobaidebug.top/RocketMQ的消费者通过长轮询获取数据.drawio.png" alt="RocketMQ的消费者通过长轮询获取数据" tabindex="0" loading="lazy"><figcaption>RocketMQ的消费者通过长轮询获取数据</figcaption></figure><p>像这种，在用户不感知的情况下，服务器将数据推送给浏览器的技术，就是所谓的<strong>服务器推送</strong>技术，它还有个毫不沾边的英文名，<strong>comet</strong>技术，大家听过就好。</p><br><p>上面提到的两种解决方案，本质上，其实还是客户端主动去取数据。</p><p>对于像扫码登录这样的<strong>简单场景</strong>还能用用。</p><p>但如果是网页游戏呢，游戏一般会有大量的数据需要从服务器主动推送到客户端。</p><p>这就得说下<strong>websocket</strong>了。</p><br><h2 id="websocket-是什么" tabindex="-1"><a class="header-anchor" href="#websocket-是什么"><span>websocket 是什么</span></a></h2><p>我们知道 TCP 连接的两端，<strong>同一时间里</strong>，<strong>双方</strong>都可以<strong>主动</strong>向对方发送数据。这就是所谓的<strong>全双工</strong>。</p><p>而现在使用最广泛的<code>HTTP1.1</code>，也是基于 TCP 协议的，<strong>同一时间里</strong>，客户端和服务器<strong>只能有一方主动</strong>发数据，这就是所谓的<strong>半双工</strong>。</p><p>也就是说，好好的全双工 TCP，被 HTTP 用成了半双工。</p><p>为什么？</p><p>这是由于 HTTP 协议设计之初，考虑的是看看网页文本的场景，能做到<strong>客户端发起请求再由服务器响应</strong>，就够了，根本就没考虑网页游戏这种，客户端和服务器之间都要互相主动发大量数据的场景。</p><p>所以为了更好的支持这样的场景，我们需要另外一个<strong>基于 TCP 的新协议</strong>。</p><p>于是新的应用层协议<strong>websocket</strong>就被设计出来了。</p><p>大家别被这个名字给带偏了。虽然名字带了个 socket，但其实 socket 和 websocket 之间，就跟雷峰和雷峰塔一样，二者接近<strong>毫无关系</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/websocket在四层网络协议中的位置.drawio.png" alt="websocket在四层网络协议中的位置" tabindex="0" loading="lazy"><figcaption>websocket在四层网络协议中的位置</figcaption></figure><br><h2 id="怎么建立-websocket-连接" tabindex="-1"><a class="header-anchor" href="#怎么建立-websocket-连接"><span>怎么建立 websocket 连接</span></a></h2><p>我们平时刷网页，一般都是在浏览器上刷的，一会刷刷图文，这时候用的是<strong>HTTP 协议</strong>，一会打开网页游戏，这时候就得切换成我们新介绍的<strong>websocket 协议</strong>。</p><p>为了兼容这些使用场景。浏览器在<strong>TCP 三次握手</strong>建立连接之后，都<strong>统一使用 HTTP 协议</strong>先进行一次通信。</p><ul><li>如果此时是<strong>普通的 HTTP 请求</strong>，那后续双方就还是老样子继续用普通 HTTP 协议进行交互，这点没啥疑问。</li><li>如果这时候是<strong>想建立 websocket 连接</strong>，就会在 HTTP 请求里带上一些<strong>特殊的 header 头</strong>。</li></ul><div class="language-she line-numbers-mode" data-ext="she" data-title="she"><pre class="language-she"><code>Connection: Upgrade
Upgrade: websocket
Sec-WebSocket-Key: T2a6wZlAwhgQNqruZ2YUyg==\\r\\n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些 header 头的意思是，浏览器想<strong>升级协议（Connection: Upgrade）</strong>，并且<strong>想升级成 websocket 协议（Upgrade: websocket）</strong>。</p><p>同时带上一段<strong>随机生成的 base64 码（Sec-WebSocket-Key）</strong>，发给服务器。</p><p>如果服务器正好支持升级成 websocket 协议。就会走 websocket 握手流程，同时根据客户端生成的 base64 码，用某个<strong>公开的</strong>算法变成另一段字符串，放在 HTTP 响应的 <code>Sec-WebSocket-Accept</code> 头里，同时带上<code>101状态码</code>，发回给浏览器。</p><div class="language-she line-numbers-mode" data-ext="she" data-title="she"><pre class="language-she"><code>HTTP/1.1 101 Switching Protocols\\r\\n
Sec-WebSocket-Accept: iBJKv/ALIW2DobfoA4dmr3JHBCY=\\r\\n
Upgrade: websocket\\r\\n
Connection: Upgrade\\r\\n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>http 状态码=200（正常响应）的情况，大家见得多了。101 确实不常见，它其实是指<strong>协议切换</strong>。</p></blockquote><figure><img src="https://cdn.xiaobaidebug.top/base64转为新的字符串.drawio.png" alt="base64转为新的字符串" tabindex="0" loading="lazy"><figcaption>base64转为新的字符串</figcaption></figure><p>之后，浏览器也用同样的<strong>公开算法</strong>将<code>base64码</code>转成另一段字符串，如果这段字符串跟服务器传回来的<strong>字符串一致</strong>，那验证通过。</p><figure><img src="https://cdn.xiaobaidebug.top/对比客户端和服务端生成的字符串.drawio.png" alt="对比客户端和服务端生成的字符串" tabindex="0" loading="lazy"><figcaption>对比客户端和服务端生成的字符串</figcaption></figure><p>就这样经历了一来一回两次 HTTP 握手，websocket 就建立完成了，后续双方就可以使用 webscoket 的数据格式进行通信了。</p><figure><img src="https://cdn.xiaobaidebug.top/建立websocket连接.drawio.png" alt="建立websocket连接.drawio" tabindex="0" loading="lazy"><figcaption>建立websocket连接.drawio</figcaption></figure><br><h2 id="websocket-抓包" tabindex="-1"><a class="header-anchor" href="#websocket-抓包"><span>websocket 抓包</span></a></h2><p>我们可以用 wireshark 抓个包，实际看下数据包的情况。</p><figure><img src="https://cdn.xiaobaidebug.top/image-20220825222212533.png" alt="客户端请求升级为websocket" tabindex="0" loading="lazy"><figcaption>客户端请求升级为websocket</figcaption></figure><p>上面这张图，注意画了红框的第<code>2445</code>行报文，是 websocket 的<strong>第一次握手</strong>，意思是发起了一次带有<code>特殊Header</code>的 HTTP 请求。</p><figure><img src="https://cdn.xiaobaidebug.top/未命名绘图ddddd.drawio.png" alt="服务器同意升级为websocket协议" tabindex="0" loading="lazy"><figcaption>服务器同意升级为websocket协议</figcaption></figure><p>上面这个图里画了红框的<code>4714</code>行报文，就是服务器在得到第一次握手后，响应的<strong>第二次握手</strong>，可以看到这也是个 HTTP 类型的报文，返回的状态码是 101。同时可以看到返回的报文 header 中也带有各种<code>websocket</code>相关的信息，比如<code>Sec-WebSocket-Accept</code>。</p><figure><img src="https://cdn.xiaobaidebug.top/image-20220825222810052.png" alt="两次HTTP请求之后正式使用websocket通信" tabindex="0" loading="lazy"><figcaption>两次HTTP请求之后正式使用websocket通信</figcaption></figure><p>上面这张图就是全貌了，从截图上的注释可以看出，websocket 和 HTTP 一样都是基于 TCP 的协议。经历了三次 TCP 握手之后，利用 HTTP 协议升级为 websocket 协议。</p><p>你在网上可能会看到一种说法：&quot;websocket 是基于 HTTP 的新协议&quot;，<strong>其实这并不对</strong>，因为 websocket 只有在建立连接时才用到了 HTTP，<strong>升级完成之后就跟 HTTP 没有任何关系了</strong>。</p><p>这就好像你喜欢的女生通过你要到了你大学室友的微信，然后他们自己就聊起来了。你能说这个女生是通过你去跟你室友沟通的吗？不能。你跟 HTTP 一样，都只是个<strong>工具人</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1663378093150.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这就有点&quot;<strong>借壳生蛋</strong>&quot;的那意思。</p><figure><img src="https://cdn.xiaobaidebug.top/HTTP和websocket的关系.drawio.png" alt="HTTP和websocket的关系" tabindex="0" loading="lazy"><figcaption>HTTP和websocket的关系</figcaption></figure><br><h2 id="websocket-的消息格式" tabindex="-1"><a class="header-anchor" href="#websocket-的消息格式"><span>websocket 的消息格式</span></a></h2><p>上面提到在完成协议升级之后，两端就会用 webscoket 的数据格式进行通信。</p><p>数据包在 websocket 中被叫做<strong>帧</strong>。</p><p>我们来看下它的数据格式长什么样子。</p><figure><img src="https://cdn.xiaobaidebug.top/websocket报文格式2.drawio.png" alt="websocket报文格式" tabindex="0" loading="lazy"><figcaption>websocket报文格式</figcaption></figure><p>这里面字段很多，但我们只需要关注下面这几个。</p><p><strong>opcode 字段</strong>：这个是用来标志这是个<strong>什么类型</strong>的数据帧。比如。</p><ul><li>等于 1 时是指 text 类型（<code>string</code>）的数据包</li><li>等于 2 是二进制数据类型（<code>[]byte</code>）的数据包</li><li>等于 8 是关闭连接的信号</li></ul><p><strong>payload 字段</strong>：存放的是我们<strong>真正想要传输的数据的长度</strong>，单位是<strong>字节</strong>。比如你要发送的数据是<code>字符串&quot;111&quot;</code>，那它的长度就是<code>3</code>。</p><figure><img src="https://cdn.xiaobaidebug.top/image-20220826101644204.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>另外，可以看到，我们存放<strong>payload 长度的字段有好几个</strong>，我们既可以用最前面的<code>7bit</code>, 也可以用后面的<code>7+16bit或7+64bit。</code></p><p>那么问题就来了。</p><p>我们知道，在数据层面，大家都是 01 二进制流。我怎么知道<strong>什么情况下应该读 7bit，什么情况下应该读 7+16bit 呢？</strong></p><p>websocket 会用最开始的 7bit 做标志位。不管接下来的数据有多大，都<strong>先读最先的 7 个 bit</strong>，根据它的取值决定还要不要再读个 16bit 或 64bit。</p><ul><li>如果<code>最开始的7bit</code>的值是 0~125，那么它就表示了 <strong>payload 全部长度</strong>，只读最开始的<code>7个bit</code>就完事了。</li></ul><figure><img src="https://cdn.xiaobaidebug.top/payload长度在0到125之间2.png" alt="payload长度在0到125之间" tabindex="0" loading="lazy"><figcaption>payload长度在0到125之间</figcaption></figure><ul><li>如果是<code>126（0x7E）</code>。那它表示 payload 的长度范围在 <code>126~65535</code> 之间，接下来还需要<strong>再读 16bit</strong>。这 16bit 会包含 payload 的真实长度。</li></ul><figure><img src="https://cdn.xiaobaidebug.top/payload长度在126到65535之间2.png" alt="payload长度在126到65535之间" tabindex="0" loading="lazy"><figcaption>payload长度在126到65535之间</figcaption></figure><ul><li>如果是<code>127（0x7F）</code>。那它表示 payload 的长度范围<code>&gt;=65536</code>，接下来还需要<strong>再读 64bit</strong>。这 64bit 会包含 payload 的长度。这能放 2 的 64 次方 byte 的数据，换算一下好多个 TB，肯定够用了。</li></ul><figure><img src="https://cdn.xiaobaidebug.top/payload长度大于等于65536的情况.png" alt="payload长度大于等于65536的情况" tabindex="0" loading="lazy"><figcaption>payload长度大于等于65536的情况</figcaption></figure><p><strong>payload data 字段</strong>：这里存放的就是真正要传输的数据，在知道了上面的 payload 长度后，就可以根据这个值去截取对应的数据。</p><p>大家有没有发现一个小细节，websocket 的数据格式也是 <strong>数据头（内含 payload 长度） + payload data</strong> 的形式。</p><figure><img src="https://cdn.xiaobaidebug.top/0bec52deb6276987.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,115),u={href:"https://juejin.cn/post/7121882245605883934",target:"_blank",rel:"noopener noreferrer"},A=t("strong",null,"纯裸 TCP",-1),h=t("strong",null,"粘包",-1),T=t("strong",null,"消息头+消息体",-1),w=a('<p>而<strong>消息头</strong>里一般含有<strong>消息体的长度</strong>，通过这个长度可以去截取真正的消息体。</p><p>HTTP 协议和大部分 RPC 协议，以及我们今天介绍的 websocket 协议，都是这样设计的。</p><figure><img src="https://cdn.xiaobaidebug.top/消息边界长度标志6.drawio.png" alt="消息边界长度标志" tabindex="0" loading="lazy"><figcaption>消息边界长度标志</figcaption></figure><br><h2 id="websocket-的使用场景" tabindex="-1"><a class="header-anchor" href="#websocket-的使用场景"><span>websocket 的使用场景</span></a></h2><p>websocket 完美继承了 TCP 协议的<strong>全双工</strong>能力，并且还贴心的提供了解决粘包的方案。它适用于<strong>需要服务器和客户端（浏览器）频繁交互</strong>的大部分场景。比如网页/小程序游戏，网页聊天室，以及一些类似飞书这样的网页协同办公软件。</p><p>回到文章开头的问题，在使用 websocket 协议的网页游戏里，怪物移动以及攻击玩家的行为是<strong>服务器逻辑</strong>产生的，对玩家产生的伤害等数据，都需要由<strong>服务器主动发送给客户端</strong>，客户端获得数据后展示对应的效果。</p><figure><img src="https://cdn.xiaobaidebug.top/websocket的使用场景.drawio.png" alt="websocket的使用场景" tabindex="0" loading="lazy"><figcaption>websocket的使用场景</figcaption></figure><br><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>TCP 协议本身是<strong>全双工</strong>的，但我们最常用的 HTTP1.1，虽然是基于 TCP 的协议，但它是<strong>半双工</strong>的，对于大部分需要服务器主动推送数据到客户端的场景，都不太友好，因此我们需要使用支持全双工的 websocket 协议。</li><li>在 HTTP1.1 里。只要客户端不问，服务端就不答。基于这样的特点，对于登录页面这样的简单场景，可以使用<strong>定时轮询或者长轮询</strong>的方式实现<strong>服务器推送</strong>(comet)的效果。</li><li>对于客户端和服务端之间需要频繁交互的复杂场景，比如网页游戏，都可以考虑使用 websocket 协议。</li><li>websocket 和 socket 几乎没有任何关系，只是叫法相似。</li><li>正因为各个浏览器都支持 HTTP 协议，所以 websocket 会先利用 HTTP 协议加上一些特殊的 header 头进行握手升级操作，升级成功后就跟 HTTP 没有任何关系了，之后就用 websocket 的数据格式进行收发数据。</li></ul><hr><br><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>最近原创更文的阅读量稳步下跌，思前想后，夜里辗转反侧。</p><p>我有个不成熟的请求。</p><img src="https://cdn.xiaobaidebug.top/image-20220522162506224.png" alt="" style="zoom:20%;"><br><p><strong>离开广东好长时间了，好久没人叫我靓仔了。</strong></p><p>大家可以在<strong>评论区</strong>里，叫我一靓仔吗？</p><p>我这么善良质朴的愿望，能被满足吗？</p><p>如果实在叫不出口的话，能帮我<strong>点下关注</strong>和右下角的<strong>点赞+在看</strong>吗？</p><br><h5 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h5><p><strong>点击</strong>下方名片，关注公众号:【小白 debug】<br><img src="https://cdn.xiaobaidebug.top/1696069689495.png" alt="" loading="lazy"></p><br><p>不满足于在留言区说骚话？</p><p>加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。就<strong>超！开！心！</strong></p><img src="https://cdn.xiaobaidebug.top/image-20220522162616202.png" alt="" style="zoom:50%;"><figure><img src="https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>',32),m={href:"https://www.xiaobaidebug.top/2022/07/19/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/%E6%97%A2%E7%84%B6%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89RPC%E5%8D%8F%E8%AE%AE%EF%BC%9F/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.xiaobaidebug.top/2021/03/26/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/TCP%E7%B2%98%E5%8C%85%EF%BC%81%E6%95%B0%E6%8D%AE%E5%8C%85%EF%BC%9A%E6%88%91%E5%8F%AA%E6%98%AF%E7%8A%AF%E4%BA%86%E6%AF%8F%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E9%83%BD%E4%BC%9A%E7%8A%AF%E7%9A%84%E9%94%99%EF%BC%8C%E7%A1%AC%E6%A0%B8%E5%9B%BE%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.xiaobaidebug.top/2021/05/25/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%EF%BC%81%E6%97%A2%E7%84%B6IP%E5%B1%82%E4%BC%9A%E5%88%86%E7%89%87%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88TCP%E5%B1%82%E4%B9%9F%E8%BF%98%E8%A6%81%E5%88%86%E6%AE%B5%EF%BC%9F/",target:"_blank",rel:"noopener noreferrer"};function x(F,C){const o=g("ExternalLinkIcon");return s(),p("div",null,[t("blockquote",null,[t("p",null,[e("文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub "),t("a",c,[e("https://github.com/xiaobaiTech/golangFamily"),i(o)]),e(" , 有大厂面试完整考点和成长路线，欢迎 Star。")])]),d,l,t("p",null,[e("从 "),t("a",E,[e("HTTP 协议"),i(o)]),e("的角度来看，就是点一下网页上的某个按钮，"),b,e("。")]),B,t("p",null,[e("之前写的"),t("a",u,[e("《既然有 HTTP 协议，为什么还要有 RPC》"),i(o)]),e("提到过，TCP 协议本身就是全双工，但直接使用"),A,e("去传输数据，会有"),h,e('的"问题"。为了解决这个问题，上层协议一般会用'),T,e("的格式去重新包装要发的数据。")]),w,t("ul",null,[t("li",null,[t("a",m,[e("既然有 HTTP 协议，为什么还要有 RPC"),i(o)])]),t("li",null,[t("a",f,[e("TCP 粘包 数据包：我只是犯了每个数据包都会犯的错 |硬核图解"),i(o)])]),t("li",null,[t("a",k,[e("动图图解！既然 IP 层会分片，为什么 TCP 层也还要分段？"),i(o)])])])])}const H=n(r,[["render",x],["__file","为什么有HTTP协议，还要有websocket协议.html.vue"]]),_=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E8%BF%98%E8%A6%81%E6%9C%89websocket%E5%8D%8F%E8%AE%AE.html","title":"为什么有HTTP协议，还要有websocket协议","lang":"zh-CN","frontmatter":{"title":"为什么有HTTP协议，还要有websocket协议","date":"2022-09-18T22:57:55.000Z","tags":null,"categories":"图解网络","description":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 平时我们打开网页，比如购物网站某宝。都是点一下列表商品，跳转一下网页就到了商品详情。 从 HTT...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E8%BF%98%E8%A6%81%E6%9C%89websocket%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"为什么有HTTP协议，还要有websocket协议"}],["meta",{"property":"og:description","content":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 平时我们打开网页，比如购物网站某宝。都是点一下列表商品，跳转一下网页就到了商品详情。 从 HTT..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/image-20220827161615614.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T07:59:24.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"为什么有HTTP协议，还要有websocket协议"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:published_time","content":"2022-09-18T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-04T07:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么有HTTP协议，还要有websocket协议\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/image-20220827161615614.png\\",\\"https://cdn.xiaobaidebug.top/%E5%88%9B%E5%BB%BA%E8%A7%92%E8%89%B2%E9%A1%B5%E9%9D%A2.jpeg\\",\\"https://cdn.xiaobaidebug.top/%E4%BD%BF%E7%94%A8HTTP%E5%AE%9A%E6%97%B6%E8%BD%AE%E8%AF%A23.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image-20220824090204629.png\\",\\"https://cdn.xiaobaidebug.top/%E9%95%BF%E8%BD%AE%E8%AF%A2.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image-20220824085627057.png\\",\\"https://cdn.xiaobaidebug.top/RocketMQ%E7%9A%84%E6%B6%88%E8%B4%B9%E8%80%85%E9%80%9A%E8%BF%87%E9%95%BF%E8%BD%AE%E8%AF%A2%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.drawio.png\\",\\"https://cdn.xiaobaidebug.top/websocket%E5%9C%A8%E5%9B%9B%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE.drawio.png\\",\\"https://cdn.xiaobaidebug.top/base64%E8%BD%AC%E4%B8%BA%E6%96%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E5%AF%B9%E6%AF%94%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%94%9F%E6%88%90%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E5%BB%BA%E7%AB%8Bwebsocket%E8%BF%9E%E6%8E%A5.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image-20220825222212533.png\\",\\"https://cdn.xiaobaidebug.top/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%BB%98%E5%9B%BEddddd.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image-20220825222810052.png\\",\\"https://cdn.xiaobaidebug.top/1663378093150.png\\",\\"https://cdn.xiaobaidebug.top/HTTP%E5%92%8Cwebsocket%E7%9A%84%E5%85%B3%E7%B3%BB.drawio.png\\",\\"https://cdn.xiaobaidebug.top/websocket%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F2.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image-20220826101644204.png\\",\\"https://cdn.xiaobaidebug.top/payload%E9%95%BF%E5%BA%A6%E5%9C%A80%E5%88%B0125%E4%B9%8B%E9%97%B42.png\\",\\"https://cdn.xiaobaidebug.top/payload%E9%95%BF%E5%BA%A6%E5%9C%A8126%E5%88%B065535%E4%B9%8B%E9%97%B42.png\\",\\"https://cdn.xiaobaidebug.top/payload%E9%95%BF%E5%BA%A6%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E65536%E7%9A%84%E6%83%85%E5%86%B5.png\\",\\"https://cdn.xiaobaidebug.top/0bec52deb6276987.jpeg\\",\\"https://cdn.xiaobaidebug.top/%E6%B6%88%E6%81%AF%E8%BE%B9%E7%95%8C%E9%95%BF%E5%BA%A6%E6%A0%87%E5%BF%976.drawio.png\\",\\"https://cdn.xiaobaidebug.top/websocket%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.drawio.png\\",\\"https://cdn.xiaobaidebug.top/1696069689495.png\\",\\"https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi.gif\\"],\\"datePublished\\":\\"2022-09-18T22:57:55.000Z\\",\\"dateModified\\":\\"2024-03-04T07:59:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E8%BF%98%E8%A6%81%E6%9C%89websocket%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E8%BF%98%E8%A6%81%E6%9C%89websocket%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"为什么有HTTP协议，还要有websocket协议"}],["meta",{"property":"og:description","content":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 平时我们打开网页，比如购物网站某宝。都是点一下列表商品，跳转一下网页就到了商品详情。 从 HTT..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T07:59:24.000Z"}],["meta",{"property":"article:published_time","content":"2022-09-18T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-04T07:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么有HTTP协议，还要有websocket协议\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-18T22:57:55.000Z\\",\\"dateModified\\":\\"2024-03-04T07:59:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用 HTTP 不断轮询","slug":"使用-http-不断轮询","link":"#使用-http-不断轮询","children":[]},{"level":2,"title":"长轮询","slug":"长轮询","link":"#长轮询","children":[]},{"level":2,"title":"websocket 是什么","slug":"websocket-是什么","link":"#websocket-是什么","children":[]},{"level":2,"title":"怎么建立 websocket 连接","slug":"怎么建立-websocket-连接","link":"#怎么建立-websocket-连接","children":[]},{"level":2,"title":"websocket 抓包","slug":"websocket-抓包","link":"#websocket-抓包","children":[]},{"level":2,"title":"websocket 的消息格式","slug":"websocket-的消息格式","link":"#websocket-的消息格式","children":[]},{"level":2,"title":"websocket 的使用场景","slug":"websocket-的使用场景","link":"#websocket-的使用场景","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1709539164000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":2}]},"readingTime":{"minutes":15.96,"words":4788},"filePathRelative":"计算机基础/网络基础/核心知识点/为什么有HTTP协议，还要有websocket协议.md","localizedDate":"2022年9月18日","autoDesc":true}');export{H as comp,_ as data};
