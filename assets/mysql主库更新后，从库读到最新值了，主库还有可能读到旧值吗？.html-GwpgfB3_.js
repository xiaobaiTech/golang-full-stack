import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as r,a as s,b as n,d as e,e as l}from"./app-BLI1Dd-8.js";const i={},c=l(`<h1 id="mysql-主库更新后-从库都读到最新值了-主库还有可能读到旧值吗" tabindex="-1"><a class="header-anchor" href="#mysql-主库更新后-从库都读到最新值了-主库还有可能读到旧值吗"><span>mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？</span></a></h1><br><p>大家好，我是小白，好长时间没更新技术文了，相信大家看我写的水文也看烦了。</p><figure><img src="https://cdn.xiaobaidebug.top/image/1539510639669-20220302001234401.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>今天的文章，其实来自真实的面试题，而且还比较有趣，所以忍不住分享出来。</p><p>直接开始吧。</p><br><p>我们知道，mysql 数据库，为了得到更高性能，一般会<strong>读写分离</strong>，主库用于写操作，比如用于执行<code>insert，update</code>操作，从库用于读，也就是最常见的<code>select</code>操作。像下面这个图这样。</p><figure><img src="https://cdn.xiaobaidebug.top/image/mysql读写分离2.drawio-20220419205818771.png" alt="mysql读写分离" tabindex="0" loading="lazy"><figcaption>mysql读写分离</figcaption></figure><p>虽然主库一般用于写操作，但也是<strong>能读</strong>的。那么今天的问题来了。</p><ul><li><p>主库更新后，<strong>主库</strong>都读到最新值了，<strong>从库</strong>还有可能读到旧值吗？</p></li><li><p>主库更新后，<strong>从库</strong>都读到最新值了，<strong>主库</strong>还有可能读到旧值吗？</p></li></ul><p>毕竟面试官都这么问了，那当然是有可能的，那至于是为啥，以及怎么做到的，今天我们来好好聊聊。</p><h3 id="正常的主从更新流程" tabindex="-1"><a class="header-anchor" href="#正常的主从更新流程"><span>正常的主从更新流程</span></a></h3><p>比如我在主库和从库都有张 user 表，此时有以下两条数据。</p><figure><img src="https://cdn.xiaobaidebug.top/image/数据库原始状态.png" alt="数据库原始状态" tabindex="0" loading="lazy"><figcaption>数据库原始状态</figcaption></figure><p>正常情况下，我们往主库执行写操作，比如更新一条数据，执行</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">50</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虽然这是一个单条写操作，但本质上可以理解为单条语句的事务。等同于下面这样</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">begin</span><span class="token punctuation">;</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">50</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个事务如果执行成功了，数据会先写入到主库的 binlog 文件中，然后再刷入磁盘。</p><p><strong>binlog 文件</strong>是 mysql 的 server 层日志，记录了用户对数据库有哪些变更操作，比如建数据库表加字段，对某些行的增删改等。</p><p>它的位置可以通过下面的查询语句看到。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&quot;%log_bin%&quot;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------------------------+--------------------------------------+</span>
<span class="token operator">|</span> Variable_name                   <span class="token operator">|</span> <span class="token keyword">Value</span>                                <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------------+--------------------------------------+</span>
<span class="token operator">|</span> log_bin                         <span class="token operator">|</span> <span class="token keyword">ON</span>                                   <span class="token operator">|</span>
<span class="token operator">|</span> log_bin_basename                <span class="token operator">|</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>slave<span class="token operator">-</span>bin       <span class="token operator">|</span>
<span class="token operator">|</span> log_bin_index                   <span class="token operator">|</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>slave<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token keyword">index</span> <span class="token operator">|</span>
<span class="token operator">|</span> log_bin_trust_function_creators <span class="token operator">|</span> <span class="token keyword">OFF</span>                                  <span class="token operator">|</span>
<span class="token operator">|</span> log_bin_use_v1_row_events       <span class="token operator">|</span> <span class="token keyword">OFF</span>                                  <span class="token operator">|</span>
<span class="token operator">|</span> sql_log_bin                     <span class="token operator">|</span> <span class="token keyword">ON</span>                                   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------------+--------------------------------------+</span>
<span class="token number">6</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 binlog 在 <code>/var/lib/mysql/</code> 下，命名会类似<code>mysql-bin.00000x</code>。感兴趣的可以到这个目录下直接查看文件内容长什么样子。</p><br><p>如果两个 mysql 配置好了主从的关系，那么他们之间会建立一个<strong>tcp 长连接</strong>，主要用于传输同步数据。</p><p>除此之外，主库还会再起一个<strong>binlog dump 线程</strong>将 binlog 文件的变更发给从库。</p><p>可以在<strong>主库</strong>中通过 <code>show full processlist;</code> 查询到 binlog dump 线程的存在。</p><figure><img src="https://cdn.xiaobaidebug.top/image/image-20220301084729507.png" alt="主库的binlog dump线程" tabindex="0" loading="lazy"><figcaption>主库的binlog dump线程</figcaption></figure><p>以上，主库的工作就结束了，我们说说从库的。</p><p>从库在收到 binlog 后，会有一个<strong>io 线程</strong>负责把收到的数据写入到**relay log（中继日志）**中。</p><p>然后再有一个<strong>sql 线程</strong>，来读取 relay log 的内容，然后对从库执行 sql 语句操作，从结果上来看就是将主库执行过的写操作，在从库上也重放一遍，这样主从数据就一致了。</p><br><p>是不是感觉 relay log 有些多余？</p><br><p><strong>为什么要先写一遍 relay log 然后再写从库，直接将数据写入到从库不好吗？</strong></p><p>在这里 relay log 的作用就类似于一个<strong>中间层</strong>，**主库是多线程并发写的，从库的 sql 线程是单线程串行执行的，所以这两边的生产和消费速度肯定不同。**当主库发的 binlog 消息过多时，从库的 relay log 可以起到暂存主库数据的作用，接着从库的 sql 线程再慢慢消费这些 relay log 数据，这样既不会限制主库发消息的速度，也不会给从库造成过大压力。</p><p>可以通过在<strong>从库</strong>中执行 <code>show full processlist;</code> 确认 io 线程和 sql 线程的存在。</p><figure><img src="https://cdn.xiaobaidebug.top/image/image-20220301102221753.png" alt="io线程和sql线程" tabindex="0" loading="lazy"><figcaption>io线程和sql线程</figcaption></figure><p>因此总结起来，主从同步的步骤就是</p><p><strong>1.执行更新 sql 语句。</strong></p><p><strong>2.主库写成功时，binlog 会更新。</strong></p><p><strong>3.主库 binlog dump 线程将 binlog 的更新部分发给从库</strong></p><p><strong>4.从库 io 线程收到 binlog 更新部分，然后写入到 relay log 中</strong></p><p><strong>5.从库 sql 线程读取 relay log 内容，重放执行 sql，最后主从一致。</strong></p><figure><img src="https://cdn.xiaobaidebug.top/image/mysql主从同步-20220419210000882.png" alt="mysql主从同步" tabindex="0" loading="lazy"><figcaption>mysql主从同步</figcaption></figure><p>到这里，我们可以开始回答文章开头的第一个问题。</p><br><h3 id="主库更新后-主库都读到最新值了-从库还有可能读到旧值吗" tabindex="-1"><a class="header-anchor" href="#主库更新后-主库都读到最新值了-从库还有可能读到旧值吗"><span>主库更新后，主库都读到最新值了，从库还有可能读到旧值吗？</span></a></h3><p>这是可能的，上面提到的主从同步的 5 个步骤里，第 3 到第 5 步骤，都需要时间去执行，而这些步骤的执行时间总和，就是我们常说的<strong>主从延迟</strong>。</p><p>当更新一行数据后，立马去读主库，主库的数据肯定是最新值，这点没什么好说的，但<strong>如果此时主从延迟过大，这时候读从库，同步可能还没完成，因此读到的就是旧值。</strong></p><p>在实际的开发当中，主从延迟也非常常见，当数据库压力稍微大点，主从延迟就能到 100ms 甚至 1s 以上。</p><p>具体的主从延迟时间可以在从库中执行 <code>show slave status \\G;</code>来查看，其中里面的<code>Seconds_Behind_Master</code>则是主从延迟的时间，单位是秒。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> slave <span class="token keyword">status</span> \\G<span class="token punctuation">;</span>
<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
               Slave_IO_State: Waiting <span class="token keyword">for</span> master <span class="token keyword">to</span> send event
                  Master_Host: <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span>
                  Master_User: slave
                Connect_Retry: <span class="token number">30</span>
              Master_Log_File: mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span>
          Read_Master_Log_Pos: <span class="token number">756</span>
               Relay_Log_File: edu<span class="token operator">-</span>mysql<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000004</span>
                Relay_Log_Pos: <span class="token number">969</span>
        Relay_Master_Log_File: mysql<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span>
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
        Seconds_Behind_Master: <span class="token number">2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以如果你有<strong>写数据后就立马要读数据</strong>的场景，要是此时读的是从库，很有可能会读到<strong>更新前</strong>的旧数据，如果你对数据一致性有较高要求，这种时候<strong>建议读主库</strong>。</p><br><h3 id="主库更新后-从库都读到最新值了-主库还有可能读到旧值吗" tabindex="-1"><a class="header-anchor" href="#主库更新后-从库都读到最新值了-主库还有可能读到旧值吗"><span>主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？</span></a></h3><p>那另一个问题就来了，如果从库都读到最新值了，那说明<strong>主库肯定已经更新完成了</strong>，那此时读主库是不是只能读到最新值呢？</p><p><strong>还真不是的</strong>，待会我给大家复现下，但在这之前我们了解一些<strong>前置知识点</strong>。</p><br><h4 id="mysql-的四种隔离级别" tabindex="-1"><a class="header-anchor" href="#mysql-的四种隔离级别"><span>mysql 的四种隔离级别</span></a></h4><p>这个绝对是面试八股文老股了。mysql 有四种隔离级别，分别是<strong>读未提交（Read uncommitted），读提交（Read committed），可重复读（Repeatable read）和串行化（Serializable）</strong>。在不同的隔离级别下，并发读写效果会不太一样。</p><p>当前数据库处于什么隔离级别可以通过执行 <code>select @@tx_isolation;</code> 查看到。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-----------------+</span>
<span class="token operator">|</span> @<span class="token variable">@tx_isolation</span>  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------------+</span>
<span class="token operator">|</span> <span class="token keyword">REPEATABLE</span><span class="token operator">-</span><span class="token keyword">READ</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过下面的语句去修改隔离级别。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">REPEATABLE</span><span class="token operator">-</span><span class="token keyword">READ</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面用一个 case 来让大家直观点的理解这四个隔离级别的区别。</p><p>假设我们有两个线程同时对某行数据 A(A=1)进行以下操作。</p><figure><img src="https://cdn.xiaobaidebug.top/image/一个case解释隔离级别.2drawio.png" alt="一个case解释隔离级别" tabindex="0" loading="lazy"><figcaption>一个case解释隔离级别</figcaption></figure><p>我们执行事务都像上面这样，begin 可以开启事务，commit 会提交事务，上面两个线程，各执行一个事务，且此时是并发执行。</p><p>线程 1 会将某行的 A 这个字段从 1 更新为 2。</p><p>线程 2 啥也不干，就读 A。重点关注 2 线程的三次读 A 的行为，它们会根据隔离级别的不同，读到不同的值。</p><p><strong>第 1 次读 A</strong>：</p><ul><li>如果是<strong>读未提交</strong>，那么会读到 2，顾名思义，就算线程 1 未提交，线程 2 也能读到最新的值。</li><li>如果是读提交或者可重复读，那读到的都是 1，<strong>读提交</strong>只认事务提交后的数据，而<strong>可重复读</strong>只要线程 2 的事务内没有执行对 A 的更新 sql 语句，那读 A 的数据就会一直不变。</li></ul><p><strong>第 2 次读 A：时机正好在线程 1 提交了事务之后</strong></p><ul><li>如果是读未提交，前面都读到 2 了，现在读到的还是 2，这个没啥好说的。</li><li>如果是<strong>读提交</strong>，那读到的都是 2 了，因为线程 1 的事务提交了，<strong>读提交</strong>只认提交后的数据，所以此时线程 2 能读到最新数据。</li><li>如果是可重复读那就还是 1，理由跟上面一样。</li></ul><p><strong>第 3 次读 A：时机正好在线程 2 提交了事务之后</strong></p><ul><li>如果是读未提交或读已经提交，结果跟前面一样，还是 2。</li><li>如果是<strong>可重复读</strong>，那就变成了 2，因为线程 2 前面的事务结束了，在<strong>同一个事务内 A 的值重复多次读都是一致的</strong>，但当事务结束了之后，新的查询不再需要受限于上一次开事务时的值。</li></ul><p>上面的情况没有将<strong>串行化</strong>纳入讨论范围，只讨论了<strong>读未提交，读提交和可重复读</strong>这三个隔离级别，因为在这三个隔离级别下都有可能出现两个事务<strong>并发执行</strong>的场景，而在<strong>串行化的隔离级别</strong>中则不会出现，多个事务只会一个挨着一个依次<strong>串行执行</strong>，比如线程 1 的事务执行完了之后，线程 2 的事务才执行，因此不会产生并发查询更新的问题。</p><br><p>有了这个知识背景之后，我们就可以回到第二个问题里了。</p><p>数据库原始状态如下，此时主从都一样。</p><figure><img src="https://cdn.xiaobaidebug.top/image/数据库原始状态-20220419205854846.png" alt="数据库原始状态" tabindex="0" loading="lazy"><figcaption>数据库原始状态</figcaption></figure><p>假设当前的数据库事务隔离级别是<strong>可重复读</strong>，现在主库有 A，B 两个线程，同时执行 begin，开启事务。</p><p>此时主库的线程 2，<strong>先读一次 id=1 的数据</strong>，发现 age=72，<strong>由于当前事务隔离级别是可重复读</strong>，那么只要线程 2 在事务内不做更新操作的话，那么<strong>不管重复读多少次，age 都是 72</strong>。在这之后主库的线程 1 将 age 更新为 100 且执行 commit 提交了事务。</p><p>主库线程 1 的事务提交成功之后 binlog 就会顺利产生，然后同步给从库。此时<strong>从库去查询就能查到最新值 age=100</strong>。回过头来，此时主库的线程 2 因为还没提交事务，所以一直读到的都是旧值 age=72。但如果这时候线程 2 执行 commit 提交了事务，那么再查询，就能拿到最新值 age=100 了。</p><p>所以从结论上来说，<strong>出现了从库都读到最新值了，主库却读到了旧值的情况。</strong></p><figure><img src="https://cdn.xiaobaidebug.top/image/2从库读到最新值主库却读到旧值.drawio.png" alt="从库读到最新值主库却读到旧值" tabindex="0" loading="lazy"><figcaption>从库读到最新值主库却读到旧值</figcaption></figure><br><p>好了这道题到这里就结束了。</p><p>意不意外？</p><p>这道面试题，通过一个问题，将主从同步，事务隔离级别等知识点都串起来了。</p><p>还是有点意思的。</p><p>那么问题又来了，这四个隔离级别是挺骚气的，那他们是怎么实现的呢？</p><figure><img src="https://cdn.xiaobaidebug.top/image/1597215709606.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><p><strong>如果文章对你有帮助，欢迎.....</strong></p><p>算了。</p><br><h6 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h6><p>关注公众号:【小白 debug】</p><br><p>不满足于在留言区说骚话？</p><p>加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。就<strong>超！开！心！</strong></p><img src="https://cdn.xiaobaidebug.top/image-20220522162616202.png" width="50%" align="center"><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>`,106),g={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function u(E,B){const a=t("ExternalLinkIcon");return p(),r("div",null,[c,s("ul",null,[s("li",null,[s("p",null,[s("a",g,[n("golang进阶面试题八股文合集"),e(a)])])]),s("li",null,[s("p",null,[s("a",d,[n("golang基础面试题八股文合集"),e(a)])])]),s("li",null,[s("p",null,[s("a",m,[n("golang常用标准库第三方库大全"),e(a)])])]),s("li",null,[s("p",null,[s("a",k,[n("golang学习路线"),e(a)])])])])])}const v=o(i,[["render",u],["__file","mysql主库更新后，从库读到最新值了，主库还有可能读到旧值吗？.html.vue"]]),h=JSON.parse('{"path":"/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/mysql%E4%B8%BB%E5%BA%93%E6%9B%B4%E6%96%B0%E5%90%8E%EF%BC%8C%E4%BB%8E%E5%BA%93%E8%AF%BB%E5%88%B0%E6%9C%80%E6%96%B0%E5%80%BC%E4%BA%86%EF%BC%8C%E4%B8%BB%E5%BA%93%E8%BF%98%E6%9C%89%E5%8F%AF%E8%83%BD%E8%AF%BB%E5%88%B0%E6%97%A7%E5%80%BC%E5%90%97%EF%BC%9F.html","title":"mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？","lang":"zh-CN","frontmatter":{"description":"mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？ 大家好，我是小白，好长时间没更新技术文了，相信大家看我写的水文也看烦了。 今天的文章，其实来自真实的面试题，而且还比较有趣，所以忍不住分享出来。 直接开始吧。 我们知道，mysql 数据库，为了得到更高性能，一般会读写分离，主库用于写操作，比如用于执行insert，update操作，...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/mysql%E4%B8%BB%E5%BA%93%E6%9B%B4%E6%96%B0%E5%90%8E%EF%BC%8C%E4%BB%8E%E5%BA%93%E8%AF%BB%E5%88%B0%E6%9C%80%E6%96%B0%E5%80%BC%E4%BA%86%EF%BC%8C%E4%B8%BB%E5%BA%93%E8%BF%98%E6%9C%89%E5%8F%AF%E8%83%BD%E8%AF%BB%E5%88%B0%E6%97%A7%E5%80%BC%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？"}],["meta",{"property":"og:description","content":"mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？ 大家好，我是小白，好长时间没更新技术文了，相信大家看我写的水文也看烦了。 今天的文章，其实来自真实的面试题，而且还比较有趣，所以忍不住分享出来。 直接开始吧。 我们知道，mysql 数据库，为了得到更高性能，一般会读写分离，主库用于写操作，比如用于执行insert，update操作，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/image/1539510639669-20220302001234401.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T01:53:36.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-07-16T01:53:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/image/1539510639669-20220302001234401.jpg\\",\\"https://cdn.xiaobaidebug.top/image/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB2.drawio-20220419205818771.png\\",\\"https://cdn.xiaobaidebug.top/image/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E5%A7%8B%E7%8A%B6%E6%80%81.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20220301084729507.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20220301102221753.png\\",\\"https://cdn.xiaobaidebug.top/image/mysql%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5-20220419210000882.png\\",\\"https://cdn.xiaobaidebug.top/image/%E4%B8%80%E4%B8%AAcase%E8%A7%A3%E9%87%8A%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.2drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E5%A7%8B%E7%8A%B6%E6%80%81-20220419205854846.png\\",\\"https://cdn.xiaobaidebug.top/image/2%E4%BB%8E%E5%BA%93%E8%AF%BB%E5%88%B0%E6%9C%80%E6%96%B0%E5%80%BC%E4%B8%BB%E5%BA%93%E5%8D%B4%E8%AF%BB%E5%88%B0%E6%97%A7%E5%80%BC.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/1597215709606.gif\\"],\\"dateModified\\":\\"2024-07-16T01:53:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/mysql%E4%B8%BB%E5%BA%93%E6%9B%B4%E6%96%B0%E5%90%8E%EF%BC%8C%E4%BB%8E%E5%BA%93%E8%AF%BB%E5%88%B0%E6%9C%80%E6%96%B0%E5%80%BC%E4%BA%86%EF%BC%8C%E4%B8%BB%E5%BA%93%E8%BF%98%E6%9C%89%E5%8F%AF%E8%83%BD%E8%AF%BB%E5%88%B0%E6%97%A7%E5%80%BC%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/mysql%E4%B8%BB%E5%BA%93%E6%9B%B4%E6%96%B0%E5%90%8E%EF%BC%8C%E4%BB%8E%E5%BA%93%E8%AF%BB%E5%88%B0%E6%9C%80%E6%96%B0%E5%80%BC%E4%BA%86%EF%BC%8C%E4%B8%BB%E5%BA%93%E8%BF%98%E6%9C%89%E5%8F%AF%E8%83%BD%E8%AF%BB%E5%88%B0%E6%97%A7%E5%80%BC%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？"}],["meta",{"property":"og:description","content":"mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？ 大家好，我是小白，好长时间没更新技术文了，相信大家看我写的水文也看烦了。 今天的文章，其实来自真实的面试题，而且还比较有趣，所以忍不住分享出来。 直接开始吧。 我们知道，mysql 数据库，为了得到更高性能，一般会读写分离，主库用于写操作，比如用于执行insert，update操作，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T01:53:36.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T01:53:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-16T01:53:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"正常的主从更新流程","slug":"正常的主从更新流程","link":"#正常的主从更新流程","children":[]},{"level":3,"title":"主库更新后，主库都读到最新值了，从库还有可能读到旧值吗？","slug":"主库更新后-主库都读到最新值了-从库还有可能读到旧值吗","link":"#主库更新后-主库都读到最新值了-从库还有可能读到旧值吗","children":[]},{"level":3,"title":"主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？","slug":"主库更新后-从库都读到最新值了-主库还有可能读到旧值吗","link":"#主库更新后-从库都读到最新值了-主库还有可能读到旧值吗","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1721094816000,"contributors":[{"name":"xiaobai-tech","email":"948485496@qq.com","commits":3},{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":2}]},"readingTime":{"minutes":10.45,"words":3136},"filePathRelative":"中间件/mysql/核心知识点/mysql主库更新后，从库读到最新值了，主库还有可能读到旧值吗？.md","localizedDate":"2024年2月19日","autoDesc":true}');export{v as comp,h as data};
