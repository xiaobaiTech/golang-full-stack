import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as p,c as s,a as t,b as a,d as n,e as g}from"./app-Bq2LgVOA.js";const r={},c=g(`<h1 id="mysql-插入数据会失败-为什么" tabindex="-1"><a class="header-anchor" href="#mysql-插入数据会失败-为什么"><span>mysql 插入数据会失败，为什么？</span></a></h1><br><p>那天，我还在外面吃成都六姐的冒菜。</p><p>牛肉丸裹上麻酱后，狠狠嘬一口，都要入嘴了。</p><p>产品经理突然发来消息。</p><p><strong>&quot;线上有些用户不能注册了&quot;</strong></p><p>心想着&quot;关我 x 事，又不是我做的模块&quot;，放下手机。</p><p>不对，那老哥上礼拜刚离职了，想到这里，夹住毛肚的手<strong>微微颤抖</strong>。</p><p>对面继续发：<strong>&quot;还有些用户不能改名&quot;</strong></p><figure><img src="https://cdn.xiaobaidebug.top/image/a6a681ebgy1gpfzfr4ikdj20520523yf.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>&quot;如果用上<strong>表情符号</strong>的话，问题必现&quot;</p><p>可以了，这下问题几乎直接定位了。</p><p>危，速归。</p><br><p>有经验的兄弟们很容易看出，这肯定是因为<strong>字符集</strong>的缘故。</p><br><h2 id="复现问题" tabindex="-1"><a class="header-anchor" href="#复现问题"><span>复现问题</span></a></h2><p>我们来简单复现下这个问题。</p><p>如果你有一张数据库表，建表 sql 就像下面一样。</p><figure><img src="http://cdn.xiaobaidebug.top/image/建表sql语句.png" alt="建表sql语句" tabindex="0" loading="lazy"><figcaption>建表sql语句</figcaption></figure><p>接下来如果你插入的数据是</p><figure><img src="https://cdn.xiaobaidebug.top/image/insert成功case.png" alt="insert成功case" tabindex="0" loading="lazy"><figcaption>insert成功case</figcaption></figure><p><strong>能成功</strong>。一切正常。</p><p>但如果你插入的是</p><figure><img src="https://cdn.xiaobaidebug.top/image/insert失败case.png" alt="insert失败case" tabindex="0" loading="lazy"><figcaption>insert失败case</figcaption></figure><p>就会<strong>报错</strong>。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>Incorrect string <span class="token keyword">value</span>: <span class="token string">&#39;\\xF0\\x9F\\x98\\x81&#39;</span> <span class="token keyword">for</span> <span class="token keyword">column</span> <span class="token string">&#39;name&#39;</span> at <span class="token keyword">row</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>区别在于后者多了个 emoji 表情。</strong></p><p>明明也是字符串，为什么字符串里含有<strong>emoji 表情</strong>，插入就会报错呢？</p><p>我们从<strong>字符集编码</strong>这个话题开始聊起。</p><br><h2 id="编码和字符集的关系" tabindex="-1"><a class="header-anchor" href="#编码和字符集的关系"><span>编码和字符集的关系</span></a></h2><p>虽然我们平时可以在编辑器上输入各种中文英文字母，但这些都是给人读的，不是给计算机读的，其实计算机真正保存和传输数据都是以<strong>二进制</strong>0101 的格式进行的。</p><p>那么就需要有一个规则，把中文和英文字母转化为二进制，比如&quot;debug&quot;，计算机就需要把它转化为下图这样。</p><figure><img src="https://cdn.xiaobaidebug.top/image/debug的编码.drawio.png" alt="debug的编码" tabindex="0" loading="lazy"><figcaption>debug的编码</figcaption></figure><p>其中 d 对应十六进制下的 64，它可以转换为 01 二进制的格式。</p><p>于是字母和数字就这样一一对应起来了，这就是<strong>ASCII 编码</strong>格式。</p><p>它用<strong>一个字节</strong>，也就是<code>8位</code>来标识字符，基础符号有 128 个，扩展符号也是 128 个。</p><p>将它能表示的所有字符，给聚在一起，这就是我们常说的<strong>ASCII 字符集</strong>。</p><p>因为使用的字节数过少，因此也就只能表示下<strong>英文字母和数字</strong>。</p><p>这哪里够用。</p><p>塞牙缝都不够。</p><p>于是为了标识<strong>中文</strong>，出现了<strong>GB2312</strong>的编码格式。为了标识<strong>希腊语</strong>，出现了<strong>greek</strong>编码格式，为了标识<strong>俄语</strong>，整了<strong>cp866</strong>编码格式。</p><p>这百花齐放的场面，显然不是一个爱写<code>if else</code>的程序员想看到的。</p><p>为了统一它们，于是出现了<strong>Unicode 字符集</strong>，它用了 2~4 个字节来表示字符，简单的字符就用 2 个字节表示，复杂的就用 3 到 4 个字节。这样理论上所有符号都能被收录进去，并且完全兼容 ASCII 码，也就是说，同样是字母 d，在 ASCII 用 64 表示，在 Unicode 里还是用 64 来表示。但<strong>unicode 本身只是个字符集，它只规定了某个字符的具体数字是多少，但并没有规定这些数字是要用几个字节去存。</strong></p><p>如果你用<strong>UTF-32</strong>的编码格式，它有 32 位，就会用 4 个字节去存。</p><p>如果你用<strong>UTF-16</strong>的编码格式，它有 16 位，就会用 2 个字节去存。</p><p>但<strong>不同的地方是 ASCII 用 1 个字节来表示，而 Unicode 下，不管使用 UTF-16 还是 UTF-32 都至少要用两个字节来表示。</strong></p><p>比如下图，同样都是字母 d，unicode 比 ascii 至少多使用了一个字节。</p><figure><img src="https://cdn.xiaobaidebug.top/image/unicode比ascii多使用一个字节.drawio.png" alt="unicode比ascii多使用一个字节" tabindex="0" loading="lazy"><figcaption>unicode比ascii多使用一个字节</figcaption></figure><p>我们可以注意到，上面的 unicode 规定的字符码，放在前面的都是 0，其实用不上，但还<strong>占了个字节，有点浪费，完全能隐藏掉</strong>。如果我们能做到该隐藏时隐藏，这样就能省下不少空间，按这个思路，就是就有了<strong>UTF-8 编码</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/编码格式2.drawio.png" alt="编码格式" tabindex="0" loading="lazy"><figcaption>编码格式</figcaption></figure><p>来总结下。</p><p>按照一定规则把<strong>符号</strong>和计算机里的<strong>二进制码</strong>对应起来，这就是<strong>编码</strong>。而把 n 多这种已经编码的字符聚在一起，就是我们常说的<strong>字符集</strong>。</p><p>比如 utf-8 字符集就是所有 utf-8 编码格式的字符的合集。</p><blockquote><p>当然，这里说的 utf-8 字符集，其实就是 unicode 字符集。</p></blockquote><figure><img src="https://cdn.xiaobaidebug.top/image/字符和字符集的关系3.drawio.png" alt="字符和字符集的关系" tabindex="0" loading="lazy"><figcaption>字符和字符集的关系</figcaption></figure><br><h2 id="mysql-的字符集" tabindex="-1"><a class="header-anchor" href="#mysql-的字符集"><span>mysql 的字符集</span></a></h2><p>想看下 mysql 支持哪些字符集。可以执行 <code>show charset;</code></p><figure><img src="https://cdn.xiaobaidebug.top/image/数据库支持哪些字符集.png" alt="数据库支持哪些字符集" tabindex="0" loading="lazy"><figcaption>数据库支持哪些字符集</figcaption></figure><p>上面这么多字符集，我们只需要关注 utf8 和 utf8mb4 字符集就够了。</p><br><h3 id="utf8-和-utf8mb4-的区别" tabindex="-1"><a class="header-anchor" href="#utf8-和-utf8mb4-的区别"><span>utf8 和 utf8mb4 的区别</span></a></h3><p>注意下面的内容非常容易晕，大家请<strong>放慢阅读速度，关注下 utf 和 8 之间有没有横杠&quot;-&quot;。</strong></p><p>上面提到 utf-8 编码是 unicode 字符集的众多编码中的一种，utf-8 也一样可以表示所有字符，为了避免混淆，我在后面叫它<strong>大 utf8</strong>。</p><p>而从上面 mysql 支持的字符集的图里，我们看到了 utf8 和 utf8mb4。</p><p>先说<strong>utf8mb4</strong>编码，mb4 就是<strong>most bytes 4</strong>的意思，从上图最右边的<code>Maxlen</code>可以看到，它最大支持用<strong>4 个字节</strong>来表示字符，它几乎可以用来表示目前已知的所有的字符。</p><p>再说 mysql 字符集里的<strong>utf8</strong>，它是数据库的<strong>默认字符集</strong>。但注意，<strong>此 utf8 非彼 utf-8</strong>，我们叫它<strong>小 utf8</strong>字符集。</p><p>注意，这里的<strong>小 utf8</strong>和上面提到的<strong>大 utf8</strong>，并不是一回事。</p><p>为什么这么说，因为从 Maxlen 可以看出，它最多支持用 3 个字节去表示字符，按 utf8mb4 的命名方式，准确点应该叫它<strong>utf8mb3</strong>。</p><p>它就像是阉割版的 utf8mb4，只支持部分字符。比如 emoji 表情，它就不支持。</p><figure><img src="https://cdn.xiaobaidebug.top/image/utf8mb3和utf8mb4的关系5.drawio.png" alt="utf8mb3和utf8mb4的关系" tabindex="0" loading="lazy"><figcaption>utf8mb3和utf8mb4的关系</figcaption></figure><br><p>而 mysql 支持的字符集里，第三列，<strong>collation</strong>，它是指<strong>字符集的比较规则</strong>。</p><p>比如，**&quot;debug&quot;和&quot;Debug&quot;**是同一个单词，但它们大小写不同，该不该判为同一个单词呢。</p><p>这时候就需要用到 collation 了。</p><p>通过<code>SHOW COLLATION WHERE Charset = &#39;utf8mb4&#39;;</code>可以查看到<code>utf8mb4</code>下支持什么比较规则。</p><figure><img src="https://cdn.xiaobaidebug.top/image/utf8mb4字符集比较规则-20220421210049625.png" alt="utf8mb4字符集比较规则" tabindex="0" loading="lazy"><figcaption>utf8mb4字符集比较规则</figcaption></figure><p>如果<code>collation = utf8mb4_general_ci</code>，是指使用 utf8mb4 字符集前提下，<strong>挨个字符进行比较</strong>（<code>general</code>），并且不区分大小写（<code>_ci，case insensitice</code>）。</p><p>这种情况下，<strong>&quot;debug&quot;和&quot;Debug&quot;是同一个单词</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/对比规则-大小写不敏感2.png" alt="对比规则-大小写不敏感" tabindex="0" loading="lazy"><figcaption>对比规则-大小写不敏感</figcaption></figure><p>如果改成<code>collation=utf8mb4_bin</code>，就是指<strong>挨个比较二进制位大小</strong>。</p><p>于是**&quot;debug&quot;和&quot;Debug&quot;就不是同一个单词。**</p><figure><img src="https://cdn.xiaobaidebug.top/image/对比规则-大小写敏感.png" alt="对比规则-大小写敏感" tabindex="0" loading="lazy"><figcaption>对比规则-大小写敏感</figcaption></figure><br><h3 id="那-utf8mb4-对比-utf8mb3-有什么劣势吗" tabindex="-1"><a class="header-anchor" href="#那-utf8mb4-对比-utf8mb3-有什么劣势吗"><span>那 utf8mb4 对比 utf8mb3 有什么劣势吗？</span></a></h3><p>我们知道数据库表里，字段类型如果是 char(2)的话，里面的 2 是指<strong>字符个数</strong>，也就是说<strong>不管这张表用的是什么字符集</strong>，都能放上 2 个字符。</p><p>而 char 又是<strong>固定长度</strong>，为了能放下 2 个 utf8mb4 的字符，char 会默认保留<code>2*4（maxlen=4）= 8</code>个字节的空间。</p><p>如果是 utf8mb3，则会默认保留 2 * 3 (maxlen=3) = 6 个字节的空间。也就是说，在这种情况下，<strong>utf8mb4 会比 utf8mb3 多使用一些空间。</strong></p><p>但这真的无关紧要，如果我不用 char，用 varchar 就好了，varchar 不是固定长度，也就没有上面这些麻烦事了。</p><p>所以我<strong>个人认为，utf8mb4 比起 utf8mb3 几乎没有劣势。</strong></p><br><h3 id="如何查看数据库表的字符集" tabindex="-1"><a class="header-anchor" href="#如何查看数据库表的字符集"><span>如何查看数据库表的字符集</span></a></h3><p>如果我们不知道自己的表是用的哪种字符集，可以通过下面的方式进行查看。</p><figure><img src="https://cdn.xiaobaidebug.top/image/查看数据库表的字符集2.png" alt="查看数据库表的字符集" tabindex="0" loading="lazy"><figcaption>查看数据库表的字符集</figcaption></figure><br><h2 id="再看报错原因" tabindex="-1"><a class="header-anchor" href="#再看报错原因"><span>再看报错原因</span></a></h2><p>到这里，我们回到文章开头的问题。</p><p>因为数据库表在建表的时候使用 <code>DEFAULT CHARSET=utf8</code>， 相当于指定了<code>utf8mb3</code>字符集格式。</p><p>而在执行 insert 数据的时候，又不讲武德，加入了 emoji 表情这种<code>utf8mb4</code>才能支持的字符，mysql 识别到这是<code>utf8mb3</code>不支持的字符，于是忍痛报错。</p><p>要修复也很简单，执行下面的 sql 语句，就可以把数据库表的字符集改成<code>utf8mb4</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">CONVERT</span> <span class="token keyword">TO</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>答应我，以后建表，我们都无脑选 utf8mb4。</strong></p><p>选 utf8 除了在 char 字段场景下会比 utf8mb4 稍微省一点空间外，几乎没任何好处。</p><p>这点空间省下来了能提高你的绩效吗？不能。</p><p>但如果因此炸雷了，那你号就没了。</p><br><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>ASCII 编码支持数字和字母。大佬们为了支持中文引入了 GB2312 编码格式，其他国家的大佬们为了支持更多语言和符号，也引入了相应的编码格式。但他们都不能表达所有的字符，为了统一，于是有了 unicode 字符集，但它在计算机中的存储方式可以有很多种，比如有 utf-32 和 utf-16 编码格式，而 utf-8 则在 utf-32 和 utf-16 的基础上做了优化，压缩了空间。也就是说，utf-8, utf-16, utf32 都只是 unicode 字符集的编码格式而已。</li><li>mysql 默认的 utf8 字符集，其实只是 utf8mb3，并不完整，当插入 emoji 表情等特殊字符时，会报错，导致插入、更新数据失败。改成 utf8mb4 就好了，它能支持更多字符。</li><li>mysql 建表时如果不知道该选什么字符集，无脑选 utf8mb4 就行了，你会感谢我的。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>《从根儿上理解 mysql》</p><br><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>原本 A 同学设计这张表的时候非常简单，也有字符串类型的字段，但字段含义决定了肯定不会有奇奇怪怪的字符，用 utf8 很合理，还省空间。</p><p>后来交接给了 B 同学，B 同学在这基础上加过非常多的字段，离职前最后一个需求加的这个名称字段，所幸并没炸雷。最后到了我这里。</p><p>好一个<strong>击鼓传雷</strong>。</p><p>有点东西哦。</p><figure><img src="https://cdn.xiaobaidebug.top/image/images.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><p>那么问题来了。</p><p>这样的一个事故，复盘会一开，会挂 P 几呢？</p><figure><img src="https://cdn.xiaobaidebug.top/image/a6a681ebgy1gp1tujp12gj208c08cmxb.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><p>最近原创更文的阅读量稳步下跌，思前想后，夜里辗转反侧。</p><p>我有个不成熟的请求。</p><figure><img src="https://cdn.xiaobaidebug.top/image/u=2281575747,3550568508&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><p><strong>离开广东好长时间了，好久没人叫我靓仔了。</strong></p><p>大家可以在<strong>评论区</strong>里，叫我一靓仔吗？</p><p>我这么善良质朴的愿望，能被满足吗？</p><p>如果实在叫不出口的话，能帮我点下右下角的<strong>点赞和在看</strong>吗？</p><br><h5 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h5><p><strong>点击</strong>下方名片，关注公众号:【小白 debug】<br><img src="https://cdn.xiaobaidebug.top/1696069689495.png" alt="" loading="lazy"></p><br><p>不满足于在留言区说骚话？</p><p>加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。就<strong>超！开！心！</strong></p><img src="https://cdn.xiaobaidebug.top/image-20220522162616202.png" width="50%" align="center"><figure><img src="https://cdn.xiaobaidebug.top/image/006APoFYly1g5q9gn2jipg308w08wqdi.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>`,141),d={href:"https://mp.weixin.qq.com/s/PP80aD-GQp7VtgyfHj392g",target:"_blank",rel:"noopener noreferrer"},l={href:"https://mp.weixin.qq.com/s/0-YBxU1cSbDdzcZEZjmQYA",target:"_blank",rel:"noopener noreferrer"},u={href:"https://mp.weixin.qq.com/s/YpQGsRyyrGNDu1cOuMy83w",target:"_blank",rel:"noopener noreferrer"};function m(b,f){const e=i("ExternalLinkIcon");return p(),s("div",null,[c,t("ul",null,[t("li",null,[t("a",d,[a("程序员防猝死指南"),n(e)])]),t("li",null,[t("a",l,[a("TCP 粘包 数据包：我只是犯了每个数据包都会犯的错 |硬核图解"),n(e)])]),t("li",null,[t("a",u,[a("动图图解！既然 IP 层会分片，为什么 TCP 层也还要分段？"),n(e)])])])])}const B=o(r,[["render",m],["__file","为什么mysql写数据会丢失数据？.html.vue"]]),A=JSON.parse('{"path":"/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E5%86%99%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE%EF%BC%9F.html","title":"mysql 插入数据会失败，为什么？","lang":"zh-CN","frontmatter":{"description":"mysql 插入数据会失败，为什么？ 那天，我还在外面吃成都六姐的冒菜。 牛肉丸裹上麻酱后，狠狠嘬一口，都要入嘴了。 产品经理突然发来消息。 \\"线上有些用户不能注册了\\" 心想着\\"关我 x 事，又不是我做的模块\\"，放下手机。 不对，那老哥上礼拜刚离职了，想到这里，夹住毛肚的手微微颤抖。 对面继续发：\\"还有些用户不能改名\\" \\"如果用上表情符号的话，问题必现...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E5%86%99%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"mysql 插入数据会失败，为什么？"}],["meta",{"property":"og:description","content":"mysql 插入数据会失败，为什么？ 那天，我还在外面吃成都六姐的冒菜。 牛肉丸裹上麻酱后，狠狠嘬一口，都要入嘴了。 产品经理突然发来消息。 \\"线上有些用户不能注册了\\" 心想着\\"关我 x 事，又不是我做的模块\\"，放下手机。 不对，那老哥上礼拜刚离职了，想到这里，夹住毛肚的手微微颤抖。 对面继续发：\\"还有些用户不能改名\\" \\"如果用上表情符号的话，问题必现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/image/a6a681ebgy1gpfzfr4ikdj20520523yf.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-19T03:57:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"mysql 插入数据会失败，为什么？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-02-19T03:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql 插入数据会失败，为什么？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/image/a6a681ebgy1gpfzfr4ikdj20520523yf.jpg\\",\\"http://cdn.xiaobaidebug.top/image/%E5%BB%BA%E8%A1%A8sql%E8%AF%AD%E5%8F%A5.png\\",\\"https://cdn.xiaobaidebug.top/image/insert%E6%88%90%E5%8A%9Fcase.png\\",\\"https://cdn.xiaobaidebug.top/image/insert%E5%A4%B1%E8%B4%A5case.png\\",\\"https://cdn.xiaobaidebug.top/image/debug%E7%9A%84%E7%BC%96%E7%A0%81.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/unicode%E6%AF%94ascii%E5%A4%9A%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E5%AD%97%E8%8A%82.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F2.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/%E5%AD%97%E7%AC%A6%E5%92%8C%E5%AD%97%E7%AC%A6%E9%9B%86%E7%9A%84%E5%85%B3%E7%B3%BB3.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E5%AD%97%E7%AC%A6%E9%9B%86.png\\",\\"https://cdn.xiaobaidebug.top/image/utf8mb3%E5%92%8Cutf8mb4%E7%9A%84%E5%85%B3%E7%B3%BB5.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/utf8mb4%E5%AD%97%E7%AC%A6%E9%9B%86%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99-20220421210049625.png\\",\\"https://cdn.xiaobaidebug.top/image/%E5%AF%B9%E6%AF%94%E8%A7%84%E5%88%99-%E5%A4%A7%E5%B0%8F%E5%86%99%E4%B8%8D%E6%95%8F%E6%84%9F2.png\\",\\"https://cdn.xiaobaidebug.top/image/%E5%AF%B9%E6%AF%94%E8%A7%84%E5%88%99-%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F.png\\",\\"https://cdn.xiaobaidebug.top/image/%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%862.png\\",\\"https://cdn.xiaobaidebug.top/image/images.jpeg\\",\\"https://cdn.xiaobaidebug.top/image/a6a681ebgy1gp1tujp12gj208c08cmxb.jpg\\",\\"https://cdn.xiaobaidebug.top/image/u=2281575747,3550568508&fm=253&fmt=auto&app=120&f=JPEG.jpeg\\",\\"https://cdn.xiaobaidebug.top/1696069689495.png\\",\\"https://cdn.xiaobaidebug.top/image/006APoFYly1g5q9gn2jipg308w08wqdi.gif\\"],\\"dateModified\\":\\"2024-02-19T03:57:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E5%86%99%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E5%86%99%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"mysql 插入数据会失败，为什么？"}],["meta",{"property":"og:description","content":"mysql 插入数据会失败，为什么？ 那天，我还在外面吃成都六姐的冒菜。 牛肉丸裹上麻酱后，狠狠嘬一口，都要入嘴了。 产品经理突然发来消息。 \\"线上有些用户不能注册了\\" 心想着\\"关我 x 事，又不是我做的模块\\"，放下手机。 不对，那老哥上礼拜刚离职了，想到这里，夹住毛肚的手微微颤抖。 对面继续发：\\"还有些用户不能改名\\" \\"如果用上表情符号的话，问题必现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-19T03:57:35.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-19T03:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql 插入数据会失败，为什么？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-19T03:57:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"复现问题","slug":"复现问题","link":"#复现问题","children":[]},{"level":2,"title":"编码和字符集的关系","slug":"编码和字符集的关系","link":"#编码和字符集的关系","children":[]},{"level":2,"title":"mysql 的字符集","slug":"mysql-的字符集","link":"#mysql-的字符集","children":[{"level":3,"title":"utf8 和 utf8mb4 的区别","slug":"utf8-和-utf8mb4-的区别","link":"#utf8-和-utf8mb4-的区别","children":[]},{"level":3,"title":"那 utf8mb4 对比 utf8mb3 有什么劣势吗？","slug":"那-utf8mb4-对比-utf8mb3-有什么劣势吗","link":"#那-utf8mb4-对比-utf8mb3-有什么劣势吗","children":[]},{"level":3,"title":"如何查看数据库表的字符集","slug":"如何查看数据库表的字符集","link":"#如何查看数据库表的字符集","children":[]}]},{"level":2,"title":"再看报错原因","slug":"再看报错原因","link":"#再看报错原因","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1708315055000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1}]},"readingTime":{"minutes":10.48,"words":3143},"filePathRelative":"中间件/mysql/核心知识点/为什么mysql写数据会丢失数据？.md","localizedDate":"2024年2月19日","autoDesc":true}');export{B as comp,A as data};
