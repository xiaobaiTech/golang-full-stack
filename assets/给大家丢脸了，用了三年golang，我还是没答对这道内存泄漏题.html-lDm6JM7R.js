import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,a as n,d as a,b as t,e as l}from"./app-T_olDrey.js";const i={},u={href:"https://imgchr.com/i/DMGVKJ",target:"_blank",rel:"noopener noreferrer"},r=n("img",{src:"https://s3.ax1x.com/2020/11/20/DMGVKJ.png",alt:"",tabindex:"0",loading:"lazy"},null,-1),d=n("figcaption",null,null,-1),k=l(`<h1 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h1><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;io/ioutil&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;runtime&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	num <span class="token operator">:=</span> <span class="token number">6</span>
	<span class="token keyword">for</span> index <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> index<span class="token operator">++</span> <span class="token punctuation">{</span>
		resp<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">)</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;此时goroutine个数= %d\\n&quot;</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上面这道题在不执行<code>resp.Body.Close()</code>的情况下，泄漏了吗？如果泄漏，泄漏了多少个<code>goroutine</code>?</strong></p><h1 id="怎么答" tabindex="-1"><a class="header-anchor" href="#怎么答"><span>怎么答</span></a></h1><ul><li><strong>不进行<code>resp.Body.Close()</code>，泄漏是一定的</strong>。但是泄漏的<code>goroutine</code>个数就让我迷糊了。由于执行了<strong>6 遍</strong>，每次泄漏一个<strong>读和写 goroutine</strong>，就是<strong>12 个 goroutine</strong>，加上<code>main函数</code>本身也是一个<code>goroutine</code>，所以答案是<strong>13</strong>.</li><li>然而执行程序，发现<strong>答案是 3</strong>，出入有点大，为什么呢？</li></ul><h1 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释</span></a></h1><ul><li>我们直接看源码。<code>golang</code> 的 <code>http</code> 包。</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">--</span> DefaultClient<span class="token punctuation">.</span>Get
<span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">do</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">func</span> <span class="token function">send</span><span class="token punctuation">(</span>ireq <span class="token operator">*</span>Request<span class="token punctuation">,</span> rt RoundTripper<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> resp<span class="token punctuation">,</span> didTimeout<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">transport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deadline<span class="token punctuation">)</span>
<span class="token comment">// 以上代码在 go/1.12.7/libexec/src/net/http/client:174</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">transport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> RoundTripper <span class="token punctuation">{</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>Transport <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span>Transport
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> DefaultTransport
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>说明 <code>http.Get</code> 默认使用 <code>DefaultTransport</code> 管理连接。</li></ul><h4 id="defaulttransport-是干嘛的呢" tabindex="-1"><a class="header-anchor" href="#defaulttransport-是干嘛的呢"><span><code>DefaultTransport</code> 是干嘛的呢？</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// It establishes network connections as needed</span>
<span class="token comment">// and caches them for reuse by subsequent calls.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>DefaultTransport</code> 的作用是根据需要建立网络连接并缓存它们以供后续调用重用。</li></ul><h4 id="那么-defaulttransport-什么时候会建立连接呢" tabindex="-1"><a class="header-anchor" href="#那么-defaulttransport-什么时候会建立连接呢"><span>那么 <code>DefaultTransport</code> 什么时候会建立连接呢？</span></a></h4><p>接着上面的代码堆栈往下翻</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">send</span><span class="token punctuation">(</span>ireq <span class="token operator">*</span>Request<span class="token punctuation">,</span> rt RoundTripper<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span>
<span class="token operator">--</span>resp<span class="token punctuation">,</span> err <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">RoundTrip</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token comment">// 以上代码在 go/1.12.7/libexec/src/net/http/client:250</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">RoundTrip</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">roundTrip</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">getConn</span><span class="token punctuation">(</span>treq <span class="token operator">*</span>transportRequest<span class="token punctuation">,</span> cm connectMethod<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">dialConn</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cm connectMethod<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>persistConn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	<span class="token keyword">go</span> pconn<span class="token punctuation">.</span><span class="token function">readLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 启动一个读goroutine</span>
	<span class="token keyword">go</span> pconn<span class="token punctuation">.</span><span class="token function">writeLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 启动一个写goroutine</span>
	<span class="token keyword">return</span> pconn<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一次建立连接，就会启动一个<code>读goroutine</code>和<code>写goroutine</code>。这就是为什么一次<code>http.Get()</code>会泄漏<code>两个goroutine</code>的来源。</li><li>泄漏的来源知道了，也知道是因为没有执行<code>close</code></li></ul><h4 id="那为什么不执行-close-会泄漏呢" tabindex="-1"><a class="header-anchor" href="#那为什么不执行-close-会泄漏呢"><span>那为什么不执行 <code>close</code> 会泄漏呢？</span></a></h4><ul><li>回到刚刚启动的<code>读goroutine</code> 的 <code>readLoop()</code> 代码里</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>pc <span class="token operator">*</span>persistConn<span class="token punctuation">)</span> <span class="token function">readLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	alive <span class="token operator">:=</span> <span class="token boolean">true</span>
	<span class="token keyword">for</span> alive <span class="token punctuation">{</span>
        <span class="token operator">...</span>
		<span class="token comment">// Before looping back to the top of this function and peeking on</span>
		<span class="token comment">// the bufio.Reader, wait for the caller goroutine to finish</span>
		<span class="token comment">// reading the response body. (or for cancelation or death)</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> bodyEOF <span class="token operator">:=</span> <span class="token operator">&lt;-</span>waitForBodyRead<span class="token punctuation">:</span>
			pc<span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">setReqCanceler</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// before pc might return to idle pool</span>
			alive <span class="token operator">=</span> alive <span class="token operator">&amp;&amp;</span>
				bodyEOF <span class="token operator">&amp;&amp;</span>
				<span class="token operator">!</span>pc<span class="token punctuation">.</span>sawEOF <span class="token operator">&amp;&amp;</span>
				pc<span class="token punctuation">.</span><span class="token function">wroteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
				<span class="token function">tryPutIdleConn</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span>
			<span class="token keyword">if</span> bodyEOF <span class="token punctuation">{</span>
				eofc <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">.</span>Cancel<span class="token punctuation">:</span>
			alive <span class="token operator">=</span> <span class="token boolean">false</span>
			pc<span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">CancelRequest</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			alive <span class="token operator">=</span> <span class="token boolean">false</span>
			pc<span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">cancelRequest</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">,</span> rc<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>pc<span class="token punctuation">.</span>closech<span class="token punctuation">:</span>
			alive <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
        <span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>简单来说<code>readLoop</code>就是一个死循环，只要<code>alive</code>为<code>true</code>，<code>goroutine</code>就会一直存在</li><li><code>select</code> 里是 <code>goroutine</code> <strong>有可能</strong>退出的场景： <ul><li><code>body</code> 被读取完毕或<code>body</code>关闭</li><li><code>request</code> 主动 <code>cancel</code></li><li><code>request</code> 的 <code>context Done</code> 状态 <code>true</code></li><li>当前的 <code>persistConn</code> 关闭</li></ul></li></ul><p>其中第一个 <code>body</code> 被读取完或关闭这个 <code>case</code>:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>alive <span class="token operator">=</span> alive <span class="token operator">&amp;&amp;</span>
    bodyEOF <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>pc<span class="token punctuation">.</span>sawEOF <span class="token operator">&amp;&amp;</span>
    pc<span class="token punctuation">.</span><span class="token function">wroteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token function">tryPutIdleConn</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bodyEOF</code> 来源于到一个通道 <code>waitForBodyRead</code>，这个字段的 <code>true</code> 和 <code>false</code> 直接决定了 <code>alive</code> 变量的值（<code>alive=true</code>那<code>读goroutine</code>继续活着，循环，否则退出<code>goroutine</code>）。</p><h4 id="那么这个通道的值是从哪里过来的呢" tabindex="-1"><a class="header-anchor" href="#那么这个通道的值是从哪里过来的呢"><span>那么这个通道的值是从哪里过来的呢？</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// go/1.12.7/libexec/src/net/http/transport.go: 1758</span>
		body <span class="token operator">:=</span> <span class="token operator">&amp;</span>bodyEOFSignal<span class="token punctuation">{</span>
			body<span class="token punctuation">:</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">,</span>
			earlyCloseFn<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
				waitForBodyRead <span class="token operator">&lt;-</span> <span class="token boolean">false</span>
				<span class="token operator">&lt;-</span>eofc <span class="token comment">// will be closed by deferred call at the end of the function</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>

			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			fn<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
				isEOF <span class="token operator">:=</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF
				waitForBodyRead <span class="token operator">&lt;-</span> isEOF
				<span class="token keyword">if</span> isEOF <span class="token punctuation">{</span>
					<span class="token operator">&lt;-</span>eofc <span class="token comment">// see comment above eofc declaration</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> cerr <span class="token operator">:=</span> pc<span class="token punctuation">.</span><span class="token function">canceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cerr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
						<span class="token keyword">return</span> cerr
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果执行 <code>earlyCloseFn</code> ，<code>waitForBodyRead</code> 通道输入的是 <code>false</code>，<code>alive</code> 也会是 <code>false</code>，那 <code>readLoop()</code> 这个 <code>goroutine</code> 就会退出。</li><li>如果执行 <code>fn</code> ，其中包括正常情况下 <code>body</code> 读完数据抛出 <code>io.EOF</code> 时的 <code>case</code>，<code>waitForBodyRead</code> 通道输入的是 <code>true</code>，那 <code>alive</code> 会是 <code>true</code>，那么 <code>readLoop()</code> 这个 <code>goroutine</code> 就不会退出，同时还顺便执行了 <code>tryPutIdleConn(trace)</code> 。</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// tryPutIdleConn adds pconn to the list of idle persistent connections awaiting</span>
<span class="token comment">// a new request.</span>
<span class="token comment">// If pconn is no longer needed or not in a good state, tryPutIdleConn returns</span>
<span class="token comment">// an error explaining why it wasn&#39;t registered.</span>
<span class="token comment">// tryPutIdleConn does not close pconn. Use putOrCloseIdleConn instead for that.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">tryPutIdleConn</span><span class="token punctuation">(</span>pconn <span class="token operator">*</span>persistConn<span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>tryPutIdleConn</code> 将 <code>pconn</code> 添加到等待新请求的空闲持久连接列表中，也就是之前说的连接会复用。</li></ul><h4 id="那么问题又来了-什么时候会执行这个-fn-和-earlyclosefn-呢" tabindex="-1"><a class="header-anchor" href="#那么问题又来了-什么时候会执行这个-fn-和-earlyclosefn-呢"><span>那么问题又来了，什么时候会执行这个 <code>fn</code> 和 <code>earlyCloseFn</code> 呢？</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>es <span class="token operator">*</span>bodyEOFSignal<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	es<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> es<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> es<span class="token punctuation">.</span>closed <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	es<span class="token punctuation">.</span>closed <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token keyword">if</span> es<span class="token punctuation">.</span>earlyCloseFn <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> es<span class="token punctuation">.</span>rerr <span class="token operator">!=</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
		<span class="token keyword">return</span> es<span class="token punctuation">.</span><span class="token function">earlyCloseFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 关闭时执行 earlyCloseFn</span>
	<span class="token punctuation">}</span>
	err <span class="token operator">:=</span> es<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> es<span class="token punctuation">.</span><span class="token function">condfn</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面这个其实就是我们比较收悉的 <code>resp.Body.Close()</code> ,在里面会执行 <code>earlyCloseFn</code>，也就是此时 <code>readLoop()</code> 里的 <code>waitForBodyRead</code> 通道输入的是 <code>false</code>，<code>alive</code> 也会是 <code>false</code>，那 <code>readLoop()</code> 这个 <code>goroutine</code> 就会退出，<code>goroutine</code> 不会泄露。</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>b<span class="token punctuation">,</span> err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token keyword">func</span> <span class="token function">ReadAll</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">func</span> <span class="token function">readAll</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> capacity <span class="token builtin">int64</span><span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Buffer<span class="token punctuation">)</span> <span class="token function">ReadFrom</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span>


<span class="token comment">// go/1.12.7/libexec/src/bytes/buffer.go:207</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Buffer<span class="token punctuation">)</span> <span class="token function">ReadFrom</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		m<span class="token punctuation">,</span> e <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 看这里，是body在执行read方法</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个<code>read</code>，其实就是 <code>bodyEOFSignal</code> 里的</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>es <span class="token operator">*</span>bodyEOFSignal<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	n<span class="token punctuation">,</span> err <span class="token operator">=</span> es<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
    <span class="token comment">// 这里会有一个io.EOF的报错，意思是读完了</span>
		err <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">condfn</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token punctuation">(</span>es <span class="token operator">*</span>bodyEOFSignal<span class="token punctuation">)</span> <span class="token function">condfn</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> es<span class="token punctuation">.</span>fn <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	err <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token comment">// 这了执行了 fn</span>
	es<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面这个其实就是我们比较收悉的读取 <code>body</code> 里的内容。 <code>ioutil.ReadAll()</code> ,在读完 <code>body</code> 的内容时会执行 <code>fn</code>，也就是此时 <code>readLoop()</code> 里的 <code>waitForBodyRead</code> 通道输入的是 <code>true</code>，<code>alive</code> 也会是 <code>true</code>，那 <code>readLoop()</code> 这个 <code>goroutine</code> 就不会退出，<code>goroutine</code> 会泄露，然后执行 <code>tryPutIdleConn(trace)</code> 把连接放回池子里复用。</li></ul><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h1><ul><li>所以结论呼之欲出了，虽然执行了 <code>6</code> 次循环，而且每次都没有执行 <code>Body.Close()</code> ,就是因为执行了<code>ioutil.ReadAll()</code>把内容都读出来了，连接得以复用，因此只泄漏了一个<code>读goroutine</code>和一个<code>写goroutine</code>，最后加上<code>main goroutine</code>，所以答案就是<code>3个goroutine</code>。</li><li>从另外一个角度说，正常情况下我们的代码都会执行 <code>ioutil.ReadAll()</code>，但如果此时忘了 <code>resp.Body.Close()</code>，确实会导致泄漏。但如果你<strong>调用的域名一直是同一个</strong>的话，那么只会泄漏一个 <code>读goroutine</code> 和一个<code>写goroutine</code>，<strong>这就是为什么代码明明不规范但却看不到明显内存泄漏的原因</strong>。</li><li>那么问题又来了，为什么上面要特意强调是同一个域名呢？改天，回头，以后有空再说吧。</li></ul><h1 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h1>`,38),v={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"},f=n("h5",{id:"如果你想每天学习一个知识点-关注我的【公】【众】【号】【小白-debug】。",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如果你想每天学习一个知识点-关注我的【公】【众】【号】【小白-debug】。"},[n("span",null,"如果你想每天学习一个知识点，关注我的【公】【众】【号】【小白 debug】。")])],-1);function E(h,y){const s=o("ExternalLinkIcon");return p(),c("div",null,[n("figure",null,[n("a",u,[r,a(s)]),d]),k,n("ul",null,[n("li",null,[n("p",null,[n("a",v,[t("golang进阶面试题八股文合集"),a(s)])])]),n("li",null,[n("p",null,[n("a",m,[t("golang基础面试题八股文合集"),a(s)])])]),n("li",null,[n("p",null,[n("a",g,[t("golang常用标准库第三方库大全"),a(s)])])]),n("li",null,[n("p",null,[n("a",b,[t("golang学习路线"),a(s)])])])]),f])}const w=e(i,[["render",E],["__file","给大家丢脸了，用了三年golang，我还是没答对这道内存泄漏题.html.vue"]]),F=JSON.parse('{"path":"/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%BB%99%E5%A4%A7%E5%AE%B6%E4%B8%A2%E8%84%B8%E4%BA%86%EF%BC%8C%E7%94%A8%E4%BA%86%E4%B8%89%E5%B9%B4golang%EF%BC%8C%E6%88%91%E8%BF%98%E6%98%AF%E6%B2%A1%E7%AD%94%E5%AF%B9%E8%BF%99%E9%81%93%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%A2%98.html","title":"给大家丢脸了，用了三年golang，我还是没答对这道内存泄漏题。","lang":"zh-CN","frontmatter":{"title":"给大家丢脸了，用了三年golang，我还是没答对这道内存泄漏题。","date":"2020-11-12T22:57:55.000Z","tags":null,"categories":"golang面试题","description":" 问题 上面这道题在不执行resp.Body.Close()的情况下，泄漏了吗？如果泄漏，泄漏了多少个goroutine? 怎么答 不进行resp.Body.Close()，泄漏是一定的。但是泄漏的goroutine个数就让我迷糊了。由于执行了6 遍，每次泄漏一个读和写 goroutine，就是12 个 goroutine，加上main函数本身也是一个...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%BB%99%E5%A4%A7%E5%AE%B6%E4%B8%A2%E8%84%B8%E4%BA%86%EF%BC%8C%E7%94%A8%E4%BA%86%E4%B8%89%E5%B9%B4golang%EF%BC%8C%E6%88%91%E8%BF%98%E6%98%AF%E6%B2%A1%E7%AD%94%E5%AF%B9%E8%BF%99%E9%81%93%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"给大家丢脸了，用了三年golang，我还是没答对这道内存泄漏题。"}],["meta",{"property":"og:description","content":" 问题 上面这道题在不执行resp.Body.Close()的情况下，泄漏了吗？如果泄漏，泄漏了多少个goroutine? 怎么答 不进行resp.Body.Close()，泄漏是一定的。但是泄漏的goroutine个数就让我迷糊了。由于执行了6 遍，每次泄漏一个读和写 goroutine，就是12 个 goroutine，加上main函数本身也是一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s3.ax1x.com/2020/11/20/DMGVKJ.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T01:37:12.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"给大家丢脸了，用了三年golang，我还是没答对这道内存泄漏题。"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:published_time","content":"2020-11-12T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-28T01:37:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"给大家丢脸了，用了三年golang，我还是没答对这道内存泄漏题。\\",\\"image\\":[\\"https://s3.ax1x.com/2020/11/20/DMGVKJ.png\\"],\\"datePublished\\":\\"2020-11-12T22:57:55.000Z\\",\\"dateModified\\":\\"2024-02-28T01:37:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%BB%99%E5%A4%A7%E5%AE%B6%E4%B8%A2%E8%84%B8%E4%BA%86%EF%BC%8C%E7%94%A8%E4%BA%86%E4%B8%89%E5%B9%B4golang%EF%BC%8C%E6%88%91%E8%BF%98%E6%98%AF%E6%B2%A1%E7%AD%94%E5%AF%B9%E8%BF%99%E9%81%93%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%A2%98.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%BB%99%E5%A4%A7%E5%AE%B6%E4%B8%A2%E8%84%B8%E4%BA%86%EF%BC%8C%E7%94%A8%E4%BA%86%E4%B8%89%E5%B9%B4golang%EF%BC%8C%E6%88%91%E8%BF%98%E6%98%AF%E6%B2%A1%E7%AD%94%E5%AF%B9%E8%BF%99%E9%81%93%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"给大家丢脸了，用了三年golang，我还是没答对这道内存泄漏题。"}],["meta",{"property":"og:description","content":" 问题 上面这道题在不执行resp.Body.Close()的情况下，泄漏了吗？如果泄漏，泄漏了多少个goroutine? 怎么答 不进行resp.Body.Close()，泄漏是一定的。但是泄漏的goroutine个数就让我迷糊了。由于执行了6 遍，每次泄漏一个读和写 goroutine，就是12 个 goroutine，加上main函数本身也是一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T01:37:12.000Z"}],["meta",{"property":"article:published_time","content":"2020-11-12T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-28T01:37:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"给大家丢脸了，用了三年golang，我还是没答对这道内存泄漏题。\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-12T22:57:55.000Z\\",\\"dateModified\\":\\"2024-02-28T01:37:12.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1708315540000,"updatedTime":1709084232000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":2}]},"readingTime":{"minutes":5.49,"words":1648},"filePathRelative":"golang/核心知识点/给大家丢脸了，用了三年golang，我还是没答对这道内存泄漏题.md","localizedDate":"2020年11月12日","autoDesc":true}');export{w as comp,F as data};
