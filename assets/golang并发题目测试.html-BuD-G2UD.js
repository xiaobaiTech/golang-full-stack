import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as n,d as a,e,a as c,o as i,r as l}from"./app-Cw1mDaPr.js";const u={},d={href:"https://colobu.com/2019/04/28/go-concurrency-quizzes/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function b(g,s){const t=l("ExternalLinkIcon");return i(),o("div",null,[s[6]||(s[6]=n("h1",{id:"golang-并发题目测试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang-并发题目测试"},[n("span",null,"golang 并发题目测试")])],-1)),n("p",null,[s[1]||(s[1]=a("题目来源： ")),n("a",d,[s[0]||(s[0]=a("Go并发编程小测验： 你能答对几道题？")),e(t)])]),s[7]||(s[7]=c(`<h2 id="_1-mutex" tabindex="-1"><a class="header-anchor" href="#_1-mutex"><span>1 Mutex</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> mu sync<span class="token punctuation">.</span>Mutex
<span class="token keyword">var</span> chain <span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	chain <span class="token operator">=</span> <span class="token string">&quot;main&quot;</span>
	<span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	chain <span class="token operator">=</span> chain <span class="token operator">+</span> <span class="token string">&quot; --&gt; A&quot;</span>
	<span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	chain <span class="token operator">=</span> chain <span class="token operator">+</span> <span class="token string">&quot; --&gt; B&quot;</span>
	<span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	chain <span class="token operator">=</span> chain <span class="token operator">+</span> <span class="token string">&quot; --&gt; C&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 输出 main --&gt; A --&gt; B --&gt; C</li><li>C: 输出 main</li><li>D: panic</li></ul><h2 id="_2-rwmutex" tabindex="-1"><a class="header-anchor" href="#_2-rwmutex"><span>2 RWMutex</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> mu sync<span class="token punctuation">.</span>RWMutex
<span class="token keyword">var</span> count <span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">go</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	count<span class="token operator">++</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 输出 1</li><li>C: 程序hang住</li><li>D: panic</li></ul><h2 id="_3-waitgroup" tabindex="-1"><a class="header-anchor" href="#_3-waitgroup"><span>3 Waitgroup</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 无输出，正常退出</li><li>C: 程序hang住</li><li>D: panic</li></ul><h2 id="_4-双检查实现单例" tabindex="-1"><a class="header-anchor" href="#_4-双检查实现单例"><span>4 双检查实现单例</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> doublecheck
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	m    sync<span class="token punctuation">.</span>Mutex
	done <span class="token builtin">uint32</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> o<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> o<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		o<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token number">1</span>
		<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 可以编译，正确实现了单例</li><li>C: 可以编译，有并发问题，f函数可能会被执行多次</li><li>D: 可以编译，但是程序运行会panic</li></ul><h2 id="_5-mutex" tabindex="-1"><a class="header-anchor" href="#_5-mutex"><span>5 Mutex</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> MyMutex <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	count <span class="token builtin">int</span>
	sync<span class="token punctuation">.</span>Mutex
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> mu MyMutex
	mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> mu2 <span class="token operator">=</span> mu
	mu<span class="token punctuation">.</span>count<span class="token operator">++</span>
	mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mu2<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mu2<span class="token punctuation">.</span>count<span class="token operator">++</span>
	mu2<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>mu<span class="token punctuation">.</span>count<span class="token punctuation">,</span> mu2<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 输出 1, 1</li><li>C: 输出 1, 2</li><li>D: panic</li></ul><h2 id="_6-pool" tabindex="-1"><a class="header-anchor" href="#_6-pool"><span>6 Pool</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bytes&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;runtime&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">var</span> pool <span class="token operator">=</span> sync<span class="token punctuation">.</span>Pool<span class="token punctuation">{</span>New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token comment">// 256MiB</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token punctuation">{</span>
				<span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 1KiB</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> stats runtime<span class="token punctuation">.</span>MemStats
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		runtime<span class="token punctuation">.</span><span class="token function">ReadMemStats</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stats<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Cycle %d: %dB\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> stats<span class="token punctuation">.</span>Alloc<span class="token punctuation">)</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	b <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">Grow</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>
	pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 可以编译，运行时正常，内存稳定</li><li>C: 可以编译，运行时内存可能暴涨</li><li>D: 可以编译，运行时内存先暴涨，但是过一会会回收掉</li></ul><h2 id="_7-channel" tabindex="-1"><a class="header-anchor" href="#_7-channel"><span>7 channel</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;runtime&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ch <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		ch <span class="token operator">&lt;-</span> <span class="token number">1</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token operator">&lt;-</span>ch
	<span class="token punctuation">}</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
	c <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token keyword">range</span> c <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;#goroutines: %d\\n&quot;</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 一段时间后总是输出 <code>#goroutines: 1</code></li><li>C: 一段时间后总是输出 <code>#goroutines: 2</code></li><li>D: panic</li></ul><h2 id="_8-channel" tabindex="-1"><a class="header-anchor" href="#_8-channel"><span>8 channel</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span>
	<span class="token keyword">var</span> count <span class="token builtin">int</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ch <span class="token operator">&lt;-</span> <span class="token number">1</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		count<span class="token operator">++</span>
		<span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>ch
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 输出 1</li><li>C: 输出 0</li><li>D: panic</li></ul><h2 id="_9-map" tabindex="-1"><a class="header-anchor" href="#_9-map"><span>9 Map</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;sync&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> m sync<span class="token punctuation">.</span>Map
	m<span class="token punctuation">.</span><span class="token function">LoadOrStore</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	m<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 输出 1</li><li>C: 输出 0</li><li>D: panic</li></ul><h2 id="_10-happens-before" tabindex="-1"><a class="header-anchor" href="#_10-happens-before"><span>10 happens before</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> a <span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token operator">&lt;-</span>c
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">go</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c <span class="token operator">&lt;-</span> <span class="token number">0</span>
	<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A: 不能编译</li><li>B: 输出 1</li><li>C: 输出 0</li><li>D: panic</li></ul><h1 id="答案" tabindex="-1"><a class="header-anchor" href="#答案"><span>答案</span></a></h1><h2 id="_1-d" tabindex="-1"><a class="header-anchor" href="#_1-d"><span>1. D</span></a></h2><p>会产生死锁<code>panic</code>，因为<code>Mutex</code> 是互斥锁。</p><h2 id="_2-d" tabindex="-1"><a class="header-anchor" href="#_2-d"><span>2. D</span></a></h2><p>会产生死锁<code>panic</code>，根据<code>sync/rwmutex.go</code> 中注释可以知道，读写锁当有一个协程在等待写锁时，其他协程是不能获得读锁的，而在<code>A</code>和<code>C</code>中同一个调用链中间需要让出读锁，让写锁优先获取，而<code>A</code>的读锁又要求<code>C</code>调用完成，因此死锁。</p><h2 id="_3-d" tabindex="-1"><a class="header-anchor" href="#_3-d"><span>3. D</span></a></h2><p><code>WaitGroup</code> 在调用 <code>Wait</code> 之后是不能再调用 <code>Add</code> 方法的。</p><h2 id="_4-c" tabindex="-1"><a class="header-anchor" href="#_4-c"><span>4. C</span></a></h2><p>在多核CPU中，因为CPU缓存会导致多个核心中变量值不同步。</p><h2 id="_5-d" tabindex="-1"><a class="header-anchor" href="#_5-d"><span>5. D</span></a></h2><p>加锁后复制变量，会将锁的状态也复制，所以<code>mu1</code> 其实是已经加锁状态，再加锁会死锁。</p><h2 id="_6-c" tabindex="-1"><a class="header-anchor" href="#_6-c"><span>6. C</span></a></h2><p>个人理解，在单核CPU中，内存可能会稳定在<code>256MB</code>，如果是多核可能会暴涨。</p><h2 id="_7-c" tabindex="-1"><a class="header-anchor" href="#_7-c"><span>7. C</span></a></h2><p>因为 <code>ch</code> 未初始化，写和读都会阻塞，之后被第一个协程重新赋值，导致写的<code>ch</code> 都阻塞。</p><h2 id="_8-d" tabindex="-1"><a class="header-anchor" href="#_8-d"><span>8. D</span></a></h2><p><code>ch</code> 未有被初始化，关闭时会报错。</p><h2 id="_9-a" tabindex="-1"><a class="header-anchor" href="#_9-a"><span>9. A</span></a></h2><p><code>sync.Map</code> 没有 <code>Len</code> 方法。</p><h2 id="_10-b" tabindex="-1"><a class="header-anchor" href="#_10-b"><span>10. B</span></a></h2><p><code>c &lt;- 0</code> 会阻塞依赖于 <code>f()</code> 的执行。</p><h2 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章"><span>相关文章</span></a></h2>`,52)),n("ul",null,[n("li",null,[n("p",null,[n("a",r,[s[2]||(s[2]=a("golang进阶面试题八股文合集")),e(t)])])]),n("li",null,[n("p",null,[n("a",k,[s[3]||(s[3]=a("golang基础面试题八股文合集")),e(t)])])]),n("li",null,[n("p",null,[n("a",v,[s[4]||(s[4]=a("golang常用标准库第三方库大全")),e(t)])])]),n("li",null,[n("p",null,[n("a",m,[s[5]||(s[5]=a("golang学习路线")),e(t)])])])])])}const y=p(u,[["render",b],["__file","golang并发题目测试.html.vue"]]),w=JSON.parse('{"path":"/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E5%B9%B6%E5%8F%91%E9%A2%98%E7%9B%AE%E6%B5%8B%E8%AF%95.html","title":"golang 并发题目测试","lang":"zh-CN","frontmatter":{"description":"golang 并发题目测试 题目来源： Go并发编程小测验： 你能答对几道题？ 1 Mutex A: 不能编译 B: 输出 main --> A --> B --> C C: 输出 main D: panic 2 RWMutex A: 不能编译 B: 输出 1 C: 程序hang住 D: panic 3 Waitgroup A: 不能编译 B: 无输出...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E5%B9%B6%E5%8F%91%E9%A2%98%E7%9B%AE%E6%B5%8B%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"golang 并发题目测试"}],["meta",{"property":"og:description","content":"golang 并发题目测试 题目来源： Go并发编程小测验： 你能答对几道题？ 1 Mutex A: 不能编译 B: 输出 main --> A --> B --> C C: 输出 main D: panic 2 RWMutex A: 不能编译 B: 输出 1 C: 程序hang住 D: panic 3 Waitgroup A: 不能编译 B: 无输出..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-16T02:56:05.000Z"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-03-16T02:56:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"golang 并发题目测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-16T02:56:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E5%B9%B6%E5%8F%91%E9%A2%98%E7%9B%AE%E6%B5%8B%E8%AF%95.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E5%B9%B6%E5%8F%91%E9%A2%98%E7%9B%AE%E6%B5%8B%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"golang 并发题目测试"}],["meta",{"property":"og:description","content":"golang 并发题目测试 题目来源： Go并发编程小测验： 你能答对几道题？ 1 Mutex A: 不能编译 B: 输出 main --> A --> B --> C C: 输出 main D: panic 2 RWMutex A: 不能编译 B: 输出 1 C: 程序hang住 D: panic 3 Waitgroup A: 不能编译 B: 无输出..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-16T02:56:05.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-16T02:56:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"golang 并发题目测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-16T02:56:05.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1 Mutex","slug":"_1-mutex","link":"#_1-mutex","children":[]},{"level":2,"title":"2 RWMutex","slug":"_2-rwmutex","link":"#_2-rwmutex","children":[]},{"level":2,"title":"3 Waitgroup","slug":"_3-waitgroup","link":"#_3-waitgroup","children":[]},{"level":2,"title":"4 双检查实现单例","slug":"_4-双检查实现单例","link":"#_4-双检查实现单例","children":[]},{"level":2,"title":"5 Mutex","slug":"_5-mutex","link":"#_5-mutex","children":[]},{"level":2,"title":"6 Pool","slug":"_6-pool","link":"#_6-pool","children":[]},{"level":2,"title":"7 channel","slug":"_7-channel","link":"#_7-channel","children":[]},{"level":2,"title":"8 channel","slug":"_8-channel","link":"#_8-channel","children":[]},{"level":2,"title":"9 Map","slug":"_9-map","link":"#_9-map","children":[]},{"level":2,"title":"10 happens before","slug":"_10-happens-before","link":"#_10-happens-before","children":[]},{"level":2,"title":"1. D","slug":"_1-d","link":"#_1-d","children":[]},{"level":2,"title":"2. D","slug":"_2-d","link":"#_2-d","children":[]},{"level":2,"title":"3. D","slug":"_3-d","link":"#_3-d","children":[]},{"level":2,"title":"4. C","slug":"_4-c","link":"#_4-c","children":[]},{"level":2,"title":"5. D","slug":"_5-d","link":"#_5-d","children":[]},{"level":2,"title":"6. C","slug":"_6-c","link":"#_6-c","children":[]},{"level":2,"title":"7. C","slug":"_7-c","link":"#_7-c","children":[]},{"level":2,"title":"8. D","slug":"_8-d","link":"#_8-d","children":[]},{"level":2,"title":"9. A","slug":"_9-a","link":"#_9-a","children":[]},{"level":2,"title":"10. B","slug":"_10-b","link":"#_10-b","children":[]},{"level":2,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"git":{"createdTime":1710132137000,"updatedTime":1710557765000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":2}]},"readingTime":{"minutes":3.55,"words":1064},"filePathRelative":"golang/核心知识点/golang并发题目测试.md","localizedDate":"2024年3月11日","autoDesc":true}');export{y as comp,w as data};
