import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,a as n,b as s,d as t,e as i}from"./app-D4PDyLmr.js";const l={},r=i(`<h1 id="写出以下逻辑-要求每秒钟调用一次proc并保证程序不退出" tabindex="-1"><a class="header-anchor" href="#写出以下逻辑-要求每秒钟调用一次proc并保证程序不退出"><span>写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出?</span></a></h1><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1 在这里需要你写算法</span>
        <span class="token comment">// 2 要求每秒钟调用一次proc函数</span>
        <span class="token comment">// 3 要求程序不能退出</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">proc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong></p><p>题目主要考察了两个知识点：</p><ol><li>定时执行执行任务</li><li>捕获 panic 错误</li></ol><p>题目中要求每秒钟执行一次，首先想到的就是 <code>time.Ticker</code>对象，该函数可每秒钟往<code>chan</code>中放一个<code>Time</code>,正好符合我们的要求。</p><p>在 <code>golang</code> 中捕获 <code>panic</code> 一般会用到 <code>recover()</code> 函数。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;time&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 1 在这里需要你写算法</span>
		<span class="token comment">// 2 要求每秒钟调用一次proc函数</span>
		<span class="token comment">// 3 要求程序不能退出</span>

		t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			<span class="token keyword">select</span> <span class="token punctuation">{</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
				<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
							fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token function">proc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">proc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章"><span>相关文章</span></a></h2>`,9),u={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function E(v,g){const a=o("ExternalLinkIcon");return p(),c("div",null,[r,n("ul",null,[n("li",null,[n("p",null,[n("a",u,[s("golang进阶面试题八股文合集"),t(a)])])]),n("li",null,[n("p",null,[n("a",d,[s("golang基础面试题八股文合集"),t(a)])])]),n("li",null,[n("p",null,[n("a",k,[s("golang常用标准库第三方库大全"),t(a)])])]),n("li",null,[n("p",null,[n("a",m,[s("golang学习路线"),t(a)])])])])])}const b=e(l,[["render",E],["__file","写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出.html.vue"]]),h=JSON.parse('{"path":"/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%86%99%E5%87%BA%E4%BB%A5%E4%B8%8B%E9%80%BB%E8%BE%91%EF%BC%8C%E8%A6%81%E6%B1%82%E6%AF%8F%E7%A7%92%E9%92%9F%E8%B0%83%E7%94%A8%E4%B8%80%E6%AC%A1proc%E5%B9%B6%E4%BF%9D%E8%AF%81%E7%A8%8B%E5%BA%8F%E4%B8%8D%E9%80%80%E5%87%BA.html","title":"写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出?","lang":"zh-CN","frontmatter":{"description":"写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出? 解析 题目主要考察了两个知识点： 定时执行执行任务 捕获 panic 错误 题目中要求每秒钟执行一次，首先想到的就是 time.Ticker对象，该函数可每秒钟往chan中放一个Time,正好符合我们的要求。 在 golang 中捕获 panic 一般会用到 recover() 函数。 相关文...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%86%99%E5%87%BA%E4%BB%A5%E4%B8%8B%E9%80%BB%E8%BE%91%EF%BC%8C%E8%A6%81%E6%B1%82%E6%AF%8F%E7%A7%92%E9%92%9F%E8%B0%83%E7%94%A8%E4%B8%80%E6%AC%A1proc%E5%B9%B6%E4%BF%9D%E8%AF%81%E7%A8%8B%E5%BA%8F%E4%B8%8D%E9%80%80%E5%87%BA.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出?"}],["meta",{"property":"og:description","content":"写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出? 解析 题目主要考察了两个知识点： 定时执行执行任务 捕获 panic 错误 题目中要求每秒钟执行一次，首先想到的就是 time.Ticker对象，该函数可每秒钟往chan中放一个Time,正好符合我们的要求。 在 golang 中捕获 panic 一般会用到 recover() 函数。 相关文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-16T02:56:05.000Z"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-03-16T02:56:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出?\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-16T02:56:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%86%99%E5%87%BA%E4%BB%A5%E4%B8%8B%E9%80%BB%E8%BE%91%EF%BC%8C%E8%A6%81%E6%B1%82%E6%AF%8F%E7%A7%92%E9%92%9F%E8%B0%83%E7%94%A8%E4%B8%80%E6%AC%A1proc%E5%B9%B6%E4%BF%9D%E8%AF%81%E7%A8%8B%E5%BA%8F%E4%B8%8D%E9%80%80%E5%87%BA.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%86%99%E5%87%BA%E4%BB%A5%E4%B8%8B%E9%80%BB%E8%BE%91%EF%BC%8C%E8%A6%81%E6%B1%82%E6%AF%8F%E7%A7%92%E9%92%9F%E8%B0%83%E7%94%A8%E4%B8%80%E6%AC%A1proc%E5%B9%B6%E4%BF%9D%E8%AF%81%E7%A8%8B%E5%BA%8F%E4%B8%8D%E9%80%80%E5%87%BA.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出?"}],["meta",{"property":"og:description","content":"写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出? 解析 题目主要考察了两个知识点： 定时执行执行任务 捕获 panic 错误 题目中要求每秒钟执行一次，首先想到的就是 time.Ticker对象，该函数可每秒钟往chan中放一个Time,正好符合我们的要求。 在 golang 中捕获 panic 一般会用到 recover() 函数。 相关文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-16T02:56:05.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-16T02:56:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出?\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-16T02:56:05.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"git":{"createdTime":1710132137000,"updatedTime":1710557765000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":2}]},"readingTime":{"minutes":1.12,"words":337},"filePathRelative":"golang/核心知识点/写出以下逻辑，要求每秒钟调用一次proc并保证程序不退出.md","localizedDate":"2024年3月11日","autoDesc":true}');export{b as comp,h as data};
