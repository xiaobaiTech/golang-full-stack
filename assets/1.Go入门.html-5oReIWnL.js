import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c as i,a as n,b as e,d as s,e as t}from"./app-Bbeg9dwX.js";const c={},r=t('<h1 id="go-入门面试题" tabindex="-1"><a class="header-anchor" href="#go-入门面试题"><span>Go 入门面试题</span></a></h1><h2 id="与其他语言相比-使用-go-有什么好处" tabindex="-1"><a class="header-anchor" href="#与其他语言相比-使用-go-有什么好处"><span>与其他语言相比，使用 Go 有什么好处？</span></a></h2><ul><li>与其他作为学术实验开始的语言不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的生活更轻松。</li><li>Golang 针对并发进行了优化，并且在规模上运行良好。</li><li>由于单一的标准代码格式，Golang 通常被认为比其他语言更具可读性。</li><li>自动垃圾收集明显比 Java 或 Python 更有效，因为它与程序同时执行。</li></ul><h2 id="golang-使用什么数据类型" tabindex="-1"><a class="header-anchor" href="#golang-使用什么数据类型"><span>Golang 使用什么数据类型？</span></a></h2><p>Golang 使用以下类型：</p><ul><li>bool</li><li>int/int64</li><li>string</li><li>array</li><li>slice</li><li>struct</li><li>pointer</li><li>function</li><li>interface</li><li>map</li><li>channel</li></ul><h2 id="golang开发新手常犯的50个错误" tabindex="-1"><a class="header-anchor" href="#golang开发新手常犯的50个错误"><span>Golang开发新手常犯的50个错误</span></a></h2>',7),u={href:"https://blog.csdn.net/gezhonglei2007/article/details/52237582",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="下列代码是否会触发异常" tabindex="-1"><a class="header-anchor" href="#下列代码是否会触发异常"><span>下列代码是否会触发异常？</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test59</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    intChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    stringChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    intChan <span class="token operator">&lt;-</span> <span class="token number">1</span>
    stringChan <span class="token operator">&lt;-</span> <span class="token string">&quot;hello&quot;</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> value <span class="token operator">:=</span> <span class="token operator">&lt;-</span>intChan<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">case</span> value <span class="token operator">:=</span> <span class="token operator">&lt;-</span>stringChan<span class="token punctuation">:</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案</p><blockquote><p>不一定，当两个chan同时有值时，select 会随机选择一个可用通道做收发操作</p></blockquote><h2 id="关于channel的特性-下面说法正确的是" tabindex="-1"><a class="header-anchor" href="#关于channel的特性-下面说法正确的是"><span>关于channel的特性，下面说法正确的是？</span></a></h2><p>A. 给一个 nil channel 发送数据，造成永远阻塞</p><p>B. 从一个 nil channel 接收数据，造成永远阻塞</p><p>C. 给一个已经关闭的 channel 发送数据，引起 panic</p><p>D. 从一个已经关闭的 channel 接收数据，如果缓冲区中为空，则返回一个零值</p><p>答案</p><blockquote><p>A B C D</p></blockquote><h2 id="下列代码有什么问题" tabindex="-1"><a class="header-anchor" href="#下列代码有什么问题"><span>下列代码有什么问题？</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">123</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>j<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案</p><blockquote><p>Go语言中，常量无法寻址, 是不能进行取指针操作的</p></blockquote><h2 id="下列代码输出什么" tabindex="-1"><a class="header-anchor" href="#下列代码输出什么"><span>下列代码输出什么？</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test62</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> x <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案</p><blockquote><p>012</p><p>range 一个返回值时，这个值是下标，两个值时，第一个是下标，第二个是值，当 x 为 map时，第一个是key，第二个是value</p></blockquote><h2 id="关于无缓冲和有冲突的channel-下面说法正确的是" tabindex="-1"><a class="header-anchor" href="#关于无缓冲和有冲突的channel-下面说法正确的是"><span>关于无缓冲和有冲突的channel，下面说法正确的是？</span></a></h2><p>A. 无缓冲的channel是默认的缓冲为1的channel；</p><p>B. 无缓冲的channel和有缓冲的channel都是同步的；</p><p>C. 无缓冲的channel和有缓冲的channel都是非同步的；</p><p>D. 无缓冲的channel是同步的，而有缓冲的channel是非同步的；</p><p>答案</p><blockquote><p>D</p></blockquote><h2 id="下列代码输出什么-1" tabindex="-1"><a class="header-anchor" href="#下列代码输出什么-1"><span>下列代码输出什么？</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Foo</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;empty interface&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;non-empty interface&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">Test64</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token function">Foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案</p><blockquote><p>non-empty interface</p><p>接口除了有静态类型，还有动态类型和动态值，<br> 当且仅当动态值和动态类型都为 nil 时，接口类型值才为 nil。<br> 这里的 x 的动态类型是 *int，所以 x 不为 nil</p></blockquote><h2 id="关于select机制-下面说法正确的是" tabindex="-1"><a class="header-anchor" href="#关于select机制-下面说法正确的是"><span>关于select机制，下面说法正确的是?</span></a></h2><p>A. select机制用来处理异步IO问题；</p><p>B. select机制最大的一条限制就是每个case语句里必须是一个IO操作；</p><p>C. golang在语言级别支持select关键字；</p><p>D. select关键字的用法与switch语句非常类似，后面要带判断条件；</p><p>答案</p><blockquote><p>A B C</p></blockquote><h2 id="go-程序中的包是什么" tabindex="-1"><a class="header-anchor" href="#go-程序中的包是什么"><span>Go 程序中的包是什么？</span></a></h2><p>包(pkg)是 Go 工作区中包含 Go 源文件或其他包的目录。源文件中的每个函数、变量和类型都存储在链接包中。每个 Go 源文件都属于一个包，该包在文件顶部使用以下命令声明：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> <span class="token operator">&lt;</span>packagename<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以使用以下方法导入和导出包以重用导出的函数或类型：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token operator">&lt;</span>packagename<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Golang 的标准包是 fmt，其中包含格式化和打印功能，如 Println().</p><h2 id="关于字符串拼接-下列正确的是" tabindex="-1"><a class="header-anchor" href="#关于字符串拼接-下列正确的是"><span>关于字符串拼接,下列正确的是?</span></a></h2><p>A. str := &#39;abc&#39; + &#39;123&#39;</p><p>B. str := &quot;abc&quot; + &quot;123&quot;</p><p>C. str ：= &#39;123&#39; + &quot;abc&quot;</p><p>D. fmt.Sprintf(&quot;abc%d&quot;, 123)</p><p>答案</p><blockquote><p>B D 双引号用来表示字符串 string，其实质是一个 byte 类型的数组，单引号表示 rune 类型。</p></blockquote><h2 id="连nil切片和空切片一不一样都不清楚-那bat面试官只好让你回去等通知了。" tabindex="-1"><a class="header-anchor" href="#连nil切片和空切片一不一样都不清楚-那bat面试官只好让你回去等通知了。"><span>连nil切片和空切片一不一样都不清楚？那BAT面试官只好让你回去等通知了。</span></a></h2>`,51),g={href:"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%BF%9Enil%E5%88%87%E7%89%87%E5%92%8C%E7%A9%BA%E5%88%87%E7%89%87%E4%B8%80%E4%B8%8D%E4%B8%80%E6%A0%B7%E9%83%BD%E4%B8%8D%E6%B8%85%E6%A5%9A%EF%BC%9F%E9%82%A3BAT%E9%9D%A2%E8%AF%95%E5%AE%98%E5%8F%AA%E5%A5%BD%E8%AE%A9%E4%BD%A0%E5%9B%9E%E5%8E%BB%E7%AD%89%E9%80%9A%E7%9F%A5%E4%BA%86%E3%80%82.html",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"golang面试题-字符串转成byte数组-会发生内存拷贝吗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang面试题-字符串转成byte数组-会发生内存拷贝吗"},[n("span",null,"golang面试题：字符串转成byte数组，会发生内存拷贝吗？")])],-1),k={href:"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%88%90byte%E6%95%B0%E7%BB%84%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%94%9F%E5%86%85%E5%AD%98%E6%8B%B7%E8%B4%9D%E5%90%97%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"golang面试题-翻转含有中文、数字、英文字母的字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang面试题-翻转含有中文、数字、英文字母的字符串"},[n("span",null,"golang面试题：翻转含有中文、数字、英文字母的字符串")])],-1),m={href:"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E7%BF%BB%E8%BD%AC%E5%90%AB%E6%9C%89%E4%B8%AD%E6%96%87%E3%80%81%E6%95%B0%E5%AD%97%E3%80%81%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.html",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"golang面试题-拷贝大切片一定比小切片代价大吗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang面试题-拷贝大切片一定比小切片代价大吗"},[n("span",null,"golang面试题：拷贝大切片一定比小切片代价大吗？")])],-1),b={href:"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E6%8B%B7%E8%B4%9D%E5%A4%A7%E5%88%87%E7%89%87%E4%B8%80%E5%AE%9A%E6%AF%94%E5%B0%8F%E5%88%87%E7%89%87%E4%BB%A3%E4%BB%B7%E5%A4%A7%E5%90%97%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},A=n("h2",{id:"golang面试题-json包变量不加tag会怎么样",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang面试题-json包变量不加tag会怎么样"},[n("span",null,"golang面试题：json包变量不加tag会怎么样？")])],-1),B={href:"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Ajson%E5%8C%85%E5%8F%98%E9%87%8F%E4%B8%8D%E5%8A%A0tag%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"golang面试题-reflect-反射包-如何获取字段tag-为什么json包不能导出私有变量的tag",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#golang面试题-reflect-反射包-如何获取字段tag-为什么json包不能导出私有变量的tag"},[n("span",null,"golang面试题：reflect（反射包）如何获取字段tag？为什么json包不能导出私有变量的tag？")])],-1),F={href:"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%20%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Areflect%EF%BC%88%E5%8F%8D%E5%B0%84%E5%8C%85%EF%BC%89%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%AD%97%E6%AE%B5%20tag%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%20json%20%E5%8C%85%E4%B8%8D%E8%83%BD%E5%AF%BC%E5%87%BA%E7%A7%81%E6%9C%89%E5%8F%98%E9%87%8F%E7%9A%84%20tag%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"昨天那个在for循环里append元素的同事-今天还在么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#昨天那个在for循环里append元素的同事-今天还在么"},[n("span",null,"昨天那个在for循环里append元素的同事，今天还在么？")])],-1),y={href:"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%98%A8%E5%A4%A9%E9%82%A3%E4%B8%AA%E5%9C%A8for%E5%BE%AA%E7%8E%AF%E9%87%8Cappend%E5%85%83%E7%B4%A0%E7%9A%84%E5%90%8C%E4%BA%8B%EF%BC%8C%E4%BB%8A%E5%A4%A9%E8%BF%98%E5%9C%A8%E4%B9%88%EF%BC%9F.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="go-struct能不能比较" tabindex="-1"><a class="header-anchor" href="#go-struct能不能比较"><span>go struct能不能比较</span></a></h2><ul><li>相同struct类型的可以比较</li><li>不同struct类型的不可以比较,编译都不过，类型不匹配</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>package main
import &quot;fmt&quot;
func main() {
    type A struct {
        a int
    }
    type B struct {
        a int
    }
    a := A{1}
    //b := A{1}
    b := B{1}
    if a == b {
        fmt.Println(&quot;a == b&quot;)
    }else{
        fmt.Println(&quot;a != b&quot;)
    }
} 
// output
// command-line-arguments [command-line-arguments.test]
// ./.go:14:7: invalid operation: a == b (mismatched types A and B) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-支持什么形式的类型转换-将整数转换为浮点数。" tabindex="-1"><a class="header-anchor" href="#go-支持什么形式的类型转换-将整数转换为浮点数。"><span>Go 支持什么形式的类型转换？将整数转换为浮点数。</span></a></h2><p>Go 支持显式类型转换以满足其严格的类型要求。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>i <span class="token operator">:=</span> <span class="token number">55</span> <span class="token comment">//int</span>

j <span class="token operator">:=</span> <span class="token number">67.8</span> <span class="token comment">//float64</span>

sum <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token comment">//j is converted to int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="log包线程安全吗" tabindex="-1"><a class="header-anchor" href="#log包线程安全吗"><span>Log包线程安全吗？</span></a></h2><p>Golang的标准库提供了log的机制，但是该模块的功能较为简单（看似简单，其实他有他的设计思路）。在输出的位置做了线程安全的保护。</p><h2 id="goroutine和线程的区别" tabindex="-1"><a class="header-anchor" href="#goroutine和线程的区别"><span>Goroutine和线程的区别?</span></a></h2><p>从调度上看，goroutine的调度开销远远小于线程调度开销。</p><p>OS的线程由OS内核调度，每隔几毫秒，一个硬件时钟中断发到CPU，CPU调用一个调度器内核函数。这个函数暂停当前正在运行的线程，把他的寄存器信息保存到内存中，查看线程列表并决定接下来运行哪一个线程，再从内存中恢复线程的注册表信息，最后继续执行选中的线程。这种线程切换需要一个完整的上下文切换：即保存一个线程的状态到内存，再恢复另外一个线程的状态，最后更新调度器的数据结构。某种意义上，这种操作还是很慢的。</p><p>Go运行的时候包涵一个自己的调度器，这个调度器使用一个称为一个M:N调度技术，m个goroutine到n个os线程（可以用GOMAXPROCS来控制n的数量），Go的调度器不是由硬件时钟来定期触发的，而是由特定的go语言结构来触发的，他不需要切换到内核语境，所以调度一个goroutine比调度一个线程的成本低很多。</p><p>从栈空间上，goroutine的栈空间更加动态灵活。</p><p>每个OS的线程都有一个固定大小的栈内存，通常是2MB，栈内存用于保存在其他函数调用期间哪些正在执行或者临时暂停的函数的局部变量。这个固定的栈大小，如果对于goroutine来说，可能是一种巨大的浪费。作为对比goroutine在生命周期开始只有一个很小的栈，典型情况是2KB, 在go程序中，一次创建十万左右的goroutine也不罕见（2KB*100,000=200MB）。而且goroutine的栈不是固定大小，它可以按需增大和缩小，最大限制可以到1GB。</p><p>goroutine没有一个特定的标识。</p><p>在大部分支持多线程的操作系统和编程语言中，线程有一个独特的标识，通常是一个整数或者指针，这个特性可以让我们构建一个线程的局部存储，本质是一个全局的map，以线程的标识作为键，这样每个线程可以独立使用这个map存储和获取值，不受其他线程干扰。</p><p>goroutine中没有可供程序员访问的标识，原因是一种纯函数的理念，不希望滥用线程局部存储导致一个不健康的超距作用，即函数的行为不仅取决于它的参数，还取决于运行它的线程标识。</p><h2 id="相关推荐" tabindex="-1"><a class="header-anchor" href="#相关推荐"><span>相关推荐</span></a></h2>`,18),G={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function q(j,w){const a=l("ExternalLinkIcon");return p(),i("div",null,[r,n("p",null,[n("a",u,[e("https://blog.csdn.net/gezhonglei2007/article/details/52237582"),s(a)])]),d,n("p",null,[n("a",g,[e("答案"),s(a)])]),h,n("p",null,[n("a",k,[e("答案"),s(a)])]),E,n("p",null,[n("a",m,[e("答案"),s(a)])]),v,n("p",null,[n("a",b,[e("答案"),s(a)])]),A,n("p",null,[n("a",B,[e("答案"),s(a)])]),f,n("p",null,[n("a",F,[e("答案"),s(a)])]),_,n("p",null,[n("a",y,[e("答案"),s(a)])]),x,n("ul",null,[n("li",null,[n("p",null,[n("a",G,[e("golang进阶面试题八股文合集"),s(a)])])]),n("li",null,[n("p",null,[n("a",C,[e("golang常用标准库第三方库大全"),s(a)])])]),n("li",null,[n("p",null,[n("a",D,[e("golang学习路线"),s(a)])])])])])}const O=o(c,[["render",q],["__file","1.Go入门.html.vue"]]),N=JSON.parse('{"path":"/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html","title":"Go 入门面试题","lang":"zh-CN","frontmatter":{"description":"Go 入门面试题 与其他语言相比，使用 Go 有什么好处？ 与其他作为学术实验开始的语言不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的生活更轻松。 Golang 针对并发进行了优化，并且在规模上运行良好。 由于单一的标准代码格式，Golang 通常被认为比其他语言更具可读性。 自动垃圾收集明显比 Java 或 Python 更有效，...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"Go 入门面试题"}],["meta",{"property":"og:description","content":"Go 入门面试题 与其他语言相比，使用 Go 有什么好处？ 与其他作为学术实验开始的语言不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的生活更轻松。 Golang 针对并发进行了优化，并且在规模上运行良好。 由于单一的标准代码格式，Golang 通常被认为比其他语言更具可读性。 自动垃圾收集明显比 Java 或 Python 更有效，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T02:35:31.000Z"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-02-28T02:35:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 入门面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-28T02:35:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"Go 入门面试题"}],["meta",{"property":"og:description","content":"Go 入门面试题 与其他语言相比，使用 Go 有什么好处？ 与其他作为学术实验开始的语言不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的生活更轻松。 Golang 针对并发进行了优化，并且在规模上运行良好。 由于单一的标准代码格式，Golang 通常被认为比其他语言更具可读性。 自动垃圾收集明显比 Java 或 Python 更有效，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T02:35:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-28T02:35:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 入门面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-28T02:35:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"与其他语言相比，使用 Go 有什么好处？","slug":"与其他语言相比-使用-go-有什么好处","link":"#与其他语言相比-使用-go-有什么好处","children":[]},{"level":2,"title":"Golang 使用什么数据类型？","slug":"golang-使用什么数据类型","link":"#golang-使用什么数据类型","children":[]},{"level":2,"title":"Golang开发新手常犯的50个错误","slug":"golang开发新手常犯的50个错误","link":"#golang开发新手常犯的50个错误","children":[]},{"level":2,"title":"下列代码是否会触发异常？","slug":"下列代码是否会触发异常","link":"#下列代码是否会触发异常","children":[]},{"level":2,"title":"关于channel的特性，下面说法正确的是？","slug":"关于channel的特性-下面说法正确的是","link":"#关于channel的特性-下面说法正确的是","children":[]},{"level":2,"title":"下列代码有什么问题？","slug":"下列代码有什么问题","link":"#下列代码有什么问题","children":[]},{"level":2,"title":"下列代码输出什么？","slug":"下列代码输出什么","link":"#下列代码输出什么","children":[]},{"level":2,"title":"关于无缓冲和有冲突的channel，下面说法正确的是？","slug":"关于无缓冲和有冲突的channel-下面说法正确的是","link":"#关于无缓冲和有冲突的channel-下面说法正确的是","children":[]},{"level":2,"title":"下列代码输出什么？","slug":"下列代码输出什么-1","link":"#下列代码输出什么-1","children":[]},{"level":2,"title":"关于select机制，下面说法正确的是?","slug":"关于select机制-下面说法正确的是","link":"#关于select机制-下面说法正确的是","children":[]},{"level":2,"title":"Go 程序中的包是什么？","slug":"go-程序中的包是什么","link":"#go-程序中的包是什么","children":[]},{"level":2,"title":"关于字符串拼接,下列正确的是?","slug":"关于字符串拼接-下列正确的是","link":"#关于字符串拼接-下列正确的是","children":[]},{"level":2,"title":"连nil切片和空切片一不一样都不清楚？那BAT面试官只好让你回去等通知了。","slug":"连nil切片和空切片一不一样都不清楚-那bat面试官只好让你回去等通知了。","link":"#连nil切片和空切片一不一样都不清楚-那bat面试官只好让你回去等通知了。","children":[]},{"level":2,"title":"golang面试题：字符串转成byte数组，会发生内存拷贝吗？","slug":"golang面试题-字符串转成byte数组-会发生内存拷贝吗","link":"#golang面试题-字符串转成byte数组-会发生内存拷贝吗","children":[]},{"level":2,"title":"golang面试题：翻转含有中文、数字、英文字母的字符串","slug":"golang面试题-翻转含有中文、数字、英文字母的字符串","link":"#golang面试题-翻转含有中文、数字、英文字母的字符串","children":[]},{"level":2,"title":"golang面试题：拷贝大切片一定比小切片代价大吗？","slug":"golang面试题-拷贝大切片一定比小切片代价大吗","link":"#golang面试题-拷贝大切片一定比小切片代价大吗","children":[]},{"level":2,"title":"golang面试题：json包变量不加tag会怎么样？","slug":"golang面试题-json包变量不加tag会怎么样","link":"#golang面试题-json包变量不加tag会怎么样","children":[]},{"level":2,"title":"golang面试题：reflect（反射包）如何获取字段tag？为什么json包不能导出私有变量的tag？","slug":"golang面试题-reflect-反射包-如何获取字段tag-为什么json包不能导出私有变量的tag","link":"#golang面试题-reflect-反射包-如何获取字段tag-为什么json包不能导出私有变量的tag","children":[]},{"level":2,"title":"昨天那个在for循环里append元素的同事，今天还在么？","slug":"昨天那个在for循环里append元素的同事-今天还在么","link":"#昨天那个在for循环里append元素的同事-今天还在么","children":[]},{"level":2,"title":"go struct能不能比较","slug":"go-struct能不能比较","link":"#go-struct能不能比较","children":[]},{"level":2,"title":"Go 支持什么形式的类型转换？将整数转换为浮点数。","slug":"go-支持什么形式的类型转换-将整数转换为浮点数。","link":"#go-支持什么形式的类型转换-将整数转换为浮点数。","children":[]},{"level":2,"title":"Log包线程安全吗？","slug":"log包线程安全吗","link":"#log包线程安全吗","children":[]},{"level":2,"title":"Goroutine和线程的区别?","slug":"goroutine和线程的区别","link":"#goroutine和线程的区别","children":[]},{"level":2,"title":"相关推荐","slug":"相关推荐","link":"#相关推荐","children":[]}],"git":{"createdTime":1707842411000,"updatedTime":1709087731000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":4}]},"readingTime":{"minutes":9.05,"words":2714},"filePathRelative":"golang/面试题/1.Go入门.md","localizedDate":"2024年2月13日","autoDesc":true}');export{O as comp,N as data};
