import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as e,d as t,e as r,a as s,o as p,r as c}from"./app-Ciq-_e96.js";const l={},g={href:"https://golangguide.top",target:"_blank",rel:"noopener noreferrer"},d={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function h(m,n){const o=c("ExternalLinkIcon");return p(),i("div",null,[n[7]||(n[7]=e("h1",{id:"docker-是什么-和-kubernetes-k8s-之间是什么关系",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker-是什么-和-kubernetes-k8s-之间是什么关系"},[e("span",null,"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？")])],-1)),e("figure",null,[n[2]||(n[2]=e("img",{src:"https://cdn.xiaobaidebug.top/1711635876652.png",alt:"八股文刷题网站: https://golangguide.top",tabindex:"0",loading:"lazy"},null,-1)),e("figcaption",null,[n[1]||(n[1]=t("八股文刷题网站: ")),e("a",g,[n[0]||(n[0]=t("https://golangguide.top")),r(o)])])]),n[8]||(n[8]=s(`<p>作为一个程序员，如果你想安装一个 <code>vim</code> 编辑下文本，在不同环境里你得执行不同的命令。 在 ubuntu，你需要执行 <code>apt-get install vim</code>，在 centos 里，你需要执行 <code>yum install vim</code>.</p><p>装个小软件尚且如此，要是你想将自己写的代码部署到各个不同操作系统的服务器上，那依赖的软件和配置就更多了，需要针对每个环境单独写一套部署脚本。<br> 难受，太难受了。</p><p>那么问题就来了，有没有更好的解决方案？<br> 当然有，<strong>没有什么是加一层中间层不能解决的，如果有，那就再加一层</strong>，这次我们要加的中间层是 <strong>Docker</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1711881620693.jpeg" alt="Docker是代码和操作系统之间的中间层" tabindex="0" loading="lazy"><figcaption>Docker是代码和操作系统之间的中间层</figcaption></figure><p>哦不，准确来说是 <strong>Docker 容器</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1711881692461.jpeg" alt="容器技术" tabindex="0" loading="lazy"><figcaption>容器技术</figcaption></figure><h2 id="docker-是什么" tabindex="-1"><a class="header-anchor" href="#docker-是什么"><span>Docker 是什么？</span></a></h2><p>我们经常能听到程序员说&quot;这个程序在我环境里明明是好的啊，怎么到你这就不行了呢&quot;？<br> 注意这里的关键词，<strong>程序</strong>和<strong>环境</strong>。<br> 程序是跑在操作系统上的，而操作系统上又装了各种不同版本的依赖库和配置，这些被程序所依赖的信息，我们统称为&quot;<strong>环境</strong>&quot;。</p><figure><img src="https://cdn.xiaobaidebug.top/1711881781641.jpeg" alt="程序和环境" tabindex="0" loading="lazy"><figcaption>程序和环境</figcaption></figure><p>程序依赖环境，环境不同，程序就可能跑不起来。<br> 如果我们能将环境和程序一起打包，给到对方运行，那问题不就解决了吗。<br> Docker 就是这样一款可以将<strong>程序和环境打包并运行</strong>的工具软件。<br> 我们来看下它是怎么做的？</p><h2 id="基础镜像是什么" tabindex="-1"><a class="header-anchor" href="#基础镜像是什么"><span>基础镜像是什么</span></a></h2><p>既然上面提到环境不同，会导致程序运行结果不同，那么我们首先要做的最重要的事情，就是<strong>统一环境</strong>。<br> 而环境中，最最重要的就是<strong>操作系统</strong>。比如 centos 还是 ubuntu，我们得选一个，让所有程序都跑在<strong>同一个</strong>操作系统上。并且我们知道操作系统分为用户空间和内核空间，应用程序运行在用户空间。因此，我们可以阉割操作系统，只需要利用操作系统的用户空间部分，就能构建出应用所需的环境。<br> 其次就是统一<strong>程序语言</strong>依赖，比如要跑 python 应用，你得装个 python 解释器，要跑个 java 应用，得装个 JVM，要跑 go 应用，那就。。什么都不需要装。<br> 选中一个基础操作系统和语言后，我们将它们对应的文件系统，依赖库，配置等放一起打包成一个类似压缩包的文件，这就是所谓的<strong>基础镜像</strong>(Base Image)。</p><figure><img src="https://cdn.xiaobaidebug.top/1711881824726.jpeg" alt="基础镜像是什么" tabindex="0" loading="lazy"><figcaption>基础镜像是什么</figcaption></figure><h2 id="dockerfile-是什么" tabindex="-1"><a class="header-anchor" href="#dockerfile-是什么"><span>Dockerfile 是什么</span></a></h2><p>有了基础镜像之后还不够，我们经常还需要安装一些依赖，比如<code>yum install gcc</code>，甚至还要创建一些文件夹。最后才是运行我们的目标<strong>应用程序</strong>。<br> 我们知道 linux 中，所有工作都可以通过<strong>命令行</strong>完成，所以我们可以将要做的事情以命令行的形式一行行列出来。<br> 就像一份 <strong>todo list</strong>。<br> 意思是要求在基础镜像的基础上按着 todo list 挨个执行命令。<br> 这份 todo list 长下面这样。</p><div class="language-Dockerfile line-numbers-mode" data-ext="Dockerfile" data-title="Dockerfile"><pre class="language-Dockerfile"><code># 指定基础镜像
FROM python:3.9

# 设置工作目录
WORKDIR /app

# 复制依赖文件到容器中
COPY requirements.txt .

RUN yum install gcc
# 安装依赖
RUN pip install --no-cache-dir -r requirements.txt

# 将当前目录下的所有文件复制到容器的 /app 目录下
COPY . /app

# 设置容器启动时执行的命令
CMD [&quot;python&quot;, &quot;app.py&quot;]

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体含义是，基于一个装了 python3.9 解释器的操作系统（基础镜像），再执行 pip install 等命令安装其他依赖，从而构建出一个适合程序运行的环境，最后用 <code>python app.py</code> 运行我们的目标应用程序。<br> 像这样一份列清楚了，从操作系统到应用服务启动，需要做哪些事情的清单文件（todo list），就是所谓的 <strong>Dockerfile</strong>。</p><h2 id="容器镜像-是什么" tabindex="-1"><a class="header-anchor" href="#容器镜像-是什么"><span>容器镜像 是什么</span></a></h2><p>注意 Dockerfile 只是描述了要做哪些事情，并没有真正开始做。<br> 当我们用命令行执行 <strong>docker build</strong> 的时候，Docker 软件就会按着 Dockerfile 的说明，一行行构建环境+应用程序。最终将这个环境+程序，打包成一个类似&quot;压缩包&quot;的东西，我们叫它<strong>容器镜像</strong>(container image)。</p><figure><img src="https://cdn.xiaobaidebug.top/1711881930456.jpeg" alt="容器镜像" tabindex="0" loading="lazy"><figcaption>容器镜像</figcaption></figure><p>只要将容器镜像传到任意一台服务器上，对这个&quot;压缩包&quot;执行&quot;解压缩&quot;，我们就能同时运行环境和程序。太完美了！<br> 但是现在还有个问题，怎么将容器镜像传到那么多服务器上呢？</p><h2 id="registry-是什么" tabindex="-1"><a class="header-anchor" href="#registry-是什么"><span>Registry 是什么</span></a></h2><p>服务器那么多，挨个将容器镜像传过去也不是不行，就是将压力全给到发送方的<strong>网络带宽</strong>了。有没有更好的解决方案？<br> 有。可以参考 <code>github</code> 代码仓库 的做法，我们通常会使用 <code>git push</code> 将代码传到 github，有需要的人自己通过 <code>git pull</code> 的方式将代码从 github 拉到自己的机器上。</p><figure><img src="https://cdn.xiaobaidebug.top/1711881944211.jpeg" alt="github仓库" tabindex="0" loading="lazy"><figcaption>github仓库</figcaption></figure><p>那 Docker 也一样，弄一个<strong>镜像仓库</strong>，通过 <strong>docker push</strong> 将镜像推到仓库，有需要的时候再通过 <strong>docker pull</strong> 将镜像拉到机器上。这个负责管理镜像仓库推拉能力的服务，就叫 <strong>Docker Registry</strong>。基于 Docker Registry 的能力，我们可以搭建各种<strong>官方或私人镜像仓库</strong>，比如官方的叫 DockerHub，非官方的有清华大学的 Tuna 等等，一般公司内部也会有自己的镜像仓库。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882017085.jpeg" alt="Registry是什么" tabindex="0" loading="lazy"><figcaption>Registry是什么</figcaption></figure><h2 id="容器是什么" tabindex="-1"><a class="header-anchor" href="#容器是什么"><span>容器是什么</span></a></h2><p>现在，我们解决了服务器间<strong>传输容器镜像</strong>的问题。<br> 我们可以跑到目的服务器上，执行 docker pull 拿到容器镜像。<br> 然后执行 docker run 命令，将这个类似&quot;压缩包&quot;的容器镜像给&quot;解压缩&quot;，获得一个<strong>独立的环境和应用程序</strong>并运行起来。这样一个独立的环境和应用程序，就是所谓的<strong>容器</strong>(container)。我们可以在一个操作系统上同时跑多个容器。且这些容器之间都是互相独立，互相隔离的。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882051189.jpeg" alt="容器是什么" tabindex="0" loading="lazy"><figcaption>容器是什么</figcaption></figure><h2 id="docker-和虚拟机的关系" tabindex="-1"><a class="header-anchor" href="#docker-和虚拟机的关系"><span>Docker 和虚拟机的关系？</span></a></h2><p>眼熟不，这个<strong>容器</strong>是不是很像我们用 vmware 或 kvm 整出来的<strong>传统虚拟机</strong>？<br> 但不同的是，传统虚拟机自带一个完整操作系统，而容器本身不带完整操作系统，容器的基础镜像实际上只包含了操作系统的核心依赖库和配置文件等必要组件。<br> 它利用一个叫 <strong>Namespace</strong> 的能力让它看起来就像是一个独立操作系统一样。再利用一个叫 <strong>Cgroup</strong> 的能力限制它能使用的计算资源。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882143210.jpeg" alt="Docker和虚拟机的区别" tabindex="0" loading="lazy"><figcaption>Docker和虚拟机的区别</figcaption></figure><p>所以说，容器本质上只是个自带独立运行环境的<strong>特殊进程</strong>，底层用的其实是<strong>宿主机的操作系统内核</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882187702.jpeg" alt="容器本质是一个特殊进程" tabindex="0" loading="lazy"><figcaption>容器本质是一个特殊进程</figcaption></figure><h2 id="docker-的架构原理" tabindex="-1"><a class="header-anchor" href="#docker-的架构原理"><span>Docker 的架构原理</span></a></h2><p>现在，我们回到日常使用场景中，聊聊 Docker 的架构原理。它是经典的 Client/Server 架构。Client 对应 Docker-cli， Server 对应 Docker daemon。<br> 我们在命令行里敲 Docker 命令，使用的就是 Docker-cli.</p><figure><img src="https://cdn.xiaobaidebug.top/1711882290170.jpeg" alt="Docker是C/S软件架构" tabindex="0" loading="lazy"><figcaption>Docker是C/S软件架构</figcaption></figure><p>Docker-cli 会解析我们输入的 cmd 命令，然后调用 Docker daemon 守护进程提供的 RESTful API，守护进程收到命令后，会根据指令创建和管理各个容器。<br> 再具体点，Docker Daemon 内部分为 Docker Server、Engine 两层。Docker Server 本质上就是个 HTTP 服务，负责对外提供操作容器和镜像的 api 接口，接收到 API 请求后，会分发任务给 Engine 层，Engine 层负责创建 Job，由 Job 实际执行各种工作。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882320514.jpeg" alt="Docker daemon内部架构" tabindex="0" loading="lazy"><figcaption>Docker daemon内部架构</figcaption></figure><p>不同的 Docker 命令会执行不同类型的 Job 任务。</p><h3 id="docker-build" tabindex="-1"><a class="header-anchor" href="#docker-build"><span>docker build</span></a></h3><p>如果你执行的是 docker build 命令，Job 则会根据 Dockerfile 指令，像包洋葱皮似的一层层构建容器镜像文件。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882342439.jpeg" alt="docker build执行逻辑" tabindex="0" loading="lazy"><figcaption>docker build执行逻辑</figcaption></figure><h3 id="docker-pull-push" tabindex="-1"><a class="header-anchor" href="#docker-pull-push"><span>docker pull/push</span></a></h3><p>如果你执行的是 docker pull 或 push 之类的镜像推拉操作，Job 则会跟外部的 <code>Docker Registry</code> 交互，将镜像上传或下载。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882355306.jpeg" alt="docker pull/push执行逻辑" tabindex="0" loading="lazy"><figcaption>docker pull/push执行逻辑</figcaption></figure><h3 id="docker-run" tabindex="-1"><a class="header-anchor" href="#docker-run"><span>docker run</span></a></h3><p>如果你执行的是 docker run 命令，Job 就会基于镜像文件调用 containerd 组件，驱使 runC 组件创建和运行容器。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882437315.jpeg" alt="docker run执行逻辑" tabindex="0" loading="lazy"><figcaption>docker run执行逻辑</figcaption></figure><h2 id="docker-到底是什么" tabindex="-1"><a class="header-anchor" href="#docker-到底是什么"><span>Docker 到底是什么？</span></a></h2><p>现在我们再回过头来看这句话，Docker 本质上就是一个将<strong>程序和环境打包并运行</strong>的工具软件。具体点来说就是，它通过 Dockerfile 描述环境和应用程序的依赖关系， docker build 构建镜像， docker pull/push 跟 Docker Registry 交互实现存储和分发镜像，docker run 命令基于镜像启动容器，基于容器技术运行程序和它对应的环境，从而解决环境依赖导致的各种问题。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882385493.jpeg" alt="Docker到底是什么" tabindex="0" loading="lazy"><figcaption>Docker到底是什么</figcaption></figure><p>好了，到这里，我们就了解了 Docker 的架构和基本运行原理了。<br> 接下来，我们再来聊聊跟 Docker 相关的几个周边。</p><h2 id="docker-compose-是什么" tabindex="-1"><a class="header-anchor" href="#docker-compose-是什么"><span>Docker Compose 是什么？</span></a></h2><p>我们现在知道了 Docker 容器 本身只是<strong>一个</strong>特殊进程，但如果我想要部署<strong>多个</strong>容器，且对这些容器的顺序有一定要求呢？比如一个博客系统，当然是先启动数据库，再启动身份验证服务，最后才能启动博客 web 服务。<br> 按理说挨个执行 docker run 命令当然是没问题的，但有没有更优雅的解决方案？<br> 有。我们可以通过一个 <strong>YAML</strong> 文件写清楚要部署的<strong>容器有哪些</strong>，<strong>部署顺序</strong>是怎么样的，以及这些容器占用的 <strong>cpu 和内存</strong>等信息。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">A</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;some-image-for-a&quot;</span>
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">resources</span><span class="token punctuation">:</span>
        <span class="token key atrule">limits</span><span class="token punctuation">:</span>
          <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">&quot;0.50&quot;</span> <span class="token comment"># 限制 CPU 使用率为 50%</span>
          <span class="token key atrule">memory</span><span class="token punctuation">:</span> 256M <span class="token comment"># 限制内存使用量为 256MB</span>

  <span class="token key atrule">B</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;some-image-for-b&quot;</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> A

  <span class="token key atrule">C</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;some-image-for-c&quot;</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，通过一行<code>Docker-compose up</code>命令，开始解析 YAML 文件，将容器们一键按顺序部署，就完成<strong>一整套服务</strong>的部署。<br> 这其实就是 <strong>Docker Compose</strong> 干的事情。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882458569.jpeg" alt="Docker compose原理" tabindex="0" loading="lazy"><figcaption>Docker compose原理</figcaption></figure><h2 id="docker-swarm-是什么" tabindex="-1"><a class="header-anchor" href="#docker-swarm-是什么"><span>Docker Swarm 是什么？</span></a></h2><p>Docker 解决的是<strong>一个容器</strong>的部署。<br> Docker Compose 解决的是<strong>多个容器组成的一整套服务</strong>的部署。<br> 那 Docker Swarm 就更高维度了，它解决的其实是这一整套服务<strong>在多台服务器上的集群部署</strong>问题。<br> 比如在 A 服务器坏了，就将服务在 B 服务器上重新部署一套，实现迁移，还能根据需要对服务做扩缩容。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882476662.jpeg" alt="Docker swarm是什么" tabindex="0" loading="lazy"><figcaption>Docker swarm是什么</figcaption></figure><h2 id="docker-和-k8s-的关系是什么" tabindex="-1"><a class="header-anchor" href="#docker-和-k8s-的关系是什么"><span>Docker 和 k8s 的关系是什么？</span></a></h2><p>还记得之前的<a href="/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/k8s%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88">文章</a>里提到的 k8s 吗？它会在多台 Node 服务器上调度 Pod，进行部署和扩缩容。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882564528.jpeg" alt="k8s的node内部" tabindex="0" loading="lazy"><figcaption>k8s的node内部</figcaption></figure><p>每个 Pod 内部可以含有多个 container，每个 container 本质上就是一个服务进程。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882525008.jpeg" alt="pod内部" tabindex="0" loading="lazy"><figcaption>pod内部</figcaption></figure><p>是不是感觉<strong>k8s</strong>跟 <strong>Docker Swarm</strong> 做的事情很像？<br> 没错，其实 Docker Swarm 是 k8s 的<strong>竞品</strong>，既然是竞品，那它们做的事情其实区别就不大了。<br> 现在回过头来看 Docker 容器和 k8s 之间的关系，思路就清晰了。<br> Docker 部署的<strong>容器</strong>，其实就是 k8s 调度的 Pod 里的 <strong>container</strong>，它们都叫<strong>容器</strong>，其实是一回事。只不过 k8s 除了支持 Docker 的容器外，还支持别人家的容器。<br> Docker Compose 基于多个 container 创建的<strong>一整套服务</strong>，其实就是 k8s 里的 <strong>pod</strong>。而 Docker Swarm 做的事情和 k8s 一样，本质上就是在调度 pod。<br> 回过头来看下 k8s 的官方定义，叫容器编排引擎，将它理解为，以 API <strong>编</strong>程的方式管理安<strong>排</strong>各个容器的引擎，是不是就特别精辟。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882592600.jpeg" alt="容器编排引擎的含义" tabindex="0" loading="lazy"><figcaption>容器编排引擎的含义</figcaption></figure><p>现在，我们再回过头来看下 Docker 的图标，是一个个<strong>集装箱</strong>，放在一艘船上，这一个个集装箱指的就是互相隔离的<strong>容器</strong>，而 k8s 的图标，则是一个轮船上的<strong>方向盘</strong>，意思是 k8s 控制着轮船的航向，其实指的就是<strong>调度</strong>容器。这波联想就非常形象了。</p><figure><img src="https://cdn.xiaobaidebug.top/1711882706849.jpeg" alt="Docker和k8s" tabindex="0" loading="lazy"><figcaption>Docker和k8s</figcaption></figure><p>现在大家通了吗？</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>Docker 本质上就是一个将<strong>程序和环境打包并运行</strong>的工具软件，而 Docker 容器本质上只是个自带独立运行环境的<strong>特殊进程</strong>，底层用的其实是<strong>宿主机的操作系统内核</strong>。</li><li>Docker 软件 通过 Dockerfile 描述环境和应用程序的依赖关系， docker build 构建镜像， docker pull/push 跟 Docker Registry 交互实现存储和分发镜像，docker run 命令基于镜像启动容器，基于容器技术运行程序和它对应的环境，从而解决环境依赖导致的各种问题。</li><li>Docker 解决的是<strong>一个容器</strong>的部署问题，Docker Compose 解决的是<strong>多个容器组成的一套服务</strong>的部署问题，Docker Swarm 解决的是多个容器组成的<strong>一套服务在多台服务器上的部署问题</strong>，k8s 则是 Docker Swarm 的竞品，在更高维度上<strong>兼容</strong>了 Docker 容器，实现了容器编排调度。</li></ul><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>这篇文章的主题按理说写个万把字不成问题，但我压缩了很多内容，因为后面会做成视频，所以主打就是用最少的文字将技术原理通俗的讲清楚。<br> 如果对你有帮助，可以在评论区叫我一声靓仔吗？没别的意思，我就是离开广东太久了，想再听一次。</p><h1 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章：</span></a></h1>`,76)),e("ul",null,[e("li",null,[e("p",null,[e("a",d,[n[3]||(n[3]=t("golang进阶面试题八股文合集")),r(o)])])]),e("li",null,[e("p",null,[e("a",u,[n[4]||(n[4]=t("golang基础面试题八股文合集")),r(o)])])]),e("li",null,[e("p",null,[e("a",k,[n[5]||(n[5]=t("golang常用标准库第三方库大全")),r(o)])])]),e("li",null,[e("p",null,[e("a",b,[n[6]||(n[6]=t("golang学习路线")),r(o)])])])])])}const v=a(l,[["render",h],["__file","docker是什么docker和kubernetes(k8s)之间是什么关系有什么区别.html.vue"]]),B=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84/%E4%BA%91%E5%8E%9F%E7%94%9F/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/docker%E6%98%AF%E4%BB%80%E4%B9%88docker%E5%92%8Ckubernetes(k8s)%E4%B9%8B%E9%97%B4%E6%98%AF%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html","title":"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？","lang":"zh-CN","frontmatter":{"description":"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？ 八股文刷题网站: https://golangguide.top八股文刷题网站: https://golangguide.top 作为一个程序员，如果你想安装一个 vim 编辑下文本，在不同环境里你得执行不同的命令。 在 ubuntu，你需要执行 apt-get instal...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E4%BA%91%E5%8E%9F%E7%94%9F/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/docker%E6%98%AF%E4%BB%80%E4%B9%88docker%E5%92%8Ckubernetes(k8s)%E4%B9%8B%E9%97%B4%E6%98%AF%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？"}],["meta",{"property":"og:description","content":"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？ 八股文刷题网站: https://golangguide.top八股文刷题网站: https://golangguide.top 作为一个程序员，如果你想安装一个 vim 编辑下文本，在不同环境里你得执行不同的命令。 在 ubuntu，你需要执行 apt-get instal..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/1711635876652.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T03:33:31.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-04-06T03:33:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/1711635876652.png\\",\\"https://cdn.xiaobaidebug.top/1711881620693.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711881692461.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711881781641.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711881824726.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711881930456.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711881944211.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882017085.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882051189.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882143210.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882187702.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882290170.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882320514.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882342439.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882355306.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882437315.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882385493.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882458569.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882476662.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882564528.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882525008.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882592600.jpeg\\",\\"https://cdn.xiaobaidebug.top/1711882706849.jpeg\\"],\\"dateModified\\":\\"2024-04-06T03:33:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E4%BA%91%E5%8E%9F%E7%94%9F/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/docker%E6%98%AF%E4%BB%80%E4%B9%88docker%E5%92%8Ckubernetes(k8s)%E4%B9%8B%E9%97%B4%E6%98%AF%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E4%BA%91%E5%8E%9F%E7%94%9F/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/docker%E6%98%AF%E4%BB%80%E4%B9%88docker%E5%92%8Ckubernetes(k8s)%E4%B9%8B%E9%97%B4%E6%98%AF%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？"}],["meta",{"property":"og:description","content":"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？ 八股文刷题网站: https://golangguide.top八股文刷题网站: https://golangguide.top 作为一个程序员，如果你想安装一个 vim 编辑下文本，在不同环境里你得执行不同的命令。 在 ubuntu，你需要执行 apt-get instal..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T03:33:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T03:33:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 是什么？ 和 Kubernetes(k8s) 之间是什么关系？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-06T03:33:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Docker 是什么？","slug":"docker-是什么","link":"#docker-是什么","children":[]},{"level":2,"title":"基础镜像是什么","slug":"基础镜像是什么","link":"#基础镜像是什么","children":[]},{"level":2,"title":"Dockerfile 是什么","slug":"dockerfile-是什么","link":"#dockerfile-是什么","children":[]},{"level":2,"title":"容器镜像 是什么","slug":"容器镜像-是什么","link":"#容器镜像-是什么","children":[]},{"level":2,"title":"Registry 是什么","slug":"registry-是什么","link":"#registry-是什么","children":[]},{"level":2,"title":"容器是什么","slug":"容器是什么","link":"#容器是什么","children":[]},{"level":2,"title":"Docker 和虚拟机的关系？","slug":"docker-和虚拟机的关系","link":"#docker-和虚拟机的关系","children":[]},{"level":2,"title":"Docker 的架构原理","slug":"docker-的架构原理","link":"#docker-的架构原理","children":[{"level":3,"title":"docker build","slug":"docker-build","link":"#docker-build","children":[]},{"level":3,"title":"docker pull/push","slug":"docker-pull-push","link":"#docker-pull-push","children":[]},{"level":3,"title":"docker run","slug":"docker-run","link":"#docker-run","children":[]}]},{"level":2,"title":"Docker 到底是什么？","slug":"docker-到底是什么","link":"#docker-到底是什么","children":[]},{"level":2,"title":"Docker Compose 是什么？","slug":"docker-compose-是什么","link":"#docker-compose-是什么","children":[]},{"level":2,"title":"Docker Swarm 是什么？","slug":"docker-swarm-是什么","link":"#docker-swarm-是什么","children":[]},{"level":2,"title":"Docker 和 k8s 的关系是什么？","slug":"docker-和-k8s-的关系是什么","link":"#docker-和-k8s-的关系是什么","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]}],"git":{"createdTime":1712020071000,"updatedTime":1712374411000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1},{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":12.29,"words":3688},"filePathRelative":"架构/云原生/核心知识点/docker是什么docker和kubernetes(k8s)之间是什么关系有什么区别.md","localizedDate":"2024年4月2日","autoDesc":true}');export{v as comp,B as data};
