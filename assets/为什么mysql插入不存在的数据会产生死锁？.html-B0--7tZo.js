import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as r,a as n,b as s,d as e,e as t}from"./app-Dn9HY-uS.js";const l={},c=t('<h1 id="为什么-mysql-插入不存在的数据会产生死锁" tabindex="-1"><a class="header-anchor" href="#为什么-mysql-插入不存在的数据会产生死锁"><span>为什么 mysql 插入不存在的数据会产生死锁？</span></a></h1><br><p>mysql 的读写锁这个话题，老难了。</p><p>水太深，容易把握不住。</p><p>看书吧犯困。</p><p>但面试又绕不过去。</p><p>今天我们面向一个例子学习，希望能让大家提起一点兴趣。</p><p>直接开始吧。</p><br><p>有这么一张表，建表 sql 如下。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名字&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>phone_no<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;电话号码&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_phone_no<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>phone_no<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要关注的是，<strong>电话号码</strong>这一列，是加了<strong>普通索引</strong>的。</p><figure><img src="https://cdn.xiaobaidebug.top/image/四层隔离级别.png" alt="四层隔离级别" tabindex="0" loading="lazy"><figcaption>四层隔离级别</figcaption></figure>',13),g={href:"https://mp.weixin.qq.com/s/2UxF7GJrAW2nY8bB57ZogQ",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>假设我们现在用的是<strong>可重复读隔离级别</strong>。</p><p>当前数据表长这样。</p><figure><img src="https://cdn.xiaobaidebug.top/image/user表数据库原始状态-20220409140411351.png" alt="user表数据库原始状态" tabindex="0" loading="lazy"><figcaption>user表数据库原始状态</figcaption></figure><p>注意里面<strong>没有 phone_no=2</strong>。</p><p>现在代码里有这么一段逻辑。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">user</span> <span class="token keyword">where</span> phone_no<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">for</span> <span class="token keyword">update</span>  <span class="token comment">// 查询sql</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">user</span> 存在<span class="token punctuation">)</span> {
		<span class="token keyword">return</span>
} <span class="token keyword">else</span> {
  <span class="token keyword">insert</span> <span class="token keyword">user</span><span class="token punctuation">;</span>   <span class="token comment">// 插入sql</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑比较简单，就是去查一下 phone_no=2 的数据存不存在。不存在的话，就插入一条到数据库里。</p><p><strong>目的是保证 phone=2 的数据唯一。</strong></p><p>注意跟平时的 select 查询不一样，select 语句后面还有个 <strong>for update</strong> ，是为了对 phone_no=2 进行加锁，<strong>不懂没关系，待会还会提到。</strong></p><p>现在有两个线程同时<strong>并发</strong>跑上面的逻辑。</p><p>结果竟然提示<strong>死锁</strong>。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>Deadlock found <span class="token keyword">when</span> trying <span class="token keyword">to</span> get <span class="token keyword">lock</span><span class="token punctuation">;</span> try restarting <span class="token keyword">transaction</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>为什么呢？</p><br><p>为了解释这个问题，我们就从 mysql 锁的话题开始聊起。</p><br><h3 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h3><p>mysql 锁的话题很大了，这个细细聊起来又是一篇长文了。</p><p>我们简单说一下。mysql 中，我们现在用的引擎几乎都是 innodb，我们以此为默认条件展开话题。</p><br><p>常见的锁有两种，一种是<strong>表锁</strong>，一种是<strong>行锁</strong>。</p><p>当你<strong>更新</strong>一条数据时，<strong>如果你不走索引，那会锁表，否则，锁行。</strong></p><p>表锁是在你什么索引都没有的时候，为了保证<strong>数据一致性</strong>，迫不得已加上去的，锁的对象当然就是整个数据表了。也就是说，你在对数据表加锁之后，再对表进行读写操作，结束之后对表解锁。在此期间，其他对这张表的读写都得等你操作完。</p><p>是的，<strong>干等</strong>，哪怕你操作的是第 1 行的数据，其他人要操作的是第 100 行的数据，也得干等。</p><figure><img src="https://cdn.xiaobaidebug.top/image/锁表.drawio.png" alt="锁表" tabindex="0" loading="lazy"><figcaption>锁表</figcaption></figure><p>为了提升效率，设计 mysql 的大佬们又把锁的粒度给减小了，粒度从锁表变成锁行。</p><p>也就是说，你先<strong>锁住</strong>这个行，在读写完这一行之后，再<strong>解锁</strong>，期间其他人如果要操作这一行，那要等着，如果操作其他行，那就不用等了。这样并发量就提上去了。</p><figure><img src="https://cdn.xiaobaidebug.top/image/锁行.drawio.png" alt="锁行" tabindex="0" loading="lazy"><figcaption>锁行</figcaption></figure><p>而加锁除了 update, insert 这类<strong>写类型</strong>的语句会加之外，还可以在 select 语句的最后加入<strong>for update</strong>，这样也能加锁。比如</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> phone_no <span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>update 语句会加锁比较好理解，就是你要更新某一行了，防止别人这时候也要更新，所以加锁。后者 select for update 就是告诉别人，你<strong>读的</strong>这一行接下来是要<strong>拿来做更新的操作的</strong>（<code>for update</code>）,在你更新完成前，谁也不能更新它。</p><p>上面这种锁，主要是为了写的时候加入的，叫<strong>写锁，也就是 X 锁</strong>。</p><p><strong>写锁跟写锁之间是互斥的</strong>。意思是不能同时对某一行加两个写锁，凡事讲究先来后到，后面加写锁的线程会<strong>阻塞等待</strong>前面的线程解锁完。</p><p>既然有写锁，当然有<strong>读锁，也叫 S 锁</strong>。</p><p>像下面这样在 select 语句后面加上<strong>lock in share mode</strong>，就能加入读锁。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> phone_no <span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>读锁和读锁之间就不互斥</strong>，也就是两个线程可以对同一行数据同时加读锁，不会阻塞。</p><figure><img src="https://cdn.xiaobaidebug.top/image/读写锁兼容性.drawio.png" alt="读写锁兼容性" tabindex="0" loading="lazy"><figcaption>读写锁兼容性</figcaption></figure><br><h3 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h3><p>简单解释下死锁，一个数据表里有那么多行，我们写代码的时候，会执行各种 sql 语句，期间完全可以锁住多行。</p><p>当一个线程先锁 A 行，再锁 B 行时，另外一个线程反过来，先锁 B 行，再锁 A 行。就有可能发生两个线程在已经持有一个锁的同时，死等对方持有的另外一个锁释放的情况。</p><p>双方都想拿对方的锁，且自己的锁也死死不松手，逻辑就都跑不下去了，这就是<strong>死锁</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/死锁.drawio.png" alt="死锁.drawio" tabindex="0" loading="lazy"><figcaption>死锁.drawio</figcaption></figure><br><h3 id="间隙锁" tabindex="-1"><a class="header-anchor" href="#间隙锁"><span>间隙锁</span></a></h3><p>那么我们回到文章开头的话题上。</p><p>如果我能保证，对 id=2 的那一行加锁，写结束前都不释放，期间别人都没法写，这样岂不是保证数据唯一了？</p><p>道理是这么个道理没错，但是现在的关键是，<strong>phone_no=2 这一行并不存在</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/phone=2不存在.png" alt="phone=2不存在" tabindex="0" loading="lazy"><figcaption>phone=2不存在</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">user</span> <span class="token keyword">where</span> phone_no<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">for</span> <span class="token keyword">update</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一行 sql 一执行，牢牢锁住了空气？</p><br><p>开个玩笑。</p><p>是不是什么也没锁住，这个要看<strong>隔离级别</strong>了。</p><figure><img src="https://cdn.xiaobaidebug.top/image/四层隔离级别.png" alt="四层隔离级别" tabindex="0" loading="lazy"><figcaption>四层隔离级别</figcaption></figure><p>phone_no 是加了索引的，且因为<strong>数据库索引里，数据是排好序的</strong>，phone_no=1 和 phone_no=3 都存在，他们之间没有数据，如果有 phone_no=2 这条数据的话，那也理应出现在他们中间。</p><p>那么现在的问题是，有没有办法锁住 1 和 3 之间的<strong>缝隙</strong>？</p><p>有的，有个<strong>间隙锁</strong>，这个锁，在<strong>读未提交</strong>和<strong>读已提交</strong>里都没有，它在<strong>可重复读</strong>这个隔离级别下被引入。</p><p>而且，<strong>间隙锁和间隙锁之间是不互斥的</strong>。</p><p>记住上面这句话，老关键了。</p><p>于是乎，我们回到文章开头的问题里，这次我加上注释。</p><figure><img src="https://cdn.xiaobaidebug.top/image/RR隔离级别加锁并发写数据会死锁加注释.drawio.png" alt="RR隔离级别加锁并发写数据会死锁的原因" tabindex="0" loading="lazy"><figcaption>RR隔离级别加锁并发写数据会死锁的原因</figcaption></figure><p>线程 1<strong>在可重复读这个隔离级别下，通过 for update ，可以在 1 和 3 之间，加上间隙锁</strong>。</p><p>线程 2 也一样，也在 1 和 3 之间加上间隙锁，<strong>因为间隙锁和间隙锁之间是不互斥的，所以也能加锁成功。</strong></p><p>这时候线程 1 尝试去<strong>插入数据</strong>，插入数据的时候也会加一个<strong>特殊的锁</strong>，专业点，叫<strong>插入意向锁</strong>。<strong>插入意向锁跟间隙锁是互斥的。</strong></p><figure><img src="https://cdn.xiaobaidebug.top/image-20220626224918681.png" alt="image-20220626224918681" tabindex="0" loading="lazy"><figcaption>image-20220626224918681</figcaption></figure><p>但由于线程 2 前面已经加过间隙锁了。所以线程 1 会等线程 2 释放间隙锁。</p><p>但线程 2，不仅不释放间隙锁，反而又打算加一个写锁。</p><p>哦吼。</p><p><strong>相当于两个线程在持有一个锁的同时，还等着对方释放锁。</strong></p><p>这就妥妥<strong>死锁</strong>了。</p><p>这下，文章开头死锁的问题，就解释完了。</p><br><br><p>那么问题又来了。</p><br><h4 id="为什么可重复读要引入间隙锁" tabindex="-1"><a class="header-anchor" href="#为什么可重复读要引入间隙锁"><span>为什么可重复读要引入间隙锁？</span></a></h4><p>可重复读最关键的一个点是，我开了一个事务，在这个事务里，<strong>不管我读多少次，我读到的数据都要是一样的</strong>，这才是<strong>可重复读</strong>。如果 mysql 不存在间隙锁，那么就有可能出现下面的情况。</p><figure><img src="https://cdn.xiaobaidebug.top/image/幻读3.drawio.png" alt="幻读3.drawio" tabindex="0" loading="lazy"><figcaption>幻读3.drawio</figcaption></figure><p>在一个事务里，读多次数据，发现每次数据都不同。就好像出现幻觉一样，所以又叫<strong>幻读</strong>。</p><p>这就跟可重复读的定义违背了。</p><p>通过加入间隙锁，线程 1 在第一次执行 select for update 后，线程 2 如果再尝试去写数据，就会被阻塞，直到线程 1 执行 commit 后，线程 2 阻塞结束然后执行 insert。</p><figure><img src="https://cdn.xiaobaidebug.top/image/间隙锁解决幻读.png" alt="间隙锁解决幻读" tabindex="0" loading="lazy"><figcaption>间隙锁解决幻读</figcaption></figure><p>可重复读隔离级别下，<strong>通过引入间隙锁，是为了解决幻读的问题。</strong></p><br><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><p>mysql 锁从粒度上分为行锁和表锁，从行为上又分为读锁和写锁，也就是 S 锁和 X 锁。</p></li><li><p>两个线程在持有锁的同时，又想等待对方把锁释放掉，则会发生死锁。</p></li><li><p>两个间隙锁之间不会互斥。</p></li><li><p>在可重复读隔离级别下，通过间隙锁解决了幻读。</p></li></ul><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h3><p>《MYSQL 内核：INNODB 存储引擎 卷 1》</p><br><h3 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h3><p>这篇文章只是想通过一个例子讲讲锁的内容。并不是希望通过这样的方式来保证并发写入唯一数据。</p><p>如果只是想在<strong>并发写</strong>时保证<strong>数据唯一</strong>的话，加个<strong>唯一索引</strong>吧，别搞上面这些花里胡哨的。具体的可以看我之前写过的文章。</p><br><figure><img src="https://cdn.xiaobaidebug.top/image/902ee1871d.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><p>最近原创更文的阅读量稳步下跌，思前想后，夜里辗转反侧。</p><p>我有个不成熟的请求。</p><figure><img src="https://cdn.xiaobaidebug.top/image/u=2281575747,3550568508&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><p><strong>离开广东好长时间了，好久没人叫我靓仔了。</strong></p><p>大家可以在<strong>评论区</strong>里，叫我一声靓仔吗？</p><p>我这么善良质朴的愿望，能被满足吗？</p><p>如果实在叫不出口的话，能帮我点下右下角的<strong>点赞和在看</strong>吗？</p><br><h6 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h6><p><strong>点击</strong>下方名片，关注公众号:【小白 debug】<br><img src="https://cdn.xiaobaidebug.top/1696069689495.png" alt="" loading="lazy"></p><br><p>不满足于在留言区说骚话？</p><p>加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。就<strong>超！开！心！</strong></p><img src="https://cdn.xiaobaidebug.top/image-20220522162616202.png" width="50%" align="center"><figure><img src="https://cdn.xiaobaidebug.top/image/006APoFYly1g5q9gn2jipg308w08wqdi.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h3>`,115),u={href:"https://mp.weixin.qq.com/s/PP80aD-GQp7VtgyfHj392g",target:"_blank",rel:"noopener noreferrer"},E=n("li",null,[n("a",{href:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/TCP%E7%B2%98%E5%8C%85%EF%BC%81%E6%95%B0%E6%8D%AE%E5%8C%85%EF%BC%9A%E6%88%91%E5%8F%AA%E6%98%AF%E7%8A%AF%E4%BA%86%E6%AF%8F%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E9%83%BD%E4%BC%9A%E7%8A%AF%E7%9A%84%E9%94%99%EF%BC%8C%E7%A1%AC%E6%A0%B8%E5%9B%BE%E8%A7%A3"},"TCP 粘包 数据包：我只是犯了每个数据包都会犯的错 |硬核图解")],-1),m=n("li",null,[n("a",{href:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%EF%BC%81%E6%97%A2%E7%84%B6IP%E5%B1%82%E4%BC%9A%E5%88%86%E7%89%87%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88TCP%E5%B1%82%E4%B9%9F%E8%BF%98%E8%A6%81%E5%88%86%E6%AE%B5%EF%BC%9F"},"动图图解！既然 IP 层会分片，为什么 TCP 层也还要分段？")],-1);function k(B,b){const a=o("ExternalLinkIcon");return i(),r("div",null,[c,n("p",null,[s("mysql 有四层隔离级别，应对不同的事务并发处理能力。之前写的"),n("a",g,[s("《mysql 主库更新后，从库都读到最新值了，主库还有可能读到旧值吗？》"),e(a)]),s(",里面用一个例子简单介绍了他们之间的区别。")]),d,n("ul",null,[n("li",null,[n("a",u,[s("程序员防猝死指南"),e(a)])]),E,m])])}const y=p(l,[["render",k],["__file","为什么mysql插入不存在的数据会产生死锁？.html.vue"]]),f=JSON.parse('{"path":"/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E6%8F%92%E5%85%A5%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%BA%A7%E7%94%9F%E6%AD%BB%E9%94%81%EF%BC%9F.html","title":"为什么 mysql 插入不存在的数据会产生死锁？","lang":"zh-CN","frontmatter":{"description":"为什么 mysql 插入不存在的数据会产生死锁？ mysql 的读写锁这个话题，老难了。 水太深，容易把握不住。 看书吧犯困。 但面试又绕不过去。 今天我们面向一个例子学习，希望能让大家提起一点兴趣。 直接开始吧。 有这么一张表，建表 sql 如下。 这里需要关注的是，电话号码这一列，是加了普通索引的。 四层隔离级别四层隔离级别 mysql 有四层隔离...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E6%8F%92%E5%85%A5%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%BA%A7%E7%94%9F%E6%AD%BB%E9%94%81%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"为什么 mysql 插入不存在的数据会产生死锁？"}],["meta",{"property":"og:description","content":"为什么 mysql 插入不存在的数据会产生死锁？ mysql 的读写锁这个话题，老难了。 水太深，容易把握不住。 看书吧犯困。 但面试又绕不过去。 今天我们面向一个例子学习，希望能让大家提起一点兴趣。 直接开始吧。 有这么一张表，建表 sql 如下。 这里需要关注的是，电话号码这一列，是加了普通索引的。 四层隔离级别四层隔离级别 mysql 有四层隔离..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/image/四层隔离级别.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T07:59:24.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"为什么 mysql 插入不存在的数据会产生死锁？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-03-04T07:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么 mysql 插入不存在的数据会产生死锁？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/image/四层隔离级别.png\\",\\"https://cdn.xiaobaidebug.top/image/user%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E5%A7%8B%E7%8A%B6%E6%80%81-20220409140411351.png\\",\\"https://cdn.xiaobaidebug.top/image/%E9%94%81%E8%A1%A8.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/%E9%94%81%E8%A1%8C.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/%E8%AF%BB%E5%86%99%E9%94%81%E5%85%BC%E5%AE%B9%E6%80%A7.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/%E6%AD%BB%E9%94%81.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/phone=2不存在.png\\",\\"https://cdn.xiaobaidebug.top/image/四层隔离级别.png\\",\\"https://cdn.xiaobaidebug.top/image/RR%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8A%A0%E9%94%81%E5%B9%B6%E5%8F%91%E5%86%99%E6%95%B0%E6%8D%AE%E4%BC%9A%E6%AD%BB%E9%94%81%E5%8A%A0%E6%B3%A8%E9%87%8A.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image-20220626224918681.png\\",\\"https://cdn.xiaobaidebug.top/image/%E5%B9%BB%E8%AF%BB3.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/%E9%97%B4%E9%9A%99%E9%94%81%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB.png\\",\\"https://cdn.xiaobaidebug.top/image/902ee1871d.jpg\\",\\"https://cdn.xiaobaidebug.top/image/u=2281575747,3550568508&fm=253&fmt=auto&app=120&f=JPEG.jpeg\\",\\"https://cdn.xiaobaidebug.top/1696069689495.png\\",\\"https://cdn.xiaobaidebug.top/image/006APoFYly1g5q9gn2jipg308w08wqdi.gif\\"],\\"dateModified\\":\\"2024-03-04T07:59:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E6%8F%92%E5%85%A5%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%BA%A7%E7%94%9F%E6%AD%BB%E9%94%81%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88mysql%E6%8F%92%E5%85%A5%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E4%BA%A7%E7%94%9F%E6%AD%BB%E9%94%81%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"为什么 mysql 插入不存在的数据会产生死锁？"}],["meta",{"property":"og:description","content":"为什么 mysql 插入不存在的数据会产生死锁？ mysql 的读写锁这个话题，老难了。 水太深，容易把握不住。 看书吧犯困。 但面试又绕不过去。 今天我们面向一个例子学习，希望能让大家提起一点兴趣。 直接开始吧。 有这么一张表，建表 sql 如下。 这里需要关注的是，电话号码这一列，是加了普通索引的。 四层隔离级别四层隔离级别 mysql 有四层隔离..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T07:59:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-04T07:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么 mysql 插入不存在的数据会产生死锁？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-04T07:59:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"锁","slug":"锁","link":"#锁","children":[]},{"level":3,"title":"死锁","slug":"死锁","link":"#死锁","children":[]},{"level":3,"title":"间隙锁","slug":"间隙锁","link":"#间隙锁","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":3,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":3,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1709539164000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":2}]},"readingTime":{"minutes":9.4,"words":2821},"filePathRelative":"中间件/mysql/核心知识点/为什么mysql插入不存在的数据会产生死锁？.md","localizedDate":"2024年2月19日","autoDesc":true}');export{y as comp,f as data};
