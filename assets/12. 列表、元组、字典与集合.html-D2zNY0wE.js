import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-CVBBBkvE.js";const e={},p=t(`<h1 id="_12-列表、元组、字典与集合" tabindex="-1"><a class="header-anchor" href="#_12-列表、元组、字典与集合"><span>12. 列表、元组、字典与集合</span></a></h1><p>今天我们要谈论的是 Python 中一些非常实用的数据容器，它们分别是 <strong>列表</strong> 、 <strong>元组</strong> 、<strong>字典</strong>和 <strong>集合</strong> 。别担心，我将用简单易懂的方式来向你介绍它们。</p><h2 id="数据容器-装数据的盒子" tabindex="-1"><a class="header-anchor" href="#数据容器-装数据的盒子"><span>数据容器：装数据的盒子</span></a></h2><p>首先，让我们来谈谈数据容器。它们就像是你存放东西的盒子，每种容器都有它们各自的特点和用途。</p><h2 id="列表-有序的数据集合" tabindex="-1"><a class="header-anchor" href="#列表-有序的数据集合"><span>列表：有序的数据集合</span></a></h2><p>先说说 <strong>列表</strong> 。它是一个可以容纳多个数据项的有序集合。举个例子，你可以把它想象成一个购物清单，里面包含了你要买的各种物品。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>shopping_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;香蕉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;橙子&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;西瓜&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列表中的每个元素都有一个位置，我们可以根据这个位置来访问或者修改元素。比如，我们可以用 <code>shopping_list[0]</code> 来访问第一个物品，也就是苹果。</p><h3 id="常用场景" tabindex="-1"><a class="header-anchor" href="#常用场景"><span>常用场景：</span></a></h3><p>假设你正在写一个程序，需要存储一组用户的姓名，你会怎么做？如果没有列表，你可能会为每个用户创建一个变量，这样会变得非常繁琐。而有了列表，你可以简洁地将所有用户名存储在一个容器中。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>usernames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="元组-不可变的数据集合" tabindex="-1"><a class="header-anchor" href="#元组-不可变的数据集合"><span>元组：不可变的数据集合</span></a></h2><p>下面是 <strong>元组</strong> 。元组和列表相似，但是它们是不可变的，也就是说一旦创建，元组的内容就不能被修改。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>coordinates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 <code>coordinates</code> 就是一个元组，里面包含了两个数字，分别是 3 和 5。你可以将它想象成一个坐标点的位置。</p><h3 id="常用场景-1" tabindex="-1"><a class="header-anchor" href="#常用场景-1"><span>常用场景：</span></a></h3><p>假设你正在编写一个游戏，需要表示一个固定的坐标位置，比如玩家的出生点，你会使用元组来确保这个位置在游戏中不会被意外修改。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>spawn_point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="字典-键值对的集合" tabindex="-1"><a class="header-anchor" href="#字典-键值对的集合"><span>字典：键值对的集合</span></a></h2><p>再来说说 <strong>字典</strong> 。字典是一种包含了键-值对的数据容器。举例来说，如果你要存储一个人的信息，比如姓名、年龄、城市，你可以使用一个字典。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&quot;city&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，&quot;name&quot;、&quot;age&quot;和&quot;city&quot;就是键，对应着&quot;小明&quot;、25 和&quot;北京&quot;这些值。</p><h3 id="常用场景-2" tabindex="-1"><a class="header-anchor" href="#常用场景-2"><span>常用场景：</span></a></h3><p>假设你正在开发一个用户注册系统，需要存储每个用户的信息，你可以使用字典来存储每个用户的用户名、密码和邮箱。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>user_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;example_user&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;secure_password&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;example@example.com&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典和集合的区别" tabindex="-1"><a class="header-anchor" href="#字典和集合的区别"><span>字典和集合的区别</span></a></h3><p>或许你会想，字典和集合看起来有些相似。但它们有一个重要的区别：字典是键-值对的集合，而集合是唯一的元素集合。在字典中，你可以通过键来获取值，但在集合中，你只能检查某个元素是否存在。</p><h2 id="集合-独一无二的元素集合" tabindex="-1"><a class="header-anchor" href="#集合-独一无二的元素集合"><span>集合：独一无二的元素集合</span></a></h2><p>最后，让我们了解一下 <strong>集合</strong> 。集合是一组唯一的元素的集合。它们类似于列表，但没有顺序，并且集合中的元素是独一无二的。如果有重复的内容放入，就只会保留一个，也就是说它有去重的效果。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>unique_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，集合 <code>unique_numbers</code> 中包含了五个唯一的数字。</p><h3 id="常用场景-3" tabindex="-1"><a class="header-anchor" href="#常用场景-3"><span>常用场景：</span></a></h3><p>假设你在开发一个投票系统，需要记录每个投票者的选择，你可以使用集合来确保每个投票者只能投一次票。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>voters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="何时使用字典和集合" tabindex="-1"><a class="header-anchor" href="#何时使用字典和集合"><span>何时使用字典和集合</span></a></h3><p>那么什么情况下应该使用字典，什么时候应该使用集合呢？如果你需要将某种信息与另一种信息关联起来，就像我们之前做的用户信息存储，那么字典会非常适合。而如果你只是想确保一组数据中的唯一性，那么集合就是一个很好的选择。</p><h2 id="实战例子-从列表中找出最大值" tabindex="-1"><a class="header-anchor" href="#实战例子-从列表中找出最大值"><span>实战例子：从列表中找出最大值</span></a></h2><p>好了，现在让我们来动手实践一下！假设我们有一个数字列表，我们要找出其中的最大值。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">]</span>

max_number <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最大值是：&quot;</span><span class="token punctuation">,</span> max_number<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们用 <code>max()</code> 函数找到了列表中的最大值，并将结果打印出来。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过这篇文章，我们学习了 Python 中四种重要的数据容器：列表、元组、字典和集合。它们分别用来存放多个数据、不可变的数据、键-值对和独一无二的元素。</p><p>希望你现在对这些容器有了更清晰的理解。继续加油，你已经迈出了成为 Python 大师的第一步！</p>`,43),o=[p];function i(l,c){return a(),s("div",null,o)}const d=n(e,[["render",i],["__file","12. 列表、元组、字典与集合.html.vue"]]),h=JSON.parse('{"path":"/python/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.%20%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88.html","title":"12. 列表、元组、字典与集合","lang":"zh-CN","frontmatter":{"description":"12. 列表、元组、字典与集合 今天我们要谈论的是 Python 中一些非常实用的数据容器，它们分别是 列表 、 元组 、字典和 集合 。别担心，我将用简单易懂的方式来向你介绍它们。 数据容器：装数据的盒子 首先，让我们来谈谈数据容器。它们就像是你存放东西的盒子，每种容器都有它们各自的特点和用途。 列表：有序的数据集合 先说说 列表 。它是一个可以容纳...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/python/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.%20%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"12. 列表、元组、字典与集合"}],["meta",{"property":"og:description","content":"12. 列表、元组、字典与集合 今天我们要谈论的是 Python 中一些非常实用的数据容器，它们分别是 列表 、 元组 、字典和 集合 。别担心，我将用简单易懂的方式来向你介绍它们。 数据容器：装数据的盒子 首先，让我们来谈谈数据容器。它们就像是你存放东西的盒子，每种容器都有它们各自的特点和用途。 列表：有序的数据集合 先说说 列表 。它是一个可以容纳..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-05T08:45:30.000Z"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2023-10-05T08:45:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12. 列表、元组、字典与集合\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-05T08:45:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/python/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.%20%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/python/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/12.%20%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"12. 列表、元组、字典与集合"}],["meta",{"property":"og:description","content":"12. 列表、元组、字典与集合 今天我们要谈论的是 Python 中一些非常实用的数据容器，它们分别是 列表 、 元组 、字典和 集合 。别担心，我将用简单易懂的方式来向你介绍它们。 数据容器：装数据的盒子 首先，让我们来谈谈数据容器。它们就像是你存放东西的盒子，每种容器都有它们各自的特点和用途。 列表：有序的数据集合 先说说 列表 。它是一个可以容纳..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-05T08:45:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-05T08:45:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12. 列表、元组、字典与集合\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-05T08:45:30.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"数据容器：装数据的盒子","slug":"数据容器-装数据的盒子","link":"#数据容器-装数据的盒子","children":[]},{"level":2,"title":"列表：有序的数据集合","slug":"列表-有序的数据集合","link":"#列表-有序的数据集合","children":[{"level":3,"title":"常用场景：","slug":"常用场景","link":"#常用场景","children":[]}]},{"level":2,"title":"元组：不可变的数据集合","slug":"元组-不可变的数据集合","link":"#元组-不可变的数据集合","children":[{"level":3,"title":"常用场景：","slug":"常用场景-1","link":"#常用场景-1","children":[]}]},{"level":2,"title":"字典：键值对的集合","slug":"字典-键值对的集合","link":"#字典-键值对的集合","children":[{"level":3,"title":"常用场景：","slug":"常用场景-2","link":"#常用场景-2","children":[]},{"level":3,"title":"字典和集合的区别","slug":"字典和集合的区别","link":"#字典和集合的区别","children":[]}]},{"level":2,"title":"集合：独一无二的元素集合","slug":"集合-独一无二的元素集合","link":"#集合-独一无二的元素集合","children":[{"level":3,"title":"常用场景：","slug":"常用场景-3","link":"#常用场景-3","children":[]},{"level":3,"title":"何时使用字典和集合","slug":"何时使用字典和集合","link":"#何时使用字典和集合","children":[]}]},{"level":2,"title":"实战例子：从列表中找出最大值","slug":"实战例子-从列表中找出最大值","link":"#实战例子-从列表中找出最大值","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1696495530000,"updatedTime":1696495530000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1}]},"readingTime":{"minutes":4.05,"words":1216},"filePathRelative":"python/第1章：Python 基础知识/12. 列表、元组、字典与集合.md","localizedDate":"2023年10月5日","autoDesc":true}');export{d as comp,h as data};
