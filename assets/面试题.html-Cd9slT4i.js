import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as r,c as p,a as e,d as a,b as l,e as n}from"./app-Bbeg9dwX.js";const h="/assets/image/docs/Aspose.Words.51b43265-f45e-4206-a945-0b7c10078cb5.034.png",o={},d=n('<h1 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h1><h2 id="什么是-linux" tabindex="-1"><a class="header-anchor" href="#什么是-linux"><span>什么是 Linux</span></a></h2><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX和 Unix 的多用户、多任务、支持多线程和多 CPU的操作系统。它能运行主要的 Unix 工具软件、应用程序和网络协议。它支持32 位和64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><h2 id="unix-和-linux-有什么区别" tabindex="-1"><a class="header-anchor" href="#unix-和-linux-有什么区别"><span>Unix 和 Linux 有什么区别？</span></a></h2><p>Linux 和 Unix 都是功能强大的操作系统，都是应用广泛的服务器操作系统，有很多相似之处，甚至有一部分人错误地认为 Unix 和 Linux 操作系统是一样的，然而，事实并非如此，以下是两者的区别。</p><ul><li>开源性：Linux 是一款开源操作系统，不需要付费，即可使用；Unix 是一款对源码实行知识产权保护的传统商业软件，使用需要付费授权使用。</li><li>跨平台性：Linux 操作系统具有良好的跨平台性能，可运行在多种硬件平台上；Unix 操作系统跨平台性能较弱，大多需与硬件配套使用。</li><li>可视化界面：Linux 除了进行命令行操作，还有窗体管理系统；Unix 只是命令行下的系统。</li><li>硬件环境：Linux 操作系统对硬件的要求较低，安装方法更易掌握；Unix 对硬件要求比较苛刻，按照难度较大。</li><li>用户群体：Linux 的用户群体很广泛，个人和企业均可使用；Unix 的用户群体比较窄，多是安全性要求高的大型企业使用，如银行、电信部门等，或者 Unix 硬件厂商使用，如 Sun等。相比于 Unix 操作系统，Linux 操作系统更受广大计算机爱好者的喜爱，主要原因是 Linux 操作系统具有 Unix 操作系统的全部功能，并且能够在普通 PC计算机上实现全部的 Unix 特性，开源免费的特性，更容易普及使用！</li></ul><h2 id="什么是-linux-内核" tabindex="-1"><a class="header-anchor" href="#什么是-linux-内核"><span>什么是 Linux 内核？</span></a></h2><p>Linux 系统的核心是内核。内核控制着计算机系统上的所有硬件和软件，在必要时分配硬件，并根据需要执行软件。</p><ul><li>系统内存管理</li><li>应用程序管理</li><li>硬件设备管理</li><li>文件系统管理</li></ul><h2 id="linux-的基本组件是什么" tabindex="-1"><a class="header-anchor" href="#linux-的基本组件是什么"><span>Linux 的基本组件是什么？</span></a></h2><p>就像任何其他典型的操作系统一样，Linux 拥有所有这些组件：内核，shell 和 GUI，系统实用程序和应用程序。Linux 比其他操作系统更具优势的是每个方面都附带其他功能，所有代码都可以免费下载。</p><h2 id="linux-的体系结构" tabindex="-1"><a class="header-anchor" href="#linux-的体系结构"><span>Linux 的体系结构</span></a></h2><p>从大的方面讲，Linux 体系结构可以分为两块：</p><ul><li>用户空间(User Space)：用户空间又包括用户的应用程序(User Applications)、C 库(C Library)。</li><li>内核空间(Kernel Space)：内核空间又包括系统调用接口(System Call Interface)、内核(Kernel)、平台架构相关的代码(Architecture - Dependent Kernel Code)。</li></ul><p>为什么 Linux 体系结构要分为用户空间和内核空间的原因？</p><ul><li>现代 CPU 实现了不同的工作模式，不同模式下 CPU 可以执行的指令和访问的寄存器不同。</li><li>Linux 从 CPU 的角度出发，为了保护内核的安全，把系统分成了两部分。用户空间和内核空间是程序执行的两种不同的状态，我们可以通过两种方式完成用户空间到内核空间的转移：1）系统调用；2）硬件中断。</li></ul><h2 id="bash-和-dos-之间的基本区别是什么" tabindex="-1"><a class="header-anchor" href="#bash-和-dos-之间的基本区别是什么"><span>BASH 和 DOS 之间的基本区别是什么？</span></a></h2><p>BASH和 DOS控制台之间的主要区别在于3 个方面：</p><ul><li>BASH命令区分大小写，而 DOS命令则不区分;</li><li>在 BASH下，/ character 是目录分隔符，\\作为转义字符。在 DOS下，/用作命令参数分隔符，\\是目录分隔符</li><li>DOS遵循命名文件中的约定，即8 个字符的文件名后跟一个点，扩展名为3 个字符。BASH没有遵循这样的惯例。</li></ul><h2 id="linux-开机启动过程" tabindex="-1"><a class="header-anchor" href="#linux-开机启动过程"><span>Linux 开机启动过程？</span></a></h2><p>了解即可</p><ul><li>主机加电自检，加载 BIOS 硬件信息</li><li>读取 MBR 的引导文件(GRUB、LILO)</li><li>引导 Linux 内核</li><li>运行第一个进程 init (进程号永远为1 )</li><li>进入相应的运行级别</li><li>运行终端，输入用户名和密码</li></ul><h2 id="linux-系统缺省的运行级别" tabindex="-1"><a class="header-anchor" href="#linux-系统缺省的运行级别"><span>Linux 系统缺省的运行级别？</span></a></h2><ul><li>关机</li><li>单机用户模式</li><li>字符界面的多用户模式(不支持网络)</li><li>字符界面的多用户模式</li><li>未分配使用</li><li>图形界面的多用户模式</li><li>重启</li></ul><h2 id="linux-使用的进程间通信方式" tabindex="-1"><a class="header-anchor" href="#linux-使用的进程间通信方式"><span>Linux 使用的进程间通信方式？</span></a></h2><ul><li>管道(pipe)、流管道(s_pipe)、有名管道(FIFO)</li><li>信号(signal)</li><li>消息队列</li><li>共享内存</li><li>信号量</li><li>套接字(socket)</li></ul><h2 id="linux-有哪些系统日志文件" tabindex="-1"><a class="header-anchor" href="#linux-有哪些系统日志文件"><span>Linux 有哪些系统日志文件？</span></a></h2><p>比较重要的是/var/log/messages 日志文件。</p><p>该日志文件是许多进程日志文件的汇总，从该文件可以看出任何入侵企图或成功的入侵。另外，如果胖友的系统里有<img src="'+h+'" alt="" loading="lazy">ELK 日志集中收集，它也会被收集进去。</p><h2 id="linux-系统安装多个桌面环境有帮助吗" tabindex="-1"><a class="header-anchor" href="#linux-系统安装多个桌面环境有帮助吗"><span>Linux 系统安装多个桌面环境有帮助吗？</span></a></h2><p>通常，一个桌面环境，如 KDE或 Gnome，足以在没有问题的情况下运行。尽管系统允许从一个环境切换到另一个环境，但这对用户来说都是优先考虑的问题。有些程序在一个环境中工作而在另一个环境中无法工作，因此它也可以被视为选择使用哪个环境的一个因素。</p><h2 id="什么是交换空间" tabindex="-1"><a class="header-anchor" href="#什么是交换空间"><span>什么是交换空间？</span></a></h2><p>交换空间是 Linux 使用的一定空间，用于临时保存一些并发运行的程序。当 RAM没有足够的内存来容纳正在执行的所有程序时，就会发生这种情况。</p><h2 id="什么是-root-帐户" tabindex="-1"><a class="header-anchor" href="#什么是-root-帐户"><span>什么是 Root 帐户</span></a></h2><p>root 帐户就像一个系统管理员帐户，允许你完全控制系统。你可以在此处创建和维护用户帐户，为每个帐户分配不同的权限。每次安装 Linux 时都是默认帐户。</p><h2 id="什么是-lilo" tabindex="-1"><a class="header-anchor" href="#什么是-lilo"><span>什么是 LILO？</span></a></h2><p>LILO是 Linux 的引导加载程序。它主要用于将 Linux 操作系统加载到主内存中，以便它可以开始运行。</p><h2 id="什么是-bash" tabindex="-1"><a class="header-anchor" href="#什么是-bash"><span>什么是 BASH？</span></a></h2><p>BASH是 Bourne Again SHell 的缩写。它由 Steve Bourne 编写，作为原始 Bourne Shell（由/ bin / sh 表示）的替代品。它结合了原始版本的 Bourne Shell 的所有功能，以及其他功能，使其更容易使用。从那以后，它已被改编</p><p>为运行 Linux 的大多数系统的默认 shell。</p><h2 id="什么是-cli" tabindex="-1"><a class="header-anchor" href="#什么是-cli"><span>什么是 CLI？</span></a></h2><p>命令行界面（英语：command-line interface，缩写]：CLI）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面</p><ul><li>CUI）。</li></ul><p>通常认为，命令行界面（CLI）没有图形用户界面（GUI）那么方便用户操作。因为，命令行界面的软件通常需要用户记忆操作的命令，但是，由于其本身的特点，命令行界面要较图形用户界面节约计算机系统的资源。在熟记命令的前提下，使用命令行界面往往要较使用图形用户界面的操作速度要快。所以，图形用户界面的操作系统中，都保留着可选的命令行界面。</p><h2 id="什么是-gui" tabindex="-1"><a class="header-anchor" href="#什么是-gui"><span>什么是 GUI？</span></a></h2><p>图形用户界面（Graphical User Interface，简称 GUI，又称图形用户接口）是指采用图形方式显示的计算机操作用户界面。图形用户界面是一种人与计算机通信的界面显示格式，允许用户使用鼠标等输入设备操纵屏幕上的图标或菜单选项，以选择命令、调用文件、启动程序或执行其它一些日常任务。与通过键盘输入文本或字符命令来完成例行任务的字符界面相比，图形用户界面有许多优点。</p><h2 id="开源的优势是什么" tabindex="-1"><a class="header-anchor" href="#开源的优势是什么"><span>开源的优势是什么？</span></a></h2><p>开源允许你将软件（包括源代码）免费分发给任何感兴趣的人。然后，人们可以添加功能，甚至可以调试和更正源代码中的错误。它们甚至可以让它运行得</p><p>更好，然后再次自由地重新分配这些增强的源代码。这最终使社区中的每个人受益。</p><h2 id="gnu-项目的重要性是什么" tabindex="-1"><a class="header-anchor" href="#gnu-项目的重要性是什么"><span>GNU 项目的重要性是什么？</span></a></h2><p>这种所谓的自由软件运动具有多种优势，例如可以自由地运行程序以及根据你的需要自由学习和修改程序。它还允许你将软件副本重新分发给其他人，以及自由改进软件并将其发布给公众。</p><h2 id="绝对路径用什么符号表示-当前目录、上层目录用什么表示-主目录用什么表示-切换目录用什么命令" tabindex="-1"><a class="header-anchor" href="#绝对路径用什么符号表示-当前目录、上层目录用什么表示-主目录用什么表示-切换目录用什么命令"><span>绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示? 切换目录用什么命令？</span></a></h2><p>绝对路径：如/etc/init.d<br> 当前目录和上层目录：./ ../<br> 主目录：~/<br> 切换目录：cd</p><h2 id="怎么查看当前进程-怎么执行退出-怎么查看当前路径" tabindex="-1"><a class="header-anchor" href="#怎么查看当前进程-怎么执行退出-怎么查看当前路径"><span>怎么查看当前进程？怎么执行退出？怎么查看当前路径？</span></a></h2><p>查看当前进程：ps<br> 执行退出：exit<br> 查看当前路径：pwd</p><h2 id="怎么清屏-怎么退出当前命令-怎么执行睡眠-怎么查看当前用户-id-查看指定帮助用什么命令" tabindex="-1"><a class="header-anchor" href="#怎么清屏-怎么退出当前命令-怎么执行睡眠-怎么查看当前用户-id-查看指定帮助用什么命令"><span>怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户 id？查看指定帮助用什么命令？</span></a></h2><p>清屏：clear<br> 退出当前命令：ctrl+c 彻底退出<br> 执行睡眠 ：ctrl+z 挂起当前进程fg 恢复后台<br> 查看当前用户 id：”id“：查看显示目前登陆账户的 uid 和 gid 及所属分组及用户名<br> 查看指定帮助：如 man adduser 这个很全 而且有例子；adduser --help 这个告诉你一些常用参数；info adduesr；</p><h2 id="ls-命令执行什么功能-可以带哪些参数-有什么区别" tabindex="-1"><a class="header-anchor" href="#ls-命令执行什么功能-可以带哪些参数-有什么区别"><span>Ls 命令执行什么功能？可以带哪些参数，有什么区别？</span></a></h2><p>ls 执行的功能：列出指定目录中的目录，以及文件<br> 哪些参数以及区别：a 所有文件l 详细信息，包括大小字节数，可读可写可执行的权限等</p><h2 id="建立软链接-快捷方式-以及硬链接的命令。" tabindex="-1"><a class="header-anchor" href="#建立软链接-快捷方式-以及硬链接的命令。"><span>建立软链接(快捷方式)，以及硬链接的命令。</span></a></h2><p>软链接：ln -s slink source<br> 硬链接：ln link source</p><h2 id="目录创建用什么命令-创建文件用什么命令-复制文件用什么命令" tabindex="-1"><a class="header-anchor" href="#目录创建用什么命令-创建文件用什么命令-复制文件用什么命令"><span>目录创建用什么命令？创建文件用什么命令？复制文件用什么命令？</span></a></h2><p>创建目录：mkdir<br> 创建文件：典型的如 touch，vi 也可以创建文件，其实只要向一个不存在的文件输出，都会创建文件<br> 复制文件：cp 7. 文件权限修改用什么命令？格式是怎么样的？<br> 文件权限修改：chmod<br> 格式如下：</p><p>$ chmod u+x file 给 file 的属主增加执行权限<br> $ chmod 751 file 给 file 的属主分配读、写、执行(7)的权限，给 file 的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限<br> $ chmod u=rwx,g=rx,o=x file 上例的另一种形式<br> $ chmod =r file 为所有用户分配读权限<br> $ chmod 444 file 同上例<br> $ chmod a-wx,a+r file同上例<br> $ chmod -R u+r directory 递归地给 directory 目录下所有文件和子目录的属主分配读的权限</p><h2 id="查看文件内容有哪些命令可以使用" tabindex="-1"><a class="header-anchor" href="#查看文件内容有哪些命令可以使用"><span>查看文件内容有哪些命令可以使用？</span></a></h2><p>vi 文件名 #编辑方式查看，可修改<br> cat 文件名 #显示全部文件内容<br> more 文件名 #分页显示文件内容<br> less 文件名 #与 more 相似，更好的是可以往前翻页<br> tail 文件名 #仅查看尾部，还可以指定行数<br> head 文件名 #仅查看头部,还可以指定行数</p><h2 id="随意写文件命令-怎么向屏幕输出带空格的字符串-比如-hello-world" tabindex="-1"><a class="header-anchor" href="#随意写文件命令-怎么向屏幕输出带空格的字符串-比如-hello-world"><span>随意写文件命令？怎么向屏幕输出带空格的字符串，比如”hello world”?</span></a></h2><p>写文件命令：vi</p><p>向屏幕输出带空格的字符串:echo hello world</p><h2 id="终端是哪个文件夹下的哪个文件-黑洞文件是哪个文件夹下的哪个命令" tabindex="-1"><a class="header-anchor" href="#终端是哪个文件夹下的哪个文件-黑洞文件是哪个文件夹下的哪个命令"><span>终端是哪个文件夹下的哪个文件？黑洞文件是哪个文件夹下的哪个命令？</span></a></h2><p>终端 /dev/tty</p><p>黑洞文件 /dev/null</p><h2 id="移动文件用哪个命令-改名用哪个命令" tabindex="-1"><a class="header-anchor" href="#移动文件用哪个命令-改名用哪个命令"><span>移动文件用哪个命令？改名用哪个命令？</span></a></h2><p>mv mv</p><h2 id="复制文件用哪个命令-如果需要连同文件夹一块复制呢-如果需要有提示功能呢" tabindex="-1"><a class="header-anchor" href="#复制文件用哪个命令-如果需要连同文件夹一块复制呢-如果需要有提示功能呢"><span>复制文件用哪个命令？如果需要连同文件夹一块复制呢？如果需要有提示功能呢？</span></a></h2><p>cp cp -r ？？？？</p><h2 id="删除文件用哪个命令-如果需要连目录及目录下文件一块删除呢-删除空文件夹用什么命令" tabindex="-1"><a class="header-anchor" href="#删除文件用哪个命令-如果需要连目录及目录下文件一块删除呢-删除空文件夹用什么命令"><span>删除文件用哪个命令？如果需要连目录及目录下文件一块删除呢？删除空文件夹用什么命令？</span></a></h2><p>rm rm -r rmdir</p><h2 id="linux-下命令有哪几种可使用的通配符-分别代表什么含义" tabindex="-1"><a class="header-anchor" href="#linux-下命令有哪几种可使用的通配符-分别代表什么含义"><span>Linux 下命令有哪几种可使用的通配符？分别代表什么含义?</span></a></h2><p>“？”可替代单个字符。</p><p>“*”可替代任意多个字符。</p><p>方括号“[charset]”可替代 charset 集中的任何单个字符，如[a-z]，[abABC]</p><h2 id="用什么命令对一个文件的内容进行统计-行号、单词数、字节数" tabindex="-1"><a class="header-anchor" href="#用什么命令对一个文件的内容进行统计-行号、单词数、字节数"><span>用什么命令对一个文件的内容进行统计？(行号、单词数、字节数)</span></a></h2><p>wc 命令 - c 统计字节数 - l 统计行数 - w 统计字数。</p><h2 id="grep-命令有什么用-如何忽略大小写-如何查找不含该串的行" tabindex="-1"><a class="header-anchor" href="#grep-命令有什么用-如何忽略大小写-如何查找不含该串的行"><span>Grep 命令有什么用？如何忽略大小写？如何查找不含该串的行?</span></a></h2><p>是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。<br> grep [stringSTRING] filename grep [^string] filename</p><h2 id="linux-中进程有哪几种状态-在-ps-显示出来的信息中-分别用什么符号表示的" tabindex="-1"><a class="header-anchor" href="#linux-中进程有哪几种状态-在-ps-显示出来的信息中-分别用什么符号表示的"><span>Linux 中进程有哪几种状态？在 ps 显示出来的信息中，分别用什么符号表示的？</span></a></h2><p>（1）、不可中断状态：进程处于睡眠状态，但是此刻进程是不可中断的。不可中断， 指进程不响应异步信号。<br> （2）、暂停状态/跟踪状态：向进程发送一个 SIGSTOP 信号，它就会因响应该信号 而进入 TASK_STOPPED 状态;当进程正在被跟踪时，它处于 TASK_TRACED 这个特殊的状态。<br> “正在被跟踪”指的是进程暂停下来，等待跟踪它的进程对它进行操作。</p><p>（3）、就绪状态：在 run_queue 队列里的状态</p><p>（4）、运行状态：在 run_queue 队列里的状态<br> （5）、可中断睡眠状态：处于这个状态的进程因为等待某某事件的发生（比如等待 socket 连接、等待信号量），而被挂起<br> （6）、zombie 状态（僵尸）：父亲没有通过 wait 系列的系统调用会顺便将子进程的尸体（task_struct）也释放掉<br> （7）、退出状态</p><p>D 不可中断 Uninterruptible（usually IO）<br> R 正在运行，或在队列中的进程<br> S 处于休眠状态<br> T 停止或被追踪<br> Z 僵尸进程<br> W 进入内存交换（从内核 2.6 开始无效）<br> X 死掉的进程</p><h2 id="怎么使一个命令在后台运行" tabindex="-1"><a class="header-anchor" href="#怎么使一个命令在后台运行"><span>怎么使一个命令在后台运行?</span></a></h2><p>一般都是使用 &amp; 在命令结尾来让程序自动运行。(命令后可以不追加空格)</p><h2 id="利用-ps-怎么显示所有的进程-怎么利用-ps-查看指定进程的信息" tabindex="-1"><a class="header-anchor" href="#利用-ps-怎么显示所有的进程-怎么利用-ps-查看指定进程的信息"><span>利用 ps 怎么显示所有的进程? 怎么利用 ps 查看指定进程的信息？</span></a></h2><p>ps -ef (system v 输出)</p><p>ps -aux bsd 格式输出</p><p>ps -ef | grep pid</p><h2 id="哪个命令专门用来查看后台任务" tabindex="-1"><a class="header-anchor" href="#哪个命令专门用来查看后台任务"><span>哪个命令专门用来查看后台任务?</span></a></h2><p>job -l</p><h2 id="把后台任务调到前台执行使用什么命令-把停下的后台任务在后台执行起来用什么命令" tabindex="-1"><a class="header-anchor" href="#把后台任务调到前台执行使用什么命令-把停下的后台任务在后台执行起来用什么命令"><span>把后台任务调到前台执行使用什么命令?把停下的后台任务在后台执行起来用什么命令?</span></a></h2><p>把后台任务调到前台执行 fg</p><p>把停下的后台任务在后台执行起来 bg</p><h2 id="终止进程用什么命令-带什么参数" tabindex="-1"><a class="header-anchor" href="#终止进程用什么命令-带什么参数"><span>终止进程用什么命令? 带什么参数?</span></a></h2><p>kill [-s &lt;信息名称或编号&gt;][程序] 或 kill [-l &lt;信息编号&gt;]</p><p>kill-9 pid</p><h2 id="怎么查看系统支持的所有信号" tabindex="-1"><a class="header-anchor" href="#怎么查看系统支持的所有信号"><span>怎么查看系统支持的所有信号？</span></a></h2><p>kill -l</p><h2 id="搜索文件用什么命令-格式是怎么样的" tabindex="-1"><a class="header-anchor" href="#搜索文件用什么命令-格式是怎么样的"><span>搜索文件用什么命令? 格式是怎么样的?</span></a></h2><p>find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定动作&gt;</p><p>whereis 加参数与文件名</p><p>locate 只加文件名</p><p>find 直接搜索磁盘，较慢。</p><p>find / -name &quot;string*&quot;</p><h2 id="查看当前谁在使用该主机用什么命令-查找自己所在的终端信息用什么命令" tabindex="-1"><a class="header-anchor" href="#查看当前谁在使用该主机用什么命令-查找自己所在的终端信息用什么命令"><span>查看当前谁在使用该主机用什么命令? 查找自己所在的终端信息用什么命令?</span></a></h2><p>查找自己所在的终端信息：who am i</p><p>查看当前谁在使用该主机：who</p><h2 id="使用什么命令查看用过的命令列表" tabindex="-1"><a class="header-anchor" href="#使用什么命令查看用过的命令列表"><span>使用什么命令查看用过的命令列表?</span></a></h2><p>history</p><h2 id="使用什么命令查看磁盘使用空间-空闲空间呢" tabindex="-1"><a class="header-anchor" href="#使用什么命令查看磁盘使用空间-空闲空间呢"><span>使用什么命令查看磁盘使用空间？空闲空间呢?</span></a></h2><p>df -hl<br> 文件系统 容量 已用 可用 已用% 挂载点<br> Filesystem Size Used Avail Use% Mounted on /dev/hda2 45G 19G 24G 44% /<br> /dev/hda1 494M 19M 450M 4% /boot</p><h2 id="使用什么命令查看网络是否连通" tabindex="-1"><a class="header-anchor" href="#使用什么命令查看网络是否连通"><span>使用什么命令查看网络是否连通?</span></a></h2><p>netstat</p><h2 id="使用什么命令查看-ip-地址及接口信息" tabindex="-1"><a class="header-anchor" href="#使用什么命令查看-ip-地址及接口信息"><span>使用什么命令查看 ip 地址及接口信息？</span></a></h2><p>ifconfig</p><h2 id="查看各类环境变量用什么命令" tabindex="-1"><a class="header-anchor" href="#查看各类环境变量用什么命令"><span>查看各类环境变量用什么命令?</span></a></h2><p>查看所有 env<br> 查看某个，如 home：env $HOME</p><h2 id="通过什么命令指定命令提示符" tabindex="-1"><a class="header-anchor" href="#通过什么命令指定命令提示符"><span>通过什么命令指定命令提示符?</span></a></h2>',127),c=e("p",null,[l("\\u：显示当前用户账号"),e("br"),l(" \\h：显示当前主机名"),e("br"),l(" \\W：只显示当前路径最后一个目录"),e("br"),l(" \\w：显示当前绝对路径（当前用户目录会以~代替）"),e("br"),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"P"),e("mi",null,"W"),e("mi",null,"D"),e("mtext",null,"：显示当前全路径"),e("mi",{mathvariant:"normal"},"$"),e("mtext",null,"：显示命令行’")]),e("annotation",{encoding:"application/x-tex"},"PWD：显示当前全路径 \\$：显示命令行’")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8056em","vertical-align":"-0.0556em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"W"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),e("span",{class:"mord cjk_fallback"},"：显示当前全路径"),e("span",{class:"mord"},"$"),e("span",{class:"mord cjk_fallback"},"：显示命令行"),e("span",{class:"mord"},"’")])])]),l("'或者’#'符号"),e("br"),l(" #：下达的第几个命令"),e("br"),l(' \\d：代表日期，格式为week day month date，例如："MonAug1"'),e("br"),l(" \\t：显示时间为24小时格式，如：HH：MM：SS"),e("br"),l(" \\T：显示时间为12小时格式"),e("br"),l(" \\A：显示时间为24小时格式：HH：MM"),e("br"),l(" \\v：BASH的版本信息 如export PS1=’[\\u@\\h\\w#]$‘")],-1),u=n(`<h2 id="查找命令的可执行文件是去哪查找的-怎么对其进行设置及添加" tabindex="-1"><a class="header-anchor" href="#查找命令的可执行文件是去哪查找的-怎么对其进行设置及添加"><span>查找命令的可执行文件是去哪查找的? 怎么对其进行设置及添加?</span></a></h2><p>whereis [-bfmsu][-B &lt;目录&gt;...][-M &lt;目录&gt;...][-S &lt;目录&gt;...][文件...]</p><p>补充说明：whereis 指令会在特定目录中查找符合条件的文件。这些文件的烈性应属于原始代码，二进制文件，或是帮助文件。</p><p>-b 只查找二进制文件。<br> -B&lt;目录&gt; 只在设置的目录下查找二进制文件。-f 不显示文件名前的路径名称。<br> -m 只查找说明文件。<br> -M&lt;目录&gt; 只在设置的目录下查找说明文件。-s 只查找原始代码文件。<br> -S&lt;目录&gt; 只在设置的目录下查找原始代码文件。-u 查找不包含指定类型的文件。<br> which 指令会在 PATH 变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。<br> -n 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。<br> -p 与-n 参数相同，但此处的包括了文件的路径。-w 指定输出时栏位的宽度。<br> -V 显示版本信息</p><h2 id="通过什么命令查找执行命令" tabindex="-1"><a class="header-anchor" href="#通过什么命令查找执行命令"><span>通过什么命令查找执行命令?</span></a></h2><p>which 只能查可执行文件</p><p>whereis 只能查二进制文件、说明文档，源文件等</p><h2 id="怎么对命令进行取别名" tabindex="-1"><a class="header-anchor" href="#怎么对命令进行取别名"><span>怎么对命令进行取别名？</span></a></h2><p>alias la=&#39;ls -a&#39;</p><h2 id="du-和-df-的定义-以及区别" tabindex="-1"><a class="header-anchor" href="#du-和-df-的定义-以及区别"><span>du 和 df 的定义，以及区别？</span></a></h2><p>du 显示目录或文件的大小</p><p>df 显示每个&lt;文件&gt;所在的文件系统的信息，默认是显示所有文件系统。<br> （文件系统分配其中的一些磁盘块用来记录它自身的一些数据，如 i 节点，磁盘分布图，间接块，超级块等。这些数据对大多数用户级的程序来说是不可见的，通常称为 Meta Data。） du 命令是用户级的程序，它不考虑 Meta Data，而 df 命令则查看文件系统的磁盘分配图并考虑 Meta Data。<br> df 命令获得真正的文件系统数据，而 du 命令只查看文件系统的部分情况。</p><h2 id="awk-详解。" tabindex="-1"><a class="header-anchor" href="#awk-详解。"><span>awk 详解。</span></a></h2><p>awk &#39;{pattern + action}&#39; {filenames}<br> #cat /etc/passwd |awk -F &#39;:&#39; &#39;{print $1&quot;\\t&quot;$7}&#39; //-F 的意思是以&#39;:&#39;分隔 root /bin/bash<br> daemon /bin/sh 搜索/etc/passwd 有 root 关键字的所有行</p><p>#awk -F: &#39;/root/&#39; /etc/passwd root❌0:0:root:/root:/bin/bash</p><h2 id="当你需要给命令绑定一个宏或者按键的时候-应该怎么做呢" tabindex="-1"><a class="header-anchor" href="#当你需要给命令绑定一个宏或者按键的时候-应该怎么做呢"><span>当你需要给命令绑定一个宏或者按键的时候，应该怎么做呢？</span></a></h2><p>可以使用bind命令，bind可以很方便地在shell中实现宏或按键的绑定。</p><p>在进行按键绑定的时候，我们需要先获取到绑定按键对应的字符序列。</p><p>比如获取F12的字符序列获取方法如下：先按下Ctrl+V,然后按下F12 .我们就可以得到F12的字符序列 ^[[24~。</p><p>接着使用bind进行绑定。</p><p>[root@localhost ~]# bind ‘”\\e[24~&quot;:&quot;date&quot;&#39;</p><p>注意：相同的按键在不同的终端或终端模拟器下可能会产生不同的字符序列。</p><p>【附】也可以使用showkey -a命令查看按键对应的字符序列。</p><h2 id="如果一个linux新手想要知道当前系统支持的所有命令的列表-他需要怎么做" tabindex="-1"><a class="header-anchor" href="#如果一个linux新手想要知道当前系统支持的所有命令的列表-他需要怎么做"><span>如果一个linux新手想要知道当前系统支持的所有命令的列表，他需要怎么做？</span></a></h2><p>使用命令compgen ­-c，可以打印出所有支持的命令列表。</p><p>[root@localhost ~]$ compgen -c<br> l.<br> ll<br> ls<br> which<br> if<br> then<br> else<br> elif<br> fi<br> case<br> esac<br> for<br> select<br> while<br> until<br> do<br> done<br> …</p><h2 id="如果你的助手想要打印出当前的目录栈-你会建议他怎么做" tabindex="-1"><a class="header-anchor" href="#如果你的助手想要打印出当前的目录栈-你会建议他怎么做"><span>如果你的助手想要打印出当前的目录栈，你会建议他怎么做？</span></a></h2><p>使用Linux 命令dirs可以将当前的目录栈打印出来。</p><p>[root@localhost ~]# dirs<br> /usr/share/X11<br> 【附】：目录栈通过pushd popd 来操作。</p><h2 id="你的系统目前有许多正在运行的任务-在不重启机器的条件下-有什么方法可以把所有正在运行的进程移除呢" tabindex="-1"><a class="header-anchor" href="#你的系统目前有许多正在运行的任务-在不重启机器的条件下-有什么方法可以把所有正在运行的进程移除呢"><span>你的系统目前有许多正在运行的任务，在不重启机器的条件下，有什么方法可以把所有正在运行的进程移除呢？</span></a></h2><p>使用linux命令 ’disown -r ’可以将所有正在运行的进程移除。</p><h2 id="bash-shell-中的hash-命令有什么作用" tabindex="-1"><a class="header-anchor" href="#bash-shell-中的hash-命令有什么作用"><span>bash shell 中的hash 命令有什么作用？</span></a></h2><p>linux命令’hash’管理着一个内置的哈希表，记录了已执行过的命令的完整路径, 用该命令可以打印出你所使用过的命令以及执行的次数。</p><p>[root@localhost ~]# hash<br> hits command<br> 2 /bin/ls<br> 2 /bin/su</p><h2 id="哪一个bash内置命令能够进行数学运算。" tabindex="-1"><a class="header-anchor" href="#哪一个bash内置命令能够进行数学运算。"><span>哪一个bash内置命令能够进行数学运算。</span></a></h2><p>bash shell 的内置命令let 可以进行整型数的数学运算。</p><p>#! /bin/bash<br> …<br> …<br> let c=a+b<br> …<br> …</p><h2 id="怎样一页一页地查看一个大文件的内容呢" tabindex="-1"><a class="header-anchor" href="#怎样一页一页地查看一个大文件的内容呢"><span>怎样一页一页地查看一个大文件的内容呢？</span></a></h2><p>通过管道将命令”cat file_name.txt” 和 ’more’ 连接在一起可以实现这个需要.</p><p>[root@localhost ~]# cat file_name.txt | more</p><h2 id="数据字典属于哪一个用户的" tabindex="-1"><a class="header-anchor" href="#数据字典属于哪一个用户的"><span>数据字典属于哪一个用户的？</span></a></h2><p>数据字典是属于’SYS’用户的，用户‘SYS’ 和 ’SYSEM’是由系统默认自动创建的</p><h2 id="怎样查看一个linux命令的概要与用法-假设你在-bin目录中偶然看到一个你从没见过的的命令-怎样才能知道它的作用和用法呢" tabindex="-1"><a class="header-anchor" href="#怎样查看一个linux命令的概要与用法-假设你在-bin目录中偶然看到一个你从没见过的的命令-怎样才能知道它的作用和用法呢"><span>怎样查看一个linux命令的概要与用法？假设你在/bin目录中偶然看到一个你从没见过的的命令，怎样才能知道它的作用和用法呢？</span></a></h2><p>使用命令whatis 可以先出显示出这个命令的用法简要，比如，你可以使用whatis zcat 去查看‘zcat’的介绍以及使用简要。</p><p>[root@localhost ~]# whatis zcat<br> zcat [gzip] (1) – compress or expand files</p><h2 id="使用哪一个命令可以查看自己文件系统的磁盘空间配额呢" tabindex="-1"><a class="header-anchor" href="#使用哪一个命令可以查看自己文件系统的磁盘空间配额呢"><span>使用哪一个命令可以查看自己文件系统的磁盘空间配额呢？</span></a></h2><p>使用命令repquota 能够显示出一个文件系统的配额信息</p><p>【附】只有root用户才能够查看其它用户的配额。</p><h2 id="说一下异步和非阻塞的区别" tabindex="-1"><a class="header-anchor" href="#说一下异步和非阻塞的区别"><span>说一下异步和非阻塞的区别?</span></a></h2><ul><li>异步和非阻塞的区别:</li></ul><ol><li>异步：调用在发出之后，这个调用就直接返回，不管有无结果；异步是过程。</li><li>非阻塞：关注的是程序在等待调用结果（消息，返回值）时的状态，指在不能立刻得到结果之前，该调用不会阻塞当前线程。</li></ol><ul><li>同步和异步的区别：</li></ul><ol><li>步：一个服务的完成需要依赖其他服务时，只有等待被依赖的服务完成后，才算完成，这是一种可靠的服务序列。要么成功都成功，失败都失败，服务的状态可以保持一致。</li><li>异步：一个服务的完成需要依赖其他服务时，只通知其他依赖服务开始执行，而不需要等待被依赖的服务完成，此时该服务就算完成了。被依赖的服务是否最终完成无法确定，一次它是一个不可靠的服务序列。</li></ol><ul><li>消息通知中的同步和异步：</li></ul><ol><li>同步：当一个同步调用发出后，调用者要一直等待返回消息（或者调用结果）通知后，才能进行后续的执行。</li><li>异步：当一个异步过程调用发出后，调用者不能立刻得到返回消息（结果）。在调用结束之后，通过消息回调来通知调用者是否调用成功。</li></ol><ul><li>阻塞与非阻塞的区别：</li></ul><ol><li>阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起，一直处于等待消息通知，不能够执行其他业务,函数只有在得到结果之后才会返回。</li><li>非阻塞：非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</li></ol><p>同步与异步是对应的，它们是线程之间的关系，两个线程之间要么是同步的，要么是异步的。</p><p>阻塞与非阻塞是对同一个线程来说的，在某个时刻，线程要么处于阻塞，要么处于非阻塞。</p><p>阻塞是使用同步机制的结果，非阻塞则是使用异步机制的结果。</p><h2 id="滑动窗口的概念以及应用" tabindex="-1"><a class="header-anchor" href="#滑动窗口的概念以及应用"><span>滑动窗口的概念以及应用?</span></a></h2><p>滑动窗口概念不仅存在于数据链路层，也存在于传输层，两者有不同的协议，但基本原理是相近的。其中一个重要区别是，一个是针对于帧的传送，另一个是字节数据的传送。</p><p>滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。参见滑动窗口如何根据网络拥塞发送数据仿真视频。</p><p>滑动窗口协议是用来改善吞吐量的一种技术，即容许发送方在接收任何应答之前传送附加的包。接收方告诉发送方在某一时刻能送多少包（称窗口尺寸）。</p><p>CP中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为0时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个1字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。</p><h2 id="epoll原理" tabindex="-1"><a class="header-anchor" href="#epoll原理"><span>Epoll原理.</span></a></h2><p>开发高性能网络程序时，windows开发者们言必称Iocp，linux开发者们则言必称Epoll。大家都明白Epoll是一种IO多路复用技术，可以非常高效的处理数以百万计的Socket句柄，比起以前的Select和Poll效率提高了很多。</p><p>先简单了解下如何使用C库封装的3个epoll系统调用。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int epoll_create(int size);  
int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);  
int epoll_wait(int epfd, struct epoll_event *events,int maxevents, int timeout);  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用起来很清晰，首先要调用<code>epoll_create</code>建立一个epoll对象。参数size是内核保证能够正确处理的最大句柄数，多于这个最大数时内核可不保证效果。 epoll_ctl可以操作上面建立的epoll，例如，将刚建立的<code>socket</code>加入到epoll中让其监控，或者把 epoll正在监控的某个socket句柄移出epoll，不再监控它等等。</p><p><code>epoll_wait</code>在调用时，在给定的timeout时间内，当在监控的所有句柄中有事件发生时，就返回用户态的进程。</p><p>从调用方式就可以看到epoll相比select/poll的优越之处是,因为后者每次调用时都要传递你所要监控的所有socket给select/poll系统调用，这意味着需要将用户态的socket列表copy到内核态，如果以万计的句柄会导致每次都要copy几十几百KB的内存到内核态，非常低效。而我们调用<code>epoll_wait</code>时就相当于以往调用select/poll，但是这时却不用传递socket句柄给内核，因为内核已经在epoll_ctl中拿到了要监控的句柄列表。</p><p>所以，实际上在你调用<code>epoll_create</code>后，内核就已经在内核态开始准备帮你存储要监控的句柄了，每次调用<code>epoll_ctl</code>只是在往内核的数据结构里塞入新的socket句柄。</p><p>在内核里，一切皆文件。所以，epoll向内核注册了一个文件系统，用于存储上述的被监控socket。当你调用epoll_create时，就会在这个虚拟的epoll文件系统里创建一个file结点。当然这个file不是普通文件，它只服务于epoll。</p><p>epoll在被内核初始化时（操作系统启动），同时会开辟出epoll自己的内核高速cache区，用于安置每一个我们想监控的socket，这些socket会以红黑树的形式保存在内核cache里，以支持快速的查找、插入、删除。这个内核高速cache区，就是建立连续的物理内存页，然后在之上建立slab层，通常来讲，就是物理上分配好你想要的size的内存对象，每次使用时都是使用空闲的已分配好的对象。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>static int __init eventpoll_init(void)  {  
    ... ...  
  
    /* Allocates slab cache used to allocate &quot;struct epitem&quot; items */  
    epi_cache = kmem_cache_create(&quot;eventpoll_epi&quot;, sizeof(struct epitem),  
            0, SLAB_HWCACHE_ALIGN|EPI_SLAB_DEBUG|SLAB_PANIC,  
            NULL, NULL);  
  
    /* Allocates slab cache used to allocate &quot;struct eppoll_entry&quot; */  
    pwq_cache = kmem_cache_create(&quot;eventpoll_pwq&quot;,  
            sizeof(struct eppoll_entry), 0,  
            EPI_SLAB_DEBUG|SLAB_PANIC, NULL, NULL);  
 ... ...  
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>epoll的高效就在于，当我们调用<code>epoll_ctl</code>往里塞入百万个句柄时，<code>epoll_wait</code>仍然可以飞快的返回，并有效的将发生事件的句柄给我们用户。这是由于我们在调用<code>epoll_create</code>时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里建了个红黑树用于存储以后epoll_ctl传来的socket外，还会再建立一个list链表，用于存储准备就绪的事件，当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。所以，epoll_wait非常高效。</p><p>而且，通常情况下即使我们要监控百万计的句柄，大多一次也只返回很少量的准备就绪句柄而已，所以，epoll_wait仅需要从内核态copy少量的句柄到用户态而已，因此就会非常的高效！</p><p>然而,这个准备就绪list链表是怎么维护的呢？当我们执行epoll_ctl时，除了把socket放到epoll文件系统里file对象对应的红黑树上之外，还会给内核中断处理程序注册一个回调函数，告诉内核，如果这个句柄的中断到了，就把它放到准备就绪list链表里。所以，当一个socket上有数据到了，内核在把网卡上的数据copy到内核中后就来把socket插入到准备就绪链表里了。</p><p>如此，一个红黑树，一张准备就绪句柄链表，少量的内核cache，就帮我们解决了大并发下的socket处理问题。执行<code>epoll_create</code>时，创建了红黑树和就绪链表，执行epoll_ctl时，如果增加socket句柄，则检查在红黑树中是否存在，存在立即返回，不存在则添加到树干上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪链表中插入数据。执行epoll_wait时立刻返回准备就绪链表里的数据即可。</p><p>最后看看epoll独有的两种模式LT和ET。无论是LT和ET模式，都适用于以上所说的流程。区别是，LT模式下，只要一个句柄上的事件一次没有处理完，会在以后调用epoll_wait时每次返回这个句柄，而ET模式仅在第一次返回。</p><p>当一个socket句柄上有事件时，内核会把该句柄插入上面所说的准备就绪list链表，这时我们调用<code>epoll_wait</code>，会把准备就绪的socket拷贝到用户态内存，然后清空准备就绪list链表，最后，<code>epoll_wait</code>需要做的事情，就是检查这些socket，如果不是ET模式（就是LT模式的句柄了），并且这些socket上确实有未处理的事件时，又把该句柄放回到刚刚清空的准备就绪链表了。所以，非ET的句柄，只要它上面还有事件，epoll_wait每次都会返回。而ET模式的句柄，除非有新中断到，即使socket上的事件没有处理完，也是不会每次从epoll_wait返回的。</p><p>因此epoll比select的提高实际上是一个用空间换时间思想的具体应用.对比阻塞IO的处理模型, 可以看到采用了多路复用IO之后, 程序可以自由的进行自己除了IO操作之外的工作, 只有到IO状态发生变化的时候由多路复用IO进行通知, 然后再采取相应的操作, 而不用一直阻塞等待IO状态发生变化,提高效率.</p><h2 id="负载均衡原理是什么" tabindex="-1"><a class="header-anchor" href="#负载均衡原理是什么"><span>负载均衡原理是什么?</span></a></h2><p>负载均衡Load Balance）是高可用网络基础架构的关键组件，通常用于将工作负载分布到多个服务器来提高网站、应用、数据库或其他服务的性能和可靠性。负载均衡，其核心就是网络流量分发，分很多维度。</p><p>负载均衡（Load Balance）通常是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><p>负载均衡是建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。</p><p>通过一个例子详细介绍:</p><ul><li>没有负载均衡 web 架构</li></ul>`,89),b={href:"https://github.com/KeKe-Li/golang-interview-questions/blob/master/src/images/66.jpg",target:"_blank",rel:"noopener noreferrer"},x=e("img",{src:"https://cdn.jsdelivr.net/gh/xiaobaiTech/image/66-20220314170612324-20220314172038130.jpg",alt:"img",tabindex:"0",loading:"lazy"},null,-1),g=e("figcaption",null,"img",-1),m=e("p",null,"在这里用户是直连到 web 服务器，如果这个服务器宕机了，那么用户自然也就没办法访问了。 另外，如果同时有很多用户试图访问服务器，超过了其能处理的极限，就会出现加载速度缓慢或根本无法连接的情况。",-1),v=e("p",null,"而通过在后端引入一个负载均衡器和至少一个额外的 web 服务器，可以缓解这个故障。 通常情况下，所有的后端服务器会保证提供相同的内容，以便用户无论哪个服务器响应，都能收到一致的内容。",-1),f=e("ul",null,[e("li",null,"有负载均衡 web 架构")],-1),_={href:"https://github.com/KeKe-Li/golang-interview-questions/blob/master/src/images/67.jpg",target:"_blank",rel:"noopener noreferrer"},k=e("img",{src:"https://cdn.jsdelivr.net/gh/xiaobaiTech/image/67-20220314170612948.jpg",alt:"img",tabindex:"0",loading:"lazy"},null,-1),L=e("figcaption",null,"img",-1),w=n('<p>用户访问负载均衡器，再由负载均衡器将请求转发给后端服务器。在这种情况下，单点故障现在转移到负载均衡器上了。 这里又可以通过引入第二个负载均衡器来缓解。</p><p>那么负载均衡器的工作方式是什么样的呢,负载均衡器又可以处理什么样的请求？</p><p>负载均衡器的管理员能主要为下面四种主要类型的请求设置转发规则：</p><ul><li>HTTP (七层)</li><li>HTTPS (七层)</li><li>TCP (四层)</li><li>UDP (四层)</li></ul><p>负载均衡器如何选择要转发的后端服务器？</p><p>负载均衡器一般根据两个因素来决定要将请求转发到哪个服务器。首先，确保所选择的服务器能够对请求做出响应，然后根据预先配置的规则从健康服务器池（healthy pool）中进行选择。</p><p>因为，负载均衡器应当只选择能正常做出响应的后端服务器，因此就需要有一种判断后端服务器是否健康的方法。为了监视后台服务器的运行状况，运行状态检查服务会定期尝试使用转发规则定义的协议和端口去连接后端服务器。 如果，服务器无法通过健康检查，就会从池中剔除，保证流量不会被转发到该服务器，直到其再次通过健康检查为止。</p><p>负载均衡算法</p><p>负载均衡算法决定了后端的哪些健康服务器会被选中。 其中常用的算法包括：</p><ul><li>Round Robin（轮询）：为第一个请求选择列表中的第一个服务器，然后按顺序向下移动列表直到结尾，然后循环。</li><li>Least Connections（最小连接）：优先选择连接数最少的服务器，在普遍会话较长的情况下推荐使用。</li><li>Source：根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程度上保证特定用户能连接到相同的服务器。</li></ul><p>如果你的应用需要处理状态而要求用户能连接到和之前相同的服务器。可以通过 Source 算法基于客户端的 IP 信息创建关联，或者使用粘性会话（sticky sessions）。</p><p>除此之外，想要解决负载均衡器的单点故障问题，可以将第二个负载均衡器连接到第一个上，从而形成一个集群。</p><h2 id="lvs相关了解" tabindex="-1"><a class="header-anchor" href="#lvs相关了解"><span>LVS相关了解.</span></a></h2>',13),S={href:"http://www.linuxvirtualserver.org/",target:"_blank",rel:"noopener noreferrer"},U=e("p",null,"LVS的基本工作原理:",-1),E={href:"https://github.com/KeKe-Li/golang-interview-questions/blob/master/src/images/68.jpg",target:"_blank",rel:"noopener noreferrer"},I=e("img",{src:"https://cdn.jsdelivr.net/gh/xiaobaiTech/image/68-20220314170613889-20220314172115955.jpg",alt:"img",tabindex:"0",loading:"lazy"},null,-1),y=e("figcaption",null,"img",-1),B=n("<ol><li>当用户向负载均衡调度器（Director Server）发起请求，调度器将请求发往至内核空间</li><li>PREROUTING链首先会接收到用户请求，判断目标IP确定是本机IP，将数据包发往INPUT链</li><li>IPVS是工作在INPUT链上的，当用户请求到达INPUT时，IPVS会将用户请求和自己已定义好的集群服务进行比对，如果用户请求的就是定义的集群服务，那么此时IPVS会强行修改数据包里的目标IP地址及端口，并将新的数据包发往POSTROUTING链</li><li>POSTROUTING链接收数据包后发现目标IP地址刚好是自己的后端服务器，那么此时通过选路，将数据包最终发送给后端的服务器</li></ol><p>LVS的组成:</p><p>LVS 由2部分程序组成，包括 <code>ipvs</code> 和 <code>ipvsadm</code>。</p><ol><li>ipvs(ip virtual server)：一段代码工作在内核空间，叫ipvs，是真正生效实现调度的代码。</li><li>ipvsadm：另外一段是工作在用户空间，叫ipvsadm，负责为ipvs内核框架编写规则，定义谁是集群服务，而谁是后端真实的服务器(Real Server)</li></ol>",4),A={href:"https://www.cnblogs.com/liqing1009/p/8763045.html",target:"_blank",rel:"noopener noreferrer"};function T(P,O){const i=s("ExternalLinkIcon");return r(),p("div",null,[d,c,u,e("figure",null,[e("a",b,[x,a(i)]),g]),m,v,f,e("figure",null,[e("a",_,[k,a(i)]),L]),w,e("p",null,[l("LVS是 Linux Virtual Server 的简称，也就是Linux虚拟服务器。这是一个由章文嵩博士发起的一个开源项目，它的官方网站是"),e("a",S,[l("LinuxVirtualServer"),a(i)]),l("现在 LVS 已经是 Linux 内核标准的一部分。使用 LVS 可以达到的技术目标是：通过 LVS 达到的负载均衡技术和 Linux 操作系统实现一个高性能高可用的 Linux 服务器集群，它具有良好的可靠性、可扩展性和可操作性。 从而以低廉的成本实现最优的性能。LVS 是一个实现负载均衡集群的开源软件项目，LVS架构从逻辑上可分为调度层、Server集群层和共享存储。")]),U,e("figure",null,[e("a",E,[I,a(i)]),y]),B,e("p",null,[l("详细的LVS的介绍可以参考"),e("a",A,[l("LVS详解"),a(i)]),l(".")])])}const q=t(o,[["render",T],["__file","面试题.html.vue"]]),N=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84/%E8%BF%90%E7%BB%B4/%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"面试题","lang":"zh-CN","frontmatter":{"description":"面试题 什么是 Linux Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX和 Unix 的多用户、多任务、支持多线程和多 CPU的操作系统。它能运行主要的 Unix 工具软件、应用程序和网络协议。它支持32 位和64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E8%BF%90%E7%BB%B4/%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"面试题"}],["meta",{"property":"og:description","content":"面试题 什么是 Linux Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX和 Unix 的多用户、多任务、支持多线程和多 CPU的操作系统。它能运行主要的 Unix 工具软件、应用程序和网络协议。它支持32 位和64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://golangguide.top/assets/image/docs/Aspose.Words.51b43265-f45e-4206-a945-0b7c10078cb5.034.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-13T08:18:41.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"面试题"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-02-13T08:18:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试题\\",\\"image\\":[\\"https://golangguide.top/assets/image/docs/Aspose.Words.51b43265-f45e-4206-a945-0b7c10078cb5.034.png\\",\\"https://cdn.jsdelivr.net/gh/xiaobaiTech/image/66-20220314170612324-20220314172038130.jpg\\",\\"https://cdn.jsdelivr.net/gh/xiaobaiTech/image/67-20220314170612948.jpg\\",\\"https://cdn.jsdelivr.net/gh/xiaobaiTech/image/68-20220314170613889-20220314172115955.jpg\\"],\\"dateModified\\":\\"2024-02-13T08:18:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E8%BF%90%E7%BB%B4/%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E8%BF%90%E7%BB%B4/%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"面试题"}],["meta",{"property":"og:description","content":"面试题 什么是 Linux Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX和 Unix 的多用户、多任务、支持多线程和多 CPU的操作系统。它能运行主要的 Unix 工具软件、应用程序和网络协议。它支持32 位和64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-13T08:18:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-13T08:18:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-13T08:18:41.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是 Linux","slug":"什么是-linux","link":"#什么是-linux","children":[]},{"level":2,"title":"Unix 和 Linux 有什么区别？","slug":"unix-和-linux-有什么区别","link":"#unix-和-linux-有什么区别","children":[]},{"level":2,"title":"什么是 Linux 内核？","slug":"什么是-linux-内核","link":"#什么是-linux-内核","children":[]},{"level":2,"title":"Linux 的基本组件是什么？","slug":"linux-的基本组件是什么","link":"#linux-的基本组件是什么","children":[]},{"level":2,"title":"Linux 的体系结构","slug":"linux-的体系结构","link":"#linux-的体系结构","children":[]},{"level":2,"title":"BASH 和 DOS 之间的基本区别是什么？","slug":"bash-和-dos-之间的基本区别是什么","link":"#bash-和-dos-之间的基本区别是什么","children":[]},{"level":2,"title":"Linux 开机启动过程？","slug":"linux-开机启动过程","link":"#linux-开机启动过程","children":[]},{"level":2,"title":"Linux 系统缺省的运行级别？","slug":"linux-系统缺省的运行级别","link":"#linux-系统缺省的运行级别","children":[]},{"level":2,"title":"Linux 使用的进程间通信方式？","slug":"linux-使用的进程间通信方式","link":"#linux-使用的进程间通信方式","children":[]},{"level":2,"title":"Linux 有哪些系统日志文件？","slug":"linux-有哪些系统日志文件","link":"#linux-有哪些系统日志文件","children":[]},{"level":2,"title":"Linux 系统安装多个桌面环境有帮助吗？","slug":"linux-系统安装多个桌面环境有帮助吗","link":"#linux-系统安装多个桌面环境有帮助吗","children":[]},{"level":2,"title":"什么是交换空间？","slug":"什么是交换空间","link":"#什么是交换空间","children":[]},{"level":2,"title":"什么是 Root 帐户","slug":"什么是-root-帐户","link":"#什么是-root-帐户","children":[]},{"level":2,"title":"什么是 LILO？","slug":"什么是-lilo","link":"#什么是-lilo","children":[]},{"level":2,"title":"什么是 BASH？","slug":"什么是-bash","link":"#什么是-bash","children":[]},{"level":2,"title":"什么是 CLI？","slug":"什么是-cli","link":"#什么是-cli","children":[]},{"level":2,"title":"什么是 GUI？","slug":"什么是-gui","link":"#什么是-gui","children":[]},{"level":2,"title":"开源的优势是什么？","slug":"开源的优势是什么","link":"#开源的优势是什么","children":[]},{"level":2,"title":"GNU 项目的重要性是什么？","slug":"gnu-项目的重要性是什么","link":"#gnu-项目的重要性是什么","children":[]},{"level":2,"title":"绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示? 切换目录用什么命令？","slug":"绝对路径用什么符号表示-当前目录、上层目录用什么表示-主目录用什么表示-切换目录用什么命令","link":"#绝对路径用什么符号表示-当前目录、上层目录用什么表示-主目录用什么表示-切换目录用什么命令","children":[]},{"level":2,"title":"怎么查看当前进程？怎么执行退出？怎么查看当前路径？","slug":"怎么查看当前进程-怎么执行退出-怎么查看当前路径","link":"#怎么查看当前进程-怎么执行退出-怎么查看当前路径","children":[]},{"level":2,"title":"怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户 id？查看指定帮助用什么命令？","slug":"怎么清屏-怎么退出当前命令-怎么执行睡眠-怎么查看当前用户-id-查看指定帮助用什么命令","link":"#怎么清屏-怎么退出当前命令-怎么执行睡眠-怎么查看当前用户-id-查看指定帮助用什么命令","children":[]},{"level":2,"title":"Ls 命令执行什么功能？可以带哪些参数，有什么区别？","slug":"ls-命令执行什么功能-可以带哪些参数-有什么区别","link":"#ls-命令执行什么功能-可以带哪些参数-有什么区别","children":[]},{"level":2,"title":"建立软链接(快捷方式)，以及硬链接的命令。","slug":"建立软链接-快捷方式-以及硬链接的命令。","link":"#建立软链接-快捷方式-以及硬链接的命令。","children":[]},{"level":2,"title":"目录创建用什么命令？创建文件用什么命令？复制文件用什么命令？","slug":"目录创建用什么命令-创建文件用什么命令-复制文件用什么命令","link":"#目录创建用什么命令-创建文件用什么命令-复制文件用什么命令","children":[]},{"level":2,"title":"查看文件内容有哪些命令可以使用？","slug":"查看文件内容有哪些命令可以使用","link":"#查看文件内容有哪些命令可以使用","children":[]},{"level":2,"title":"随意写文件命令？怎么向屏幕输出带空格的字符串，比如”hello world”?","slug":"随意写文件命令-怎么向屏幕输出带空格的字符串-比如-hello-world","link":"#随意写文件命令-怎么向屏幕输出带空格的字符串-比如-hello-world","children":[]},{"level":2,"title":"终端是哪个文件夹下的哪个文件？黑洞文件是哪个文件夹下的哪个命令？","slug":"终端是哪个文件夹下的哪个文件-黑洞文件是哪个文件夹下的哪个命令","link":"#终端是哪个文件夹下的哪个文件-黑洞文件是哪个文件夹下的哪个命令","children":[]},{"level":2,"title":"移动文件用哪个命令？改名用哪个命令？","slug":"移动文件用哪个命令-改名用哪个命令","link":"#移动文件用哪个命令-改名用哪个命令","children":[]},{"level":2,"title":"复制文件用哪个命令？如果需要连同文件夹一块复制呢？如果需要有提示功能呢？","slug":"复制文件用哪个命令-如果需要连同文件夹一块复制呢-如果需要有提示功能呢","link":"#复制文件用哪个命令-如果需要连同文件夹一块复制呢-如果需要有提示功能呢","children":[]},{"level":2,"title":"删除文件用哪个命令？如果需要连目录及目录下文件一块删除呢？删除空文件夹用什么命令？","slug":"删除文件用哪个命令-如果需要连目录及目录下文件一块删除呢-删除空文件夹用什么命令","link":"#删除文件用哪个命令-如果需要连目录及目录下文件一块删除呢-删除空文件夹用什么命令","children":[]},{"level":2,"title":"Linux 下命令有哪几种可使用的通配符？分别代表什么含义?","slug":"linux-下命令有哪几种可使用的通配符-分别代表什么含义","link":"#linux-下命令有哪几种可使用的通配符-分别代表什么含义","children":[]},{"level":2,"title":"用什么命令对一个文件的内容进行统计？(行号、单词数、字节数)","slug":"用什么命令对一个文件的内容进行统计-行号、单词数、字节数","link":"#用什么命令对一个文件的内容进行统计-行号、单词数、字节数","children":[]},{"level":2,"title":"Grep 命令有什么用？如何忽略大小写？如何查找不含该串的行?","slug":"grep-命令有什么用-如何忽略大小写-如何查找不含该串的行","link":"#grep-命令有什么用-如何忽略大小写-如何查找不含该串的行","children":[]},{"level":2,"title":"Linux 中进程有哪几种状态？在 ps 显示出来的信息中，分别用什么符号表示的？","slug":"linux-中进程有哪几种状态-在-ps-显示出来的信息中-分别用什么符号表示的","link":"#linux-中进程有哪几种状态-在-ps-显示出来的信息中-分别用什么符号表示的","children":[]},{"level":2,"title":"怎么使一个命令在后台运行?","slug":"怎么使一个命令在后台运行","link":"#怎么使一个命令在后台运行","children":[]},{"level":2,"title":"利用 ps 怎么显示所有的进程? 怎么利用 ps 查看指定进程的信息？","slug":"利用-ps-怎么显示所有的进程-怎么利用-ps-查看指定进程的信息","link":"#利用-ps-怎么显示所有的进程-怎么利用-ps-查看指定进程的信息","children":[]},{"level":2,"title":"哪个命令专门用来查看后台任务?","slug":"哪个命令专门用来查看后台任务","link":"#哪个命令专门用来查看后台任务","children":[]},{"level":2,"title":"把后台任务调到前台执行使用什么命令?把停下的后台任务在后台执行起来用什么命令?","slug":"把后台任务调到前台执行使用什么命令-把停下的后台任务在后台执行起来用什么命令","link":"#把后台任务调到前台执行使用什么命令-把停下的后台任务在后台执行起来用什么命令","children":[]},{"level":2,"title":"终止进程用什么命令? 带什么参数?","slug":"终止进程用什么命令-带什么参数","link":"#终止进程用什么命令-带什么参数","children":[]},{"level":2,"title":"怎么查看系统支持的所有信号？","slug":"怎么查看系统支持的所有信号","link":"#怎么查看系统支持的所有信号","children":[]},{"level":2,"title":"搜索文件用什么命令? 格式是怎么样的?","slug":"搜索文件用什么命令-格式是怎么样的","link":"#搜索文件用什么命令-格式是怎么样的","children":[]},{"level":2,"title":"查看当前谁在使用该主机用什么命令? 查找自己所在的终端信息用什么命令?","slug":"查看当前谁在使用该主机用什么命令-查找自己所在的终端信息用什么命令","link":"#查看当前谁在使用该主机用什么命令-查找自己所在的终端信息用什么命令","children":[]},{"level":2,"title":"使用什么命令查看用过的命令列表?","slug":"使用什么命令查看用过的命令列表","link":"#使用什么命令查看用过的命令列表","children":[]},{"level":2,"title":"使用什么命令查看磁盘使用空间？空闲空间呢?","slug":"使用什么命令查看磁盘使用空间-空闲空间呢","link":"#使用什么命令查看磁盘使用空间-空闲空间呢","children":[]},{"level":2,"title":"使用什么命令查看网络是否连通?","slug":"使用什么命令查看网络是否连通","link":"#使用什么命令查看网络是否连通","children":[]},{"level":2,"title":"使用什么命令查看 ip 地址及接口信息？","slug":"使用什么命令查看-ip-地址及接口信息","link":"#使用什么命令查看-ip-地址及接口信息","children":[]},{"level":2,"title":"查看各类环境变量用什么命令?","slug":"查看各类环境变量用什么命令","link":"#查看各类环境变量用什么命令","children":[]},{"level":2,"title":"通过什么命令指定命令提示符?","slug":"通过什么命令指定命令提示符","link":"#通过什么命令指定命令提示符","children":[]},{"level":2,"title":"查找命令的可执行文件是去哪查找的? 怎么对其进行设置及添加?","slug":"查找命令的可执行文件是去哪查找的-怎么对其进行设置及添加","link":"#查找命令的可执行文件是去哪查找的-怎么对其进行设置及添加","children":[]},{"level":2,"title":"通过什么命令查找执行命令?","slug":"通过什么命令查找执行命令","link":"#通过什么命令查找执行命令","children":[]},{"level":2,"title":"怎么对命令进行取别名？","slug":"怎么对命令进行取别名","link":"#怎么对命令进行取别名","children":[]},{"level":2,"title":"du 和 df 的定义，以及区别？","slug":"du-和-df-的定义-以及区别","link":"#du-和-df-的定义-以及区别","children":[]},{"level":2,"title":"awk 详解。","slug":"awk-详解。","link":"#awk-详解。","children":[]},{"level":2,"title":"当你需要给命令绑定一个宏或者按键的时候，应该怎么做呢？","slug":"当你需要给命令绑定一个宏或者按键的时候-应该怎么做呢","link":"#当你需要给命令绑定一个宏或者按键的时候-应该怎么做呢","children":[]},{"level":2,"title":"如果一个linux新手想要知道当前系统支持的所有命令的列表，他需要怎么做？","slug":"如果一个linux新手想要知道当前系统支持的所有命令的列表-他需要怎么做","link":"#如果一个linux新手想要知道当前系统支持的所有命令的列表-他需要怎么做","children":[]},{"level":2,"title":"如果你的助手想要打印出当前的目录栈，你会建议他怎么做？","slug":"如果你的助手想要打印出当前的目录栈-你会建议他怎么做","link":"#如果你的助手想要打印出当前的目录栈-你会建议他怎么做","children":[]},{"level":2,"title":"你的系统目前有许多正在运行的任务，在不重启机器的条件下，有什么方法可以把所有正在运行的进程移除呢？","slug":"你的系统目前有许多正在运行的任务-在不重启机器的条件下-有什么方法可以把所有正在运行的进程移除呢","link":"#你的系统目前有许多正在运行的任务-在不重启机器的条件下-有什么方法可以把所有正在运行的进程移除呢","children":[]},{"level":2,"title":"bash shell 中的hash 命令有什么作用？","slug":"bash-shell-中的hash-命令有什么作用","link":"#bash-shell-中的hash-命令有什么作用","children":[]},{"level":2,"title":"哪一个bash内置命令能够进行数学运算。","slug":"哪一个bash内置命令能够进行数学运算。","link":"#哪一个bash内置命令能够进行数学运算。","children":[]},{"level":2,"title":"怎样一页一页地查看一个大文件的内容呢？","slug":"怎样一页一页地查看一个大文件的内容呢","link":"#怎样一页一页地查看一个大文件的内容呢","children":[]},{"level":2,"title":"数据字典属于哪一个用户的？","slug":"数据字典属于哪一个用户的","link":"#数据字典属于哪一个用户的","children":[]},{"level":2,"title":"怎样查看一个linux命令的概要与用法？假设你在/bin目录中偶然看到一个你从没见过的的命令，怎样才能知道它的作用和用法呢？","slug":"怎样查看一个linux命令的概要与用法-假设你在-bin目录中偶然看到一个你从没见过的的命令-怎样才能知道它的作用和用法呢","link":"#怎样查看一个linux命令的概要与用法-假设你在-bin目录中偶然看到一个你从没见过的的命令-怎样才能知道它的作用和用法呢","children":[]},{"level":2,"title":"使用哪一个命令可以查看自己文件系统的磁盘空间配额呢？","slug":"使用哪一个命令可以查看自己文件系统的磁盘空间配额呢","link":"#使用哪一个命令可以查看自己文件系统的磁盘空间配额呢","children":[]},{"level":2,"title":"说一下异步和非阻塞的区别?","slug":"说一下异步和非阻塞的区别","link":"#说一下异步和非阻塞的区别","children":[]},{"level":2,"title":"滑动窗口的概念以及应用?","slug":"滑动窗口的概念以及应用","link":"#滑动窗口的概念以及应用","children":[]},{"level":2,"title":"Epoll原理.","slug":"epoll原理","link":"#epoll原理","children":[]},{"level":2,"title":"负载均衡原理是什么?","slug":"负载均衡原理是什么","link":"#负载均衡原理是什么","children":[]},{"level":2,"title":"LVS相关了解.","slug":"lvs相关了解","link":"#lvs相关了解","children":[]}],"git":{"createdTime":1707812321000,"updatedTime":1707812321000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1}]},"readingTime":{"minutes":33.14,"words":9941},"filePathRelative":"架构/运维/面试题.md","localizedDate":"2024年2月13日","autoDesc":true}');export{q as comp,N as data};
