import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-_1TkgRVz.js";const e={},p=t(`<h1 id="_18-异步编程与协程" tabindex="-1"><a class="header-anchor" href="#_18-异步编程与协程"><span>18. 异步编程与协程</span></a></h1><p>今天我们将探讨一个非常有趣的主题： <strong>异步编程与协程</strong> 。</p><p>在我们开始之前，让我们保持轻松，别担心，这个话题虽然听起来有点高级，但它可以让你的程序变得更加高效！</p><h2 id="什么是异步编程" tabindex="-1"><a class="header-anchor" href="#什么是异步编程"><span>什么是异步编程？</span></a></h2><p>首先，让我们了解一下异步编程。在传统的同步编程中，一行代码执行完后才能执行下一行。但在异步编程中，程序可以在等待某些操作完成的同时，继续执行其他任务。</p><p>这样的好处在于，我们可以充分利用等待时间，让 CPU 在等待 I/O 操作时去处理其他任务，从而提高程序的整体效率。</p><h2 id="为什么需要异步编程" tabindex="-1"><a class="header-anchor" href="#为什么需要异步编程"><span>为什么需要异步编程？</span></a></h2><p>假设你在下载文件时，如果采用同步的方式，程序会一直等待文件下载完成才能继续执行其他操作。但如果你使用异步编程，可以在等待文件下载的同时，做其他事情，比如处理其他网络请求或响应用户操作。</p><h2 id="什么是协程" tabindex="-1"><a class="header-anchor" href="#什么是协程"><span>什么是协程？</span></a></h2><p>协程是异步编程的一种方式，它允许我们在函数内部通过 <code>await</code> 关键字等待其他协程的执行结果，而不会阻塞整个程序。</p><h2 id="使用-asyncio-进行异步编程" tabindex="-1"><a class="header-anchor" href="#使用-asyncio-进行异步编程"><span>使用 <code>asyncio</code> 进行异步编程</span></a></h2><p>Python 提供了一个内置的库 <code>asyncio</code> 来支持异步编程。下面让我们通过一个例子来学习如何使用 <code>asyncio</code>：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个事件循环</span>
loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 将协程放入事件循环中执行</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>say_hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 关闭事件循环</span>
loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先定义了一个协程 <code>say_hello</code>，它会打印 &quot;Hello&quot;，然后等待一秒钟，最后打印 &quot;World&quot;。在协程内部，我们使用 <code>await</code> 关键字来等待异步操作的结果。</p><h2 id="异步编程的使用场景" tabindex="-1"><a class="header-anchor" href="#异步编程的使用场景"><span>异步编程的使用场景</span></a></h2><p>异步编程特别适合处理 I/O 密集型任务，比如网络请求、文件读写等。当程序在等待外部操作完成的时候，可以继续执行其他任务，从而提高了程序的效率。</p><h2 id="使用协程实现异步编程" tabindex="-1"><a class="header-anchor" href="#使用协程实现异步编程"><span>使用协程实现异步编程</span></a></h2><p>让我们通过一个例子来看看如何使用协程实现异步编程：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch_data</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;开始下载：</span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 模拟网络请求</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;下载完成：</span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>
        fetch_data<span class="token punctuation">(</span><span class="token string">&#39;https://example.com/image1.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        fetch_data<span class="token punctuation">(</span><span class="token string">&#39;https://example.com/image2.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        fetch_data<span class="token punctuation">(</span><span class="token string">&#39;https://example.com/image3.jpg&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>

<span class="token comment"># 运行主协程</span>
asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个协程 <code>fetch_data</code>，它模拟了一个网络请求的过程。然后在 <code>main</code> 函数中，我们创建了多个任务，使用 <code>asyncio.gather</code> 来并发执行这些任务。</p><h2 id="异步编程-vs-多线程" tabindex="-1"><a class="header-anchor" href="#异步编程-vs-多线程"><span>异步编程 vs. 多线程</span></a></h2><p>协程和线程有一个重要的区别。线程是由操作系统调度的，它们在不同的 CPU 核心上执行。而协程是在一个线程内部执行的，它由程序员手动控制。这意味着协程不会涉及到线程切换的开销，因此通常比多线程更高效。</p><h2 id="为什么要考虑使用协程" tabindex="-1"><a class="header-anchor" href="#为什么要考虑使用协程"><span>为什么要考虑使用协程？</span></a></h2><p>使用线程会涉及到锁、信号量等线程同步机制，这会增加代码的复杂度。而使用协程，我们可以避免这些问题，让程序更加简洁清晰。</p><h2 id="gil-锁是什么" tabindex="-1"><a class="header-anchor" href="#gil-锁是什么"><span>GIL 锁是什么？</span></a></h2><p>GIL（全局解释器锁）是 Python 解释器中的一个机制，它确保同一时刻只有一个线程在执行 Python 字节码。这意味着在多线程环境下，Python 解释器无法利用多核处理器的优势。</p><h2 id="为什么协程不受-gil-的影响" tabindex="-1"><a class="header-anchor" href="#为什么协程不受-gil-的影响"><span>为什么协程不受 GIL 的影响？</span></a></h2><p>由于协程是在一个线程内部执行的，并且程序员可以自由控制协程的切换，所以它们不受 GIL 的限制。这使得协程成为 Python 中处理并发的强大工具。</p><p>通过本文，我们学习了异步编程与协程的基本概念，以及如何使用 <code>asyncio</code> 来实现异步编程。异步编程可以在等待某些操作的同时，继续执行其他任务，从而提高程序的整体效率。</p><p>同时，我们还介绍了如何使用协程来实现异步编程，并通过一个实际的例子演示了异步下载图片的过程。</p><p>希望你现在对异步编程与协程有了更清晰的理解。继续加油，你已经掌握了一个非常有用的 Python 编程技能！</p><h2 id="实战例子-异步下载图片" tabindex="-1"><a class="header-anchor" href="#实战例子-异步下载图片"><span>实战例子：异步下载图片</span></a></h2><p>让我们通过一个实际的例子来巩固所学吧！假设我们需要从网上下载一批图片，我们可以使用异步编程来同时下载，以节省时间。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> aiohttp

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">download_image</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token keyword">await</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string"> 下载完成&#39;</span></span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
        tasks <span class="token operator">=</span> <span class="token punctuation">[</span>
            download_image<span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token string">&#39;https://example.com/image1.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;image_1.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            download_image<span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token string">&#39;https://example.com/image2.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;image_2.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            download_image<span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token string">&#39;https://example.com/image3.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;image_3.jpg&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>

<span class="token comment"># 运行主协程</span>
asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过本文，我们学习了异步编程与协程的基本概念，以及如何使用 <code>asyncio</code> 来实现异步编程。异步编程可以在等待某些操作的同时，继续执行其他任务，从而提高程序的整体效率。</p><p>同时，我们还介绍了如何使用协程来实现异步编程，并通过一个实际的例子演示了异步下载图片的过程。</p><p>希望你现在对异步编程与协程有了更清晰的理解。继续加油，你已经掌握了一个非常有用的 Python 编程技能！</p>`,37),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","18. 异步编程与协程.html.vue"]]),k=JSON.parse('{"path":"/script/python/%E7%AC%AC2%E7%AB%A0%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/18.%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B.html","title":"18. 异步编程与协程","lang":"zh-CN","frontmatter":{"description":"18. 异步编程与协程 今天我们将探讨一个非常有趣的主题： 异步编程与协程 。 在我们开始之前，让我们保持轻松，别担心，这个话题虽然听起来有点高级，但它可以让你的程序变得更加高效！ 什么是异步编程？ 首先，让我们了解一下异步编程。在传统的同步编程中，一行代码执行完后才能执行下一行。但在异步编程中，程序可以在等待某些操作完成的同时，继续执行其他任务。 这...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/script/python/%E7%AC%AC2%E7%AB%A0%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/18.%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"18. 异步编程与协程"}],["meta",{"property":"og:description","content":"18. 异步编程与协程 今天我们将探讨一个非常有趣的主题： 异步编程与协程 。 在我们开始之前，让我们保持轻松，别担心，这个话题虽然听起来有点高级，但它可以让你的程序变得更加高效！ 什么是异步编程？ 首先，让我们了解一下异步编程。在传统的同步编程中，一行代码执行完后才能执行下一行。但在异步编程中，程序可以在等待某些操作完成的同时，继续执行其他任务。 这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-17T02:00:57.000Z"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-05-17T02:00:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"18. 异步编程与协程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-17T02:00:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/script/python/%E7%AC%AC2%E7%AB%A0%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/18.%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/script/python/%E7%AC%AC2%E7%AB%A0%EF%BC%9A%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/18.%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"18. 异步编程与协程"}],["meta",{"property":"og:description","content":"18. 异步编程与协程 今天我们将探讨一个非常有趣的主题： 异步编程与协程 。 在我们开始之前，让我们保持轻松，别担心，这个话题虽然听起来有点高级，但它可以让你的程序变得更加高效！ 什么是异步编程？ 首先，让我们了解一下异步编程。在传统的同步编程中，一行代码执行完后才能执行下一行。但在异步编程中，程序可以在等待某些操作完成的同时，继续执行其他任务。 这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-17T02:00:57.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-17T02:00:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"18. 异步编程与协程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-17T02:00:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是异步编程？","slug":"什么是异步编程","link":"#什么是异步编程","children":[]},{"level":2,"title":"为什么需要异步编程？","slug":"为什么需要异步编程","link":"#为什么需要异步编程","children":[]},{"level":2,"title":"什么是协程？","slug":"什么是协程","link":"#什么是协程","children":[]},{"level":2,"title":"使用 asyncio 进行异步编程","slug":"使用-asyncio-进行异步编程","link":"#使用-asyncio-进行异步编程","children":[]},{"level":2,"title":"异步编程的使用场景","slug":"异步编程的使用场景","link":"#异步编程的使用场景","children":[]},{"level":2,"title":"使用协程实现异步编程","slug":"使用协程实现异步编程","link":"#使用协程实现异步编程","children":[]},{"level":2,"title":"异步编程 vs. 多线程","slug":"异步编程-vs-多线程","link":"#异步编程-vs-多线程","children":[]},{"level":2,"title":"为什么要考虑使用协程？","slug":"为什么要考虑使用协程","link":"#为什么要考虑使用协程","children":[]},{"level":2,"title":"GIL 锁是什么？","slug":"gil-锁是什么","link":"#gil-锁是什么","children":[]},{"level":2,"title":"为什么协程不受 GIL 的影响？","slug":"为什么协程不受-gil-的影响","link":"#为什么协程不受-gil-的影响","children":[]},{"level":2,"title":"实战例子：异步下载图片","slug":"实战例子-异步下载图片","link":"#实战例子-异步下载图片","children":[]}],"git":{"createdTime":1715911257000,"updatedTime":1715911257000,"contributors":[{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":4.83,"words":1448},"filePathRelative":"script/python/第2章：并发编程/18. 异步编程与协程.md","localizedDate":"2024年5月17日","autoDesc":true}');export{r as comp,k as data};
