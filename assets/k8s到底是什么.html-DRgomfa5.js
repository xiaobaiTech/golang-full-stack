import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as s,c as i,a as e,b as t,d as n,e as g}from"./app-T_olDrey.js";const p={},l=g('<h1 id="k8s-到底是什么-架构是怎么样的" tabindex="-1"><a class="header-anchor" href="#k8s-到底是什么-架构是怎么样的"><span>k8s 到底是什么，架构是怎么样的？</span></a></h1><p>你是一个程序员，你用代码写了一个博客应用服务，并将它部署在了云平台上。<br> 但应用服务太过受欢迎，访问量太大，经常会挂。</p><figure><img src="https://cdn.xiaobaidebug.top/1709421004186.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以你用了一些工具自动重启挂掉的应用服务，并且将应用服务部署在了好几个服务器上，总算扛住了。</p><p><img src="https://cdn.xiaobaidebug.top/1709421026232.jpeg" alt="" loading="lazy"><br> 后来你又上线了商城应用服务和语音应用服务，随着<strong>应用服务变多</strong>，需求也千奇百怪。有的应用服务不希望被外网访问到，有的部署的时候要求内存得大于 xxGB 才能正常跑。<br> 你每次都需要登录到各个服务器上，执行<strong>手动</strong>操作更新。不仅容易出错，还贼<strong>浪费时间</strong>。</p><p><strong>原本就没时间找女朋友的你，现在哭得更大声了。</strong></p><p>那么问题就来了，有没有一个办法，可以解决上面的问题？<br> 当然有，<strong>没有什么是加一个中间层不能解决的，如果有，那就再加一层</strong>。<br> 这次我们要加的中间层，叫 <strong>Kubernetes</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1709421057018.jpeg" alt="Kubernetes的位置" tabindex="0" loading="lazy"><figcaption>Kubernetes的位置</figcaption></figure><h2 id="kubernetes-是什么" tabindex="-1"><a class="header-anchor" href="#kubernetes-是什么"><span>Kubernetes 是什么？</span></a></h2><p>Kubernetes，它是 <strong>G 家</strong>开源的神器，因为单词太长，所以我们习惯省略中间 8 个字母，简称它为 <strong>k8s</strong>。</p><p><img src="https://cdn.xiaobaidebug.top/1709421082934.jpeg" alt="k8s名称的由来" loading="lazy"><br> 它介于<strong>应用服务</strong>和<strong>服务器</strong>之间，能够通过策略，协调和管理多个应用服务，只需要一个 <strong>yaml</strong> 文件配置，定义应用的部署顺序等信息，就能自动部署应用到各个服务器上，还能让它们挂了自动重启，自动扩缩容。</p><p>听起来有些厉害，它是怎么实现这些功能的呢？</p><h2 id="kubernetes-架构原理" tabindex="-1"><a class="header-anchor" href="#kubernetes-架构原理"><span>Kubernetes 架构原理</span></a></h2><p>为了实现上面的功能，Kubernetes 会将我们的服务器划为两部分，一部分叫<strong>控制平面</strong>（control plane，以前叫 master），另一部分叫<strong>工作节点</strong>，也就是 <strong>Node</strong>。<br> 简单来说它们的关系就是老板和打工人， 用现在流行的说法就是训练师和帕鲁。<br> 控制平面负责控制和管理各个 Node，而 Node 则负责实际运行各个应用服务。</p><p><img src="https://cdn.xiaobaidebug.top/1709421107417.jpeg" alt="k8s控制平面和Node的关系" loading="lazy"><br> 我们依次看下这两者的内部架构。</p><h3 id="控制平面内部组件" tabindex="-1"><a class="header-anchor" href="#控制平面内部组件"><span>控制平面内部组件</span></a></h3><ul><li>以前我们需要登录到每台服务器上，手动执行各种命令，现在我们只需要调用 k8s 的提供的 api 接口，就能操作这些服务资源，这些接口都由 <strong>API Server</strong> 组件提供。</li><li>以前我们需要到处看下哪台服务器 cpu 和内存资源充足，然后才能部署应用，现在这部分决策逻辑由 <strong>Scheduler</strong>（调度器）来完成。</li><li>找到服务器后，以前我们会手动创建，关闭服务，现在这部分功能由 <strong>Controller Manager</strong>（控制器管理器）来负责。</li><li>上面的功能都会产生一些数据，这些数据需要被保存起来，方便后续做逻辑，因此 k8s 还会需要一个<strong>存储层</strong>，用来存放各种数据信息，目前是用的 <strong>etcd</strong>，这部分源码实现的很解耦，后续可能会扩展支持其他中间件。</li></ul><p>以上就是控制平面内部的组件。</p><p><img src="https://cdn.xiaobaidebug.top/1709421131061.jpeg" alt="k8s控制平面组件" loading="lazy"><br> 我们接下来再看看 Node 里有哪些组件。</p><h3 id="node-内部组件" tabindex="-1"><a class="header-anchor" href="#node-内部组件"><span>Node 内部组件</span></a></h3><p>Node 是实际的工作节点，它既可以是<strong>裸机服务器</strong>，也可以是<strong>虚拟机</strong>。它会负责实际运行各个应用服务。多个应用服务<strong>共享</strong>一台 Node 上的内存和 CPU 等计算资源。</p><p><img src="https://cdn.xiaobaidebug.top/1709421226960.jpeg" alt="Node可以是裸机服务器或虚拟机" loading="lazy"><br> 在文章开头，我们聊到了部署多个应用服务的场景。以前我们需要上传代码到服务器，而用了 k8s 之后，我们只需要将服务代码打包成<strong>Container Image</strong>(容器镜像)，就能一行命令将它部署。</p><p>如果你不了解容器镜像的含义，你可以简单理解为它其实就是将<strong>应用代码</strong>和依赖的<strong>系统环境</strong>打了个压缩包，在任意一台机器上解压这个压缩包，就能正常运行服务。为了下载和部署镜像，Node 中会有一个 <strong>Container runtime</strong> 组件。</p><p><img src="https://cdn.xiaobaidebug.top/1709421268783.jpeg" alt="将容器镜像粗略理解为压缩包" loading="lazy"><br> 每个应用服务都可以认为是一个 <strong>Container</strong>（容器）, 并且大多数时候，我们还会为应用服务搭配一个日志收集器 Container 或监控收集器 Container，多个 Container 共同组成一个一个 <strong>Pod</strong>，它运行在 Node 上。</p><figure><img src="https://cdn.xiaobaidebug.top/1709421314642.jpeg" alt="一个pod内有多个容器" tabindex="0" loading="lazy"><figcaption>一个pod内有多个容器</figcaption></figure><p>k8s 可以将 pod 从某个 Node 调度到另一个 Node，还能以 pod 为单位去做重启和动态扩缩容的操作。<br> 所以说 <strong>Pod 是 k8s 中最小的调度单位</strong>。</p><p><img src="https://cdn.xiaobaidebug.top/1709421346458.jpeg" alt="Node调度Pod" loading="lazy"><br> 另外，前面提到控制平面会用 <strong>Controller Manager</strong> （通过 API Server）控制 Node 创建和关闭服务，那 Node 也得有个组件能接收到这个命令才能去做这些动作，这个组件叫 <strong>kubelet</strong>，它主要负责管理和监控 Pod。<br> 最后，Node 中还有个 <strong>Kube Proxy</strong> ，它负责 Node 的网络通信功能，有了它，外部请求就能被转发到 Pod 内。</p><figure><img src="https://cdn.xiaobaidebug.top/1709421397283.jpeg" alt="控制平面和Node的组件" tabindex="0" loading="lazy"><figcaption>控制平面和Node的组件</figcaption></figure><h3 id="cluster" tabindex="-1"><a class="header-anchor" href="#cluster"><span>Cluster</span></a></h3><p><strong>控制平面和 Node</strong> 共同构成了一个 <strong>Cluster</strong>，也就是<strong>集群</strong>。在公司里，我们一般会构建多个集群, 比如测试环境用一个集群，生产环境用另外一个集群。同时，为了将集群内部的服务暴露给外部用户使用，我们一般还会部署一个入口控制器，比如 <strong>Ingress 控制器（比如 Nginx）</strong>，它可以提供一个入口让外部用户访问集群内部服务。</p><figure><img src="https://cdn.xiaobaidebug.top/1709421418975.jpeg" alt="生产和测试环境" tabindex="0" loading="lazy"><figcaption>生产和测试环境</figcaption></figure><h3 id="kubectl-是什么" tabindex="-1"><a class="header-anchor" href="#kubectl-是什么"><span>kubectl 是什么</span></a></h3><p>上面提到说我们可以使用 k8s 提供的 API 去创建服务，但问题就来了，这是需要我们自己写代码去调用这些 API 吗？<br> 答案是不需要，k8s 为我们准备了一个命令行工具 <strong>kubectl</strong>，我们只需要执行命令，它内部就会调用 k8s 的 API。</p><figure><img src="https://cdn.xiaobaidebug.top/1709421553497.jpeg" alt="kubectl调用k8s的API" tabindex="0" loading="lazy"><figcaption>kubectl调用k8s的API</figcaption></figure><p>接下来我们以部署服务为例子，看下 k8s 是怎么工作的。</p><h3 id="怎么部署服务" tabindex="-1"><a class="header-anchor" href="#怎么部署服务"><span>怎么部署服务？</span></a></h3><p>首先我们需要编写 <strong>YAML 文件</strong>，在里面定义 Pod 里用到了哪些镜像，占用多少内存和 CPU 等信息。<br> 然后使用 kubectl 命令行工具执行 <code>kubectl apply -f xx.yaml</code> ，此时 kubectl 会读取和解析 YAML 文件，将解析后的对象通过 API 请求发送给 Kubernetes 控制平面内 的 <strong>API Server</strong>。 API Server 会根据要求，驱使 <strong>Scheduler</strong> 通过 <strong>etcd</strong> 提供的数据寻找合适的 <strong>Node</strong>， <strong>Controller Manager</strong> 会通过 API Server 控制 Node 创建服务，Node 内部的 <strong>kubelet</strong> 在收到命令后会开始基于 <strong>Container runtime</strong> 组件去拉取镜像创建容器，最终完成 <strong>Pod</strong> 的创建。</p><p>至此服务完成创建。</p><p><img src="https://cdn.xiaobaidebug.top/1709421595679.jpeg" alt="部署应用服务" loading="lazy"><br> 整个过程下来，我们只需要写一遍 yaml 文件，和执行一次 kubectl 命令，比以前省心太多了！<br> 部署完服务后，我们来看下服务是怎么被调用的。</p><h3 id="怎么调用服务" tabindex="-1"><a class="header-anchor" href="#怎么调用服务"><span>怎么调用服务？</span></a></h3><p>以前外部用户小明，直接在浏览器上发送 http 请求，就能打到我们服务器上的 Nginx，然后转发到部署的服务内。<br> 用了 k8s 之后，外部请求会先到达 k8s 集群的 Ingress 控制器，然后请求会被转发到 k8s 内部的某个 Node 的 <strong>Kube Proxy</strong> 上，再找到对应的 pod，然后才是转发到内部<strong>容器服务</strong>中，处理结果原路返回，到这就完成了一次服务调用。</p><figure><img src="https://cdn.xiaobaidebug.top/1709421636026.jpeg" alt="用户调用k8s内应用服务的流程" tabindex="0" loading="lazy"><figcaption>用户调用k8s内应用服务的流程</figcaption></figure><p>到这里我们就大概了解了 k8s 的工作原理啦，它本质上就是应用服务和服务器之间的<strong>中间层</strong>，通过暴露一系列 API 能力让我们简化服务的部署运维流程。</p><p>并且，不少中大厂基于这些 API 能力搭了自己的服务管理平台，程序员不再需要敲 kubectl 命令，直接在界面上点点几下，就能完成服务的部署和扩容等操作，是真的嘎嘎好用。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>k8s 是 G 家开源的神器，用于管理海量容器服务。</li><li>k8s 集群内分为控制平面和 Node，控制平面是大脑，负责发指令，Node 是手脚，负责执行任务。</li><li>控制平面内有 API Server，Scheduler，Controller Manager 以及 etcd 等组件。Node 中含有 Pod，Kubelet,Container runtime, Kube Proxy 等组件。控制平面和 Node 共同构成一个 Cluster。</li><li>文章通过怎么部署服务和怎么调用服务两个例子将这些组件串联了起来，方便大家加深理解。</li></ul>',46),d={href:"https://golangguide.top/%E6%9E%B6%E6%9E%84/Docker/",target:"_blank",rel:"noopener noreferrer"},c=e("h1",{id:"参考文章",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考文章"},[e("span",null,"参考文章：")])],-1),b={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function E(k,x){const o=a("ExternalLinkIcon");return s(),i("div",null,[l,e("p",null,[t("最后给大家留一个问题，我们提到 k8s 的时候，一般会提一下 "),e("a",d,[t("docker"),n(o)]),t(", 但为了避免大家混淆，我在写这篇文章的时候，只字不提 docker，你知道 **docker 和 k8s 之间是什么关系吗？**欢迎评论区聊聊。")]),c,e("ul",null,[e("li",null,[e("p",null,[e("a",b,[t("golang进阶面试题八股文合集"),n(o)])])]),e("li",null,[e("p",null,[e("a",u,[t("golang基础面试题八股文合集"),n(o)])])]),e("li",null,[e("p",null,[e("a",h,[t("golang常用标准库第三方库大全"),n(o)])])]),e("li",null,[e("p",null,[e("a",m,[t("golang学习路线"),n(o)])])])])])}const B=r(p,[["render",E],["__file","k8s到底是什么.html.vue"]]),y=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84/%E4%BA%91%E5%8E%9F%E7%94%9F/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/k8s%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88.html","title":"k8s 到底是什么，架构是怎么样的？","lang":"zh-CN","frontmatter":{"description":"k8s 到底是什么，架构是怎么样的？ 你是一个程序员，你用代码写了一个博客应用服务，并将它部署在了云平台上。 但应用服务太过受欢迎，访问量太大，经常会挂。 所以你用了一些工具自动重启挂掉的应用服务，并且将应用服务部署在了好几个服务器上，总算扛住了。 后来你又上线了商城应用服务和语音应用服务，随着应用服务变多，需求也千奇百怪。有的应用服务不希望被外网访问...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E4%BA%91%E5%8E%9F%E7%94%9F/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/k8s%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"k8s 到底是什么，架构是怎么样的？"}],["meta",{"property":"og:description","content":"k8s 到底是什么，架构是怎么样的？ 你是一个程序员，你用代码写了一个博客应用服务，并将它部署在了云平台上。 但应用服务太过受欢迎，访问量太大，经常会挂。 所以你用了一些工具自动重启挂掉的应用服务，并且将应用服务部署在了好几个服务器上，总算扛住了。 后来你又上线了商城应用服务和语音应用服务，随着应用服务变多，需求也千奇百怪。有的应用服务不希望被外网访问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/1709421004186.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T03:33:31.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"k8s 到底是什么，架构是怎么样的？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-04-06T03:33:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"k8s 到底是什么，架构是怎么样的？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/1709421004186.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421026232.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421057018.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421082934.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421107417.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421131061.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421226960.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421268783.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421314642.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421346458.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421397283.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421418975.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421553497.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421595679.jpeg\\",\\"https://cdn.xiaobaidebug.top/1709421636026.jpeg\\"],\\"dateModified\\":\\"2024-04-06T03:33:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E4%BA%91%E5%8E%9F%E7%94%9F/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/k8s%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E4%BA%91%E5%8E%9F%E7%94%9F/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/k8s%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"k8s 到底是什么，架构是怎么样的？"}],["meta",{"property":"og:description","content":"k8s 到底是什么，架构是怎么样的？ 你是一个程序员，你用代码写了一个博客应用服务，并将它部署在了云平台上。 但应用服务太过受欢迎，访问量太大，经常会挂。 所以你用了一些工具自动重启挂掉的应用服务，并且将应用服务部署在了好几个服务器上，总算扛住了。 后来你又上线了商城应用服务和语音应用服务，随着应用服务变多，需求也千奇百怪。有的应用服务不希望被外网访问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T03:33:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T03:33:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"k8s 到底是什么，架构是怎么样的？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-06T03:33:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Kubernetes 是什么？","slug":"kubernetes-是什么","link":"#kubernetes-是什么","children":[]},{"level":2,"title":"Kubernetes 架构原理","slug":"kubernetes-架构原理","link":"#kubernetes-架构原理","children":[{"level":3,"title":"控制平面内部组件","slug":"控制平面内部组件","link":"#控制平面内部组件","children":[]},{"level":3,"title":"Node 内部组件","slug":"node-内部组件","link":"#node-内部组件","children":[]},{"level":3,"title":"Cluster","slug":"cluster","link":"#cluster","children":[]},{"level":3,"title":"kubectl 是什么","slug":"kubectl-是什么","link":"#kubectl-是什么","children":[]},{"level":3,"title":"怎么部署服务？","slug":"怎么部署服务","link":"#怎么部署服务","children":[]},{"level":3,"title":"怎么调用服务？","slug":"怎么调用服务","link":"#怎么调用服务","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1712020071000,"updatedTime":1712374411000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1},{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":8.22,"words":2467},"filePathRelative":"架构/云原生/核心知识点/k8s到底是什么.md","localizedDate":"2024年4月2日","autoDesc":true}');export{B as comp,y as data};
