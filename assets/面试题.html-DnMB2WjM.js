import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as s,e as d}from"./app-CS2CU9-b.js";const l="/assets/image/docs/Aspose.Words.51b43265-f45e-4206-a945-0b7c10078cb5.035.jpeg",a="/assets/image/docs/Aspose.Words.51b43265-f45e-4206-a945-0b7c10078cb5.036.jpeg",r={},p=d('<h1 id="redis面试题" tabindex="-1"><a class="header-anchor" href="#redis面试题"><span><strong>Redis面试题</strong></span></a></h1><h2 id="什么是-redis" tabindex="-1"><a class="header-anchor" href="#什么是-redis"><span>什么是 Redis?</span></a></h2><p>Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ul><li>Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list， set，zset，hash 等数据结构的存储。</li><li>Redis 支持数据的备份，即 master-slave 模式的数据备份。</li></ul><p>Redis 优势：</p><ul><li>性能极高– Redis 能读的速度是110000 次/s,写的速度是81000 次/s 。</li><li>丰富的数据类型– Redis 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子– Redis 的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过 MULTI 和 EXEC 指令包起来。</li><li>丰富的特性– Redis 还支持 publish/subscribe,通知, key 过期等等特性。</li></ul><p><strong>Redis 与其他 key-value 存储有什么不同？</strong></p><ul><li>Redis 有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis 的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis 运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样 Redis 可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li></ul><h2 id="redis-的数据类型" tabindex="-1"><a class="header-anchor" href="#redis-的数据类型"><span>Redis 的数据类型？</span></a></h2><p>Redis 支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及 zsetsorted set：有序集合)。我们实际项目中比较常用的是 string，hash 如果你是 Redis 中高级用户，还</p><p>需要加上下面几种数据结构 HyperLogLog、Geo、Pub/Sub。</p><p>如果你说还玩过 Redis Module，像 BloomFilter，RedisSearch，Redis-ML，面试官得眼睛就开始发亮了。</p><h2 id="使用-redis-有哪些好处" tabindex="-1"><a class="header-anchor" href="#使用-redis-有哪些好处"><span>使用 Redis 有哪些好处？</span></a></h2><ul><li>速度快，因为数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O1)</li><li>支持丰富数据类型，支持 string，list，set，Zset，hash 等</li><li>支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</li><li>丰富的特性：可用于缓存，消息，按 key 设置过期时间，过期后将会自动删除</li></ul><h2 id="redis-相比-memcached-有哪些优势" tabindex="-1"><a class="header-anchor" href="#redis-相比-memcached-有哪些优势"><span>Redis 相比 Memcached 有哪些优势？</span></a></h2><ul><li>Memcached 所有的值均是简单的字符串，redis 作为其替代者，支持更为丰富的数据类</li><li>Redis 的速度比 Memcached 快很</li><li>Redis 可以持久化其数据</li></ul><h2 id="memcache-与-redis-的区别都有哪些" tabindex="-1"><a class="header-anchor" href="#memcache-与-redis-的区别都有哪些"><span>Memcache 与 Redis 的区别都有哪些？</span></a></h2><ul><li>存储方式 Memecache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。 Redis 有部份存在硬盘上，这样能保证数据的持久性。</li><li>数据支持类型 Memcache 对数据类型支持相对简单。 Redis 有复杂的数据类型。</li><li>使用底层模型不同它们之间底层实现方式以及与客户端之间通信的应用协议不一样。 Redis 直接自己构建了 VM 机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</li></ul><h2 id="redis-是单进程单线程的" tabindex="-1"><a class="header-anchor" href="#redis-是单进程单线程的"><span>Redis 是单进程单线程的？</span></a></h2><p>Redis 是单进程单线程的，redis 利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销。</p><h2 id="一个字符串类型的值能存储最大容量是多少" tabindex="-1"><a class="header-anchor" href="#一个字符串类型的值能存储最大容量是多少"><span>一个字符串类型的值能存储最大容量是多少？</span></a></h2><p>答：512M</p><h2 id="redis-集群最大节点个数是多少" tabindex="-1"><a class="header-anchor" href="#redis-集群最大节点个数是多少"><span>Redis 集群最大节点个数是多少？</span></a></h2><p>16384 个。</p><h2 id="reids-的特点" tabindex="-1"><a class="header-anchor" href="#reids-的特点"><span>Reids 的特点</span></a></h2><p>Redis 本质上是一个 Key-Value 类型的内存数据库，很像 数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据 硬盘上进行保存。</p><p>Memcached，整个</p><p>flush 到</p><p>因为是纯内存操作，Redis 的性能非常出色，每秒可以处理超过 10 万次读写操 作，是已知性能最快的 Key-Value DB。</p><p>Redis 的出色之处不仅仅是性能，Redis 最大的魅力是支持保存多种数据结构， 此外单个 value 的最大限制是 1GB，不像 Memcached 只能保存 1MB 的数据， 因此 Redis 可以用来实现很多有用的功能。</p><p>比方说用他的 List 来做 FIFO 双向链表，实现一个轻量级的高性 能消息队列服 务，用他的 Set 可以做高性能的 tag 系统等等。另外 Redis 也可以对存入的 Key- Value 设置 expire 时间，因此也可以被当作一 个功能加强版的 Memcached 来</p><p>用。</p><p>Redis 的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性 能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。</p><h2 id="使用-redis-有哪些好处-1" tabindex="-1"><a class="header-anchor" href="#使用-redis-有哪些好处-1"><span>使用 Redis 有哪些好处？</span></a></h2><ul><li>速度快，因为数据存在内存中，类似于 HashMap，HashMap 的优势就是</li></ul><p>查找和操作的时间复杂度都是 O(1)。</p><ul><li><p>支持丰富数据类型，支持 string，list，set，sorted set，hash。</p></li><li><p>支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行， 要么全部不执行。</p></li><li><p>丰富的特性：可用于缓存，消息，按 key 设置过期时间，过期后将会自动删 除。</p></li></ul><h2 id="为什么-edis-需要把所有数据放到内存中" tabindex="-1"><a class="header-anchor" href="#为什么-edis-需要把所有数据放到内存中"><span>为什么 edis 需要把所有数据放到内存中？</span></a></h2><p>Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据 写入磁盘。所以 Redis 具有快速和数据持久化的特征。如果不将数据放在内存 中，磁盘 I/O 速度为严重影响 Redis 的性能。在内存越来越便宜的今天，Redis 将会越来越受欢迎。如果设置了最大使用的内存，则数据已有记录数达到内存限 值后不能继续插入新值。</p><h2 id="redis-的内存用完了会发生什么" tabindex="-1"><a class="header-anchor" href="#redis-的内存用完了会发生什么"><span>Redis 的内存用完了会发生什么？</span></a></h2><p>如果达到设置的上限， 返回。）或者你可以将 限时会冲刷掉旧的内容。</p><p>Redis 的写命令会返回错误信息（但是读命令还可以正常 Redis 当缓存来使用配置淘汰机制，当 Redis 达到内存上</p><h2 id="redis-的回收策略-淘汰策略" tabindex="-1"><a class="header-anchor" href="#redis-的回收策略-淘汰策略"><span>Redis 的回收策略（淘汰策略）</span></a></h2><p>volatile-lru：从已设置过期时间的数据集（ server.db[i].expires）中挑选最近 最少使用的数据淘汰。</p><p>volatile-ttl： 从已设置过期时间的数据集（ server.db[i].expires） 中挑选将要 过期的数据淘汰。</p><p>volatile-random： 从已设置过期时间的数据集（ server.db[i].expires） 中任 意选择数据淘汰。</p><p>allkeys-lru： 从数据集（ server.db[i].dict） 中挑选最近最少使用的数据淘汰。 allkeys-random： 从数据集（ server.db[i].dict） 中任意选择数据淘汰。 no-enviction（ 驱逐） ： 禁止驱逐数据。</p><p>注意这里的 6 种机制，volatile 和 allkeys 规定了是对已设置过期时间的数据 集淘汰数据还是从全部数据集淘汰数据， 后面的 lru、tt- 以及 random 是三 种不同的淘汰策略， 再加上一种 no-enviction 永不回收的策略。 使用策略规则：</p><p>如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频 率 低， 则使用 allkeys-lru。</p><p>如果数据呈现平等分布， 也就是所有的数据访问频率都相同， 则使用 allkeys-random。</p><h2 id="redis-的持久化机制是什么-各自的优缺点" tabindex="-1"><a class="header-anchor" href="#redis-的持久化机制是什么-各自的优缺点"><span>Redis 的持久化机制是什么？各自的优缺点？</span></a></h2><p>Redis 提供两种持久化机制 RDB 和 AOF 机制： RDBRedis DataBase)持久化方式：</p><p>是指用数据集快照的方式半持久化模式)记录 redis 数据库的所有键值对,在某个时间点将数据写入一个临时文件，持久化结束后，用这个临时文件替换上次持久化的文件，达到数据恢复。</p><p>优点：</p><ul><li>只有一个文件 dump.rdb，方便持久化。</li><li>容灾性好，一个文件可以保存到安全的磁盘。</li><li>性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以</li></ul><p>是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能)</p><ul><li>相对于数据集大时，比 AOF 的启动效率更高。</li></ul><p>缺点：</p><p>数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候。</p><p><strong>AOFAppend-only file)持久化方式</strong>：</p><p>是指所有的命令行记录以 redis 命令请求协议的格式完全持久化存储)保存为 aof 文件。</p><p>优点：</p><ul><li>数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次命令操作就记录到 aof 文件中一次。</li><li>通过 append 模式写文件，即使中途服务器宕机，可以通过 redis- check-aof 工具解决数据一致性问题。</li><li>AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)</li></ul><p>缺点：</p><ul><li>AOF 文件比 RDB 文件大，且恢复速度慢。</li><li>数据集大的时候，比 rdb 启动效率低。</li></ul><h2 id="redis-常见性能问题和解决方案" tabindex="-1"><a class="header-anchor" href="#redis-常见性能问题和解决方案"><span>Redis 常见性能问题和解决方案：</span></a></h2><ul><li>1）Master 最好不要写内存快照，如果 Master 写内存快照，save 命令调度 rdbSave 函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务</li><li>2）如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一</li><li>3）为了主从复制的速度和连接的稳定性，Master 和 Slave 最好在同一个局域网</li><li>4）尽量避免在压力很大的主库上增加从</li><li>5）主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1&lt;- Slave2 &lt;- Slave3…这样的结构方便解决单点故障问题，实现 Slave 对 Master 的替换。如果 Master 挂了，可以立刻启用 Slave1 做 Master，其他不变。</li></ul><h2 id="redis-过期键的删除策略" tabindex="-1"><a class="header-anchor" href="#redis-过期键的删除策略"><span>Redis 过期键的删除策略？</span></a></h2><ul><li>1）定时删除:在设置键的过期时间的同时，创建一个定时器 timer).让定时器在键的过期时间来临时，立即执行对键的删除操作。</li><li>2）惰性删除:放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键;如果没有过期，就返回该键。</li><li>3）定期删除:每隔一段时间程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。</li></ul><h2 id="redis-的回收策略-淘汰策略-1" tabindex="-1"><a class="header-anchor" href="#redis-的回收策略-淘汰策略-1"><span>Redis 的回收策略（淘汰策略）?</span></a></h2><p>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p><p>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p><p>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p><p>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p><p>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p><p>no-enviction（驱逐）：禁止驱逐数据</p><p>注意这里的6 种机制，volatile 和 allkeys 规定了是对已设置过期时间的数据集淘汰数据还是从全部数据集淘汰数据，后面的 lru、ttl 以及 random 是三种不同的淘汰策略，再加上一种 no-enviction 永不回收的策略。</p><p>使用策略规则：</p><ul><li>如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问</li></ul><p>频率低，则使用 allkeys-lr</p><ul><li>如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用 allkeys-random</li></ul><h2 id="为什么-redis-需要把所有数据放到内存中" tabindex="-1"><a class="header-anchor" href="#为什么-redis-需要把所有数据放到内存中"><span>为什么 Redis 需要把所有数据放到内存中？</span></a></h2><p>Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 redis 具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘 I/O 速度为严重影响 redis 的性能。在内存越来越便宜的今天， redis 将会越来越受欢迎。如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。</p><h2 id="redis-的同步机制了解么" tabindex="-1"><a class="header-anchor" href="#redis-的同步机制了解么"><span>Redis 的同步机制了解么？</span></a></h2><p>Redis 可以使用主从同步，从从同步。第一次同步时，主节点做一次 bgsave，并同时将后续修改操作记录到内存 buffer，待完成后将 rdb 文件全量同步到复制节点，复制节点接受完成后将 rdb 镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。</p><h2 id="pipeline-有什么好处-为什么要用-pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline-有什么好处-为什么要用-pipeline"><span>Pipeline 有什么好处，为什么要用 Pipeline？</span></a></h2><p>可以将多次 IO 往返的时间缩减为一次，前提是 pipeline 执行的指令之间没有因果相关性。使用 redis-benchmark 进行压测的时候可以发现影响 redis 的 QPS 峰值的一个重要因素是 pipeline 批次指令的数目。</p><h2 id="是否使用过-redis-集群-集群的原理是什么" tabindex="-1"><a class="header-anchor" href="#是否使用过-redis-集群-集群的原理是什么"><span>是否使用过 Redis 集群，集群的原理是什么？</span></a></h2><ul><li>Redis Sentinal 着眼于高可用，在 master 宕机时会自动将 slave 提升为 master，继续提供服务。</li><li>Redis Cluster 着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行分片存储。</li></ul><h2 id="redis-集群方案什么情况下会导致整个集群不可用" tabindex="-1"><a class="header-anchor" href="#redis-集群方案什么情况下会导致整个集群不可用"><span>Redis 集群方案什么情况下会导致整个集群不可用？</span></a></h2><p>有 A，B，C 三个节点的集群,在没有复制模型的情况下,如果节点 B 失败了，那么整个集群就会以为缺少5501-11000 这个范围的槽而不可用。</p><h2 id="redis-支持的-java-客户端都有哪些-官方推荐用哪个" tabindex="-1"><a class="header-anchor" href="#redis-支持的-java-客户端都有哪些-官方推荐用哪个"><span>Redis 支持的 Java 客户端都有哪些？官方推荐用哪个？</span></a></h2><p>Redisson、Jedis、lettuce 等等，官方推荐使用 Redisson。</p><h2 id="jedis-与-redisson-对比有什么优缺点" tabindex="-1"><a class="header-anchor" href="#jedis-与-redisson-对比有什么优缺点"><span>Jedis 与 Redisson 对比有什么优缺点？</span></a></h2><p>Jedis 是 Redis 的 Java 实现的客户端，其 API 提供了比较全面的 Redis 命令的支持；Redisson 实现了分布式和可扩展的 Java 数据结构，和 Jedis 相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等 Redis 特性。</p><p>Redisson 的宗旨是促进使用者对 Redis 的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><h2 id="redis-如何设置密码及验证密码" tabindex="-1"><a class="header-anchor" href="#redis-如何设置密码及验证密码"><span>Redis 如何设置密码及验证密码？</span></a></h2><p>设置密码：config set requirepass 123456 授权密码：auth 123456</p><h2 id="说说-redis-哈希槽的概念" tabindex="-1"><a class="header-anchor" href="#说说-redis-哈希槽的概念"><span>说说 Redis 哈希槽的概念？</span></a></h2><p>Redis 集群没有使用一致性 hash,而是引入了哈希槽的概念，Redis 集群有16384 个哈希槽，每个 key 通过 CRC16 校验后对16384 取模来决定放置哪个槽，集群的每个节点负责一部分 hash 槽。</p><h2 id="redis-集群的主从复制模型是怎样的" tabindex="-1"><a class="header-anchor" href="#redis-集群的主从复制模型是怎样的"><span>Redis 集群的主从复制模型是怎样的？</span></a></h2><p>为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型,每个节点都会有 N-1 个复制品。</p><h2 id="redis-集群会有写操作丢失吗-为什么" tabindex="-1"><a class="header-anchor" href="#redis-集群会有写操作丢失吗-为什么"><span>Redis 集群会有写操作丢失吗？为什么？</span></a></h2><p>Redis 并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。</p><h2 id="redis-集群之间是如何复制的" tabindex="-1"><a class="header-anchor" href="#redis-集群之间是如何复制的"><span>Redis 集群之间是如何复制的？</span></a></h2><p>异步复制</p><h2 id="redis-集群最大节点个数是多少-1" tabindex="-1"><a class="header-anchor" href="#redis-集群最大节点个数是多少-1"><span>Redis 集群最大节点个数是多少？</span></a></h2><p>16384 个。</p><h2 id="redis-集群如何选择数据库" tabindex="-1"><a class="header-anchor" href="#redis-集群如何选择数据库"><span>Redis 集群如何选择数据库？</span></a></h2><p>Redis 集群目前无法做数据库选择，默认在0 数据库。</p><h2 id="怎么测试-redis-的连通性" tabindex="-1"><a class="header-anchor" href="#怎么测试-redis-的连通性"><span>怎么测试 Redis 的连通性</span></a></h2><p>使用 ping 命令。</p><h2 id="怎么理解-redis-事务" tabindex="-1"><a class="header-anchor" href="#怎么理解-redis-事务"><span>怎么理解 Redis 事务？</span></a></h2><ul><li>1）事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li>2）事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</li></ul><h2 id="redis-事务相关的命令有哪几个" tabindex="-1"><a class="header-anchor" href="#redis-事务相关的命令有哪几个"><span>Redis 事务相关的命令有哪几个？</span></a></h2><p>MULTI、 EXEC、 DISCARD、 WATCH</p><h2 id="redis-key-的过期时间和永久有效分别怎么设置" tabindex="-1"><a class="header-anchor" href="#redis-key-的过期时间和永久有效分别怎么设置"><span>Redis key 的过期时间和永久有效分别怎么设置？</span></a></h2><p>EXPIRE 和 PERSIST 命令。</p><h2 id="redis-如何做内存优化" tabindex="-1"><a class="header-anchor" href="#redis-如何做内存优化"><span>Redis 如何做内存优化？</span></a></h2><p>尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的 web 系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的 key,而是应该把这个用户的所有信息存储到一张散列表里面。</p><h2 id="redis-回收进程如何工作的" tabindex="-1"><a class="header-anchor" href="#redis-回收进程如何工作的"><span>Redis 回收进程如何工作的？</span></a></h2><p>一个客户端运行了新的命令，添加了新的数据。Redi 检查内存使用情况，如果大于 maxmemory 的限制,则根据设定好的策略进行回收。一个新的命令被执行，等等。所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。</p><h2 id="都有哪些办法可以降低-redis-的内存使用情况呢" tabindex="-1"><a class="header-anchor" href="#都有哪些办法可以降低-redis-的内存使用情况呢"><span>都有哪些办法可以降低 Redis 的内存使用情况呢？</span></a></h2><p>如果你使用的是32 位的 Redis 实例，可以好好利用 Hash,list,sorted set,set 等集合类型数据，因为通常情况下很多小的 Key-Value 可以用更紧凑的方式存放到一起。</p><h2 id="redis-的内存用完了会发生什么-1" tabindex="-1"><a class="header-anchor" href="#redis-的内存用完了会发生什么-1"><span>Redis 的内存用完了会发生什么？</span></a></h2><p>如果达到设置的上限，Redis 的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以将 Redis 当缓存来使用配置淘汰机制，当 Redis 达到内存上限时会冲刷掉旧的内容。</p><h2 id="一个-redis-实例最多能存放多少的-keys-list、set、-sorted-set-他们最多能存放多少元素" tabindex="-1"><a class="header-anchor" href="#一个-redis-实例最多能存放多少的-keys-list、set、-sorted-set-他们最多能存放多少元素"><span>一个 Redis 实例最多能存放多少的 keys？ List、Set、 Sorted Set 他们最多能存放多少元素？</span></a></h2><p>理论上 Redis 可以处理多达232 的 keys，并且在实际中进行了测试，每个实例至少存放了2 亿5 千万的 keys。我们正在测试一些较大的值。任何 list、 set、和 sorted set 都可以放232 个元素。换句话说，Redis 的存储极限是系统中的可用内存值。</p><h2 id="mysql-里有2000w-数据-redis-中只存20w-的数据-如何保证-redis-中的数据都是热点数据-redis-内存数据集大小上升到一定大小的时候-就会施行数据淘汰策略。" tabindex="-1"><a class="header-anchor" href="#mysql-里有2000w-数据-redis-中只存20w-的数据-如何保证-redis-中的数据都是热点数据-redis-内存数据集大小上升到一定大小的时候-就会施行数据淘汰策略。"><span>MySQL 里有2000w 数据，Redis 中只存20w 的数据，如何保证 redis 中的数据都是热点数据？Redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</span></a></h2><p><strong>相关知识：Redis 提供6 种数据淘汰策略</strong>：</p><p>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选</p><p>最近最少使用的数据淘汰</p><p>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p><p>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p><p>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p><p>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰 no-enviction（驱逐）：禁止驱逐数据</p><h2 id="redis-最适合的场景" tabindex="-1"><a class="header-anchor" href="#redis-最适合的场景"><span>Redis 最适合的场景？</span></a></h2><p><strong>会话缓存（Session Cache）</strong></p><p>最常用的一种使用 Redis 的情景是会话缓存（session cache）。用 Redis 缓存会话比其他存储（如 Memcached）的优势在于：Redis 提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用 Redis 来缓存会话的文档。甚至广为人知的商业平台 Magento 也提供 Redis 的插件。</p><p><strong>全页缓存（FPC）</strong></p><p>除基本的会话 token 之外，Redis 还提供很简便的 FPC 平台。回到一致性问题，即使重启了 Redis 实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似 PHP 本地 FPC。再次以 Magento 为例，Magento 提供一个插件来使用 Redis 作为全页缓存后端。此外，对 WordPress 的用户来说，Pantheon 有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><p><strong>队列</strong></p><p>Reids 在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得 Redis 能作为一个很好的消息队列平台来使用。Redis 作为队列使用的操作，就类似于本地程序语言（如 Python）对 list 的 push/pop 操作。如果你快速的在 Google 中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用 Redis 创建非常好的后端工具，以满足各种队列需求。例如，Celery 有一个后台就是使用 Redis 作为 broker，你可以从这里去查看。</p><p><strong>排行榜/计数器</strong></p><p>Redis 在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis 只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10 个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行： ZRANGE user_scores 0 10 WITHSCORES Agora Games 就是一个很好的例子，用 Ruby 实现的，它的排行榜就是使用 Redis 来存储数据的，你可以在这里看到。</p><p><strong>发布/订阅</strong></p><p>最后（但肯定不是最不重要的）是 Redis 的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用 Redis 的发布/订阅功能来建立聊天系统！</p><h2 id="假如-redis-里面有1-亿个-key-其中有10w-个-key-是以某个固定的已知的前缀开头的-如果将它们全部找出来" tabindex="-1"><a class="header-anchor" href="#假如-redis-里面有1-亿个-key-其中有10w-个-key-是以某个固定的已知的前缀开头的-如果将它们全部找出来"><span>假如 Redis 里面有1 亿个 key，其中有10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？</span></a></h2><p>使用 keys 指令可以扫出指定模式的 key 列表。</p><p>对方接着追问：如果这个 redis 正在给线上的业务提供服务，那使用 keys 指令会有什么问题？</p><p>这个时候你要回答 redis 关键的一个特性：redis 的单线程的。keys 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用 scan 指令，scan 指令可以无阻塞的提取出指定模式的key 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 keys 指令长。</p><h2 id="如果有大量的-key-需要设置同一时间过期-一般需要注意什么" tabindex="-1"><a class="header-anchor" href="#如果有大量的-key-需要设置同一时间过期-一般需要注意什么"><span>如果有大量的 key 需要设置同一时间过期，一般需要注意什么？</span></a></h2><p>如果大量的 key 过期时间设置的过于集中，到过期的那个时间点，redis 可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。</p><h2 id="使用过-redis-做异步队列么-你是怎么用的" tabindex="-1"><a class="header-anchor" href="#使用过-redis-做异步队列么-你是怎么用的"><span>使用过 Redis 做异步队列么，你是怎么用的？</span></a></h2><p>一般使用 list 结构作为队列，rpush 生产消息，lpop 消费消息。当 lpop 没有消息的时候，要适当 sleep 一会再重试。</p><p>如果对方追问可不可以不用 sleep 呢？</p><p>list 还有个指令叫 blpop，在没有消息的时候，它会阻塞住直到消息到来。</p><p>如果对方追问能不能生产一次消费多次呢？</p><p>使用 pub/sub 主题订阅者模式，可以实现1:N 的消息队列。</p><p>如果对方追问 pub/sub 有什么缺点？在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如 RabbitMQ 等。</p><p>如果对方追问 redis 如何实现延时队列？我估计现在你很想把面试官一棒打死如果你手上有一根棒球棍的话，怎么问的这么详细。但是你很克制，然后神态自若的回答道：使用 sortedset，拿时间戳作为 score，消息内容作为 key 调用 zadd 来生产消息，消费者用 zrangebyscore 指令获取 N 秒之前的数据轮询进行处理。到这里，面试官暗地里已经对你竖起了大拇指。但是他不知道的是此刻你却竖起了中指，在椅子背后。</p><h2 id="使用过-redis-分布式锁么-它是什么回事" tabindex="-1"><a class="header-anchor" href="#使用过-redis-分布式锁么-它是什么回事"><span>使用过 Redis 分布式锁么，它是什么回事</span></a></h2><p>先拿 setnx 来争抢锁，抢到之后，再用 expire 给锁加一个过期时间防止锁忘记了释放。</p><p>这时候对方会告诉你说你回答得不错，然后接着问如果在 setnx 之后执行 expire 之前进程意外 crash 或者要重启维护了，那会怎么样？这时候你要给予惊讶的反馈：唉，是喔，这个锁就永远得不到释放了。紧接着你需要抓一抓自己得脑袋，故作思考片刻，好像接下来的结果是你主动思考出来的，然后回答：我记得 set 指令有非常复杂的参数，这个应该是可以同时把 setnx 和 expire 合成一条指令来用的！对方这时会显露笑容，心里开始默念：摁，这小子还不错。</p><h2 id="假如-redis-里面有-1-亿个-key-其中有-10w-个-key-是以某个固定的已知的前缀开头的-如果将它们全部找出来" tabindex="-1"><a class="header-anchor" href="#假如-redis-里面有-1-亿个-key-其中有-10w-个-key-是以某个固定的已知的前缀开头的-如果将它们全部找出来"><span>假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？</span></a></h2><p>使用 keys 指令可以扫出指定模式的 key 列表。</p><p>对方接着追问：如果这个 Redis 正在给线上的业务提供服务，那使用 keys 指令 会有什么问题？</p><p>这个时候你要回答 Redis 关键的一个特性：Redis 的单线程的。keys 指令会导 致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这 个时候可以使用 scan 指令，scan 指令可以无阻塞的提取出指定模式的 key 列 表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费 的时间会比直接用 keys 指令长。</p><h2 id="memcached-与-redis-的区别" tabindex="-1"><a class="header-anchor" href="#memcached-与-redis-的区别"><span>Memcached 与 Redis 的区别？</span></a></h2><ul><li><p>Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset， hash 等数据结构的存储。而 memcache 只支持简单数据类型，需要客户端自 己处理复杂对象。</p></li><li><p>Redis 支持数据的持久化， 可以将内存中的数据保持在磁盘中， 重启的时 候可以再次加载进行使用（ PS： 持久化在 rdb、aof）。</p></li></ul><h2 id="redis-常见性能问题和解决方案-1" tabindex="-1"><a class="header-anchor" href="#redis-常见性能问题和解决方案-1"><span>Redis 常见性能问题和解决方案：</span></a></h2><ul><li><p>Master 最好不要写内存快照，如果 Master 写内存快照，save 命令调度 rdbSave 函数， 会阻塞主线程的工作， 当快照比较大时对性能影响是非常大 的， 会间断性暂停服务。</p></li><li><p>如果数据比较重要， 某个 Slave 开启 AOF 备份数据， 策略设置为每秒 同步一。</p></li><li><p>为了主从复制的速度和连接的稳定性， Master 和 Slave 最好在同一个局 域网。</p></li><li><p>尽量避免在压力很大的主库上增加从。</p></li><li><p>主从复制不要用图状结构， 用单向链表结构更为稳定， 即：Master &lt;- Slave1&lt;- Slave2 &lt;- Slave3… 这样的结构方便解决单点故障问题，实现 Slave 对 Master 的替换。如果 Master 挂了， 可以立刻启用 Slave1 做 Master， 其他不变。</p></li></ul><h2 id="缓存如何实现高并发" tabindex="-1"><a class="header-anchor" href="#缓存如何实现高并发"><span>缓存如何实现高并发？<img src="'+l+'" alt="" loading="lazy"></span></a></h2><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="redis-和-memcached-的区别" tabindex="-1"><a class="header-anchor" href="#redis-和-memcached-的区别"><span>Redis 和 Memcached 的区别</span></a></h2><p>redis 拥有更多的数据结构和丰富的数据操作</p><p>redis 内存利用率高于 memcached</p><p>redis 是单线程，memcached是多线程，在存储大数据的情况下，redis 比 memcached稍有逊色</p><p>memcached没有原生的集群模式，redis 官方支持 redis cluster 集群模式</p><h2 id="用缓存可能出现的问题" tabindex="-1"><a class="header-anchor" href="#用缓存可能出现的问题"><span>用缓存可能出现的问题</span></a></h2><ul><li>数据不一致</li><li>缓存雪崩</li><li>缓存穿透</li><li>缓存并发竞争</li></ul><h2 id="当查询缓存报错-怎么提高可用性" tabindex="-1"><a class="header-anchor" href="#当查询缓存报错-怎么提高可用性"><span>当查询缓存报错，怎么提高可用性？</span></a></h2><p>缓存可以极大的提高查询性能，但是缓存数据丢失和缓存不可用不能影响应用的正常工作。因此，一般情况下，如果缓存出现异常，需要手动捕获这个异常，并且记录日志，并且从数据库查询数据返回给用户，而不应该导致业务不可用。</p><h2 id="如果避免缓存-穿透-的问题" tabindex="-1"><a class="header-anchor" href="#如果避免缓存-穿透-的问题"><span>如果避免缓存”穿透”的问题？</span></a></h2><p>缓存穿透，是指查询一个一定不存在的数据，由于缓存是不命中时被动写，并且处于容错考虑，如果从 DB 查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到 DB 去查询，失去了缓存的意义。</p><p>如何解决</p><p>有两种方案可以解决：</p><p>方案一，缓存空对象。</p><p>当从 DB 查询数据为空，我们仍然将这个空结果进行缓存，具体的值需要使用特殊的标识，能和真正缓存的数据区分开。另外，需要设置较短的过期时间，一般建议不要超过5 分钟。</p><p>方案二，BloomFilter 布隆过滤器。</p><p>在缓存服务的基础上，构建 BloomFilter 数据结构，在 BloomFilter 中存储对应的 KEY 是否存在，如果存在，说明该 KEY 对应的值不为空。</p><h2 id="如何避免缓存-雪崩-的问题" tabindex="-1"><a class="header-anchor" href="#如何避免缓存-雪崩-的问题"><span>如何避免缓存“雪崩”的问题？</span></a></h2><p><strong>缓存雪崩</strong></p><p>缓存雪崩，是指缓存由于某些原因无法提供服务(例如，缓存挂掉了)，所有请求全部达到 DB 中，导致 DB 负荷大增，最终挂掉的情况。</p><p><strong>如何解决</strong></p><p>预防和解决缓存雪崩的问题，可以从以下多个方面进行共同着手。</p><p>1）缓存高可用：通过搭建缓存的高可用，避免缓存挂掉导致无法提供服务的情况，从而降低出现缓存雪崩的情况。假设我们使用 Redis 作为缓存，则可以使用 Redis Sentinel 或 Redis Cluster 实现高可用。</p><p>2）本地缓存：如果使用本地缓存时，即使分布式缓存挂了，也可以将 DB 查询到的结果缓存到本地，避免后续请求全部到达 DB 中。如果我们使用 JVM ，则可以使用 Ehcache、Guava Cache 实现本地缓存的功能。</p><h2 id="如果避免缓存-击穿-的问题" tabindex="-1"><a class="header-anchor" href="#如果避免缓存-击穿-的问题"><span>如果避免缓存“击穿”的问题？</span></a></h2><p><strong>缓存击穿</strong></p><p>缓存击穿，是指某个极度“热点”数据在某个时间点过期时，恰好在这个时间点对这个 KEY 有大量的并发请求过来，这些请求发现缓存过期一般都会从 DB 加载数据并回设到缓存，但是这个时候大并发的请求可能会瞬间 DB 压垮。</p><p>对于一些设置了过期时间的 KEY ，如果这些 KEY 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑这个问题。区别：</p><ul><li>和缓存“雪崩“”的区别在于，前者针对某一 KEY 缓存，后者则是很多 KEY 。</li><li>和缓存“穿透“”的区别在于，这个 KEY 是真实存在对应的值的。</li></ul><p><strong>如何解决</strong></p><p>有两种方案可以解决：</p><p>1）方案一，使用互斥锁。请求发现缓存不存在后，去查询 DB 前，使用分布式锁，保证有且只有一个线程去查询 DB ，并更新到缓存。</p><p>2）方案二，手动过期。缓存上从不设置过期时间，功能上将过期时间存在 KEY 对应的 VALUE 里。流程如下：</p><ul><li>1、获取缓存。通过 VALUE 的过期时间，判断是否过期。如果未过期，则直接返回；如果已过期，继续往下执行。</li><li>2、通过一个后台的异步线程进行缓存的构建，也就是“手动”过期。通过后台的异步线程，保证有且只有一个线程去查询 DB。</li><li>3、同时，虽然 VALUE 已经过期，还是直接返回。通过这样的方式，保证服务的可用性，虽然损失了一定的时效性。</li></ul><h2 id="什么是缓存预热-如何实现缓存预热" tabindex="-1"><a class="header-anchor" href="#什么是缓存预热-如何实现缓存预热"><span>什么是缓存预热？如何实现缓存预热？</span></a></h2><p><strong>缓存预热</strong></p><p>在刚启动的缓存系统中，如果缓存中没有任何数据，如果依靠用户请求的方式重建缓存数据，那么对数据库的压力非常大，而且系统的性能开销也是巨大的。</p><p>此时，最好的策略是启动时就把热点数据加载好。这样，用户请求时，直接读取的就是缓存的数据，而无需去读取 DB 重建缓存数据。举个例子，热门的或者推荐的商品，需要提前预热到缓存中。</p><p><strong>如何实现</strong></p><p>一般来说，有如下几种方式来实现：</p><p>数据量不大时，项目启动时，自动进行初始化。</p><p>写个修复数据脚本，手动执行该脚本。</p><p>写个管理界面，可以手动点击，预热对应的数据到缓存中。</p><h2 id="缓存数据的淘汰策略有哪些" tabindex="-1"><a class="header-anchor" href="#缓存数据的淘汰策略有哪些"><span>缓存数据的淘汰策略有哪些？</span></a></h2><p>除了缓存服务器自带的缓存自动失效策略之外，我们还可以根据具体的业务需求进行自定义的“手动”缓存淘汰，常见的策略有两种：</p><p>1、定时去清理过期的缓存。</p><p>2、当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。</p><p>两者各有优劣，第一种的缺点是维护大量缓存的 key 是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！</p><p>具体用哪种方案，大家可以根据自己的应用场景来权衡。</p>',224),t=[p];function n(h,c){return i(),s("div",null,t)}const u=e(r,[["render",n],["__file","面试题.html.vue"]]),g=JSON.parse('{"path":"/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Redis面试题","lang":"zh-CN","frontmatter":{"description":"Redis面试题 什么是 Redis? Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key-value 数据库。 Redis 与其他 key - value 缓存产品有以下三个特点： Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis 不仅仅支持简单的 key-value 类...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"Redis面试题"}],["meta",{"property":"og:description","content":"Redis面试题 什么是 Redis? Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key-value 数据库。 Redis 与其他 key - value 缓存产品有以下三个特点： Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis 不仅仅支持简单的 key-value 类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://golangguide.top/assets/image/docs/Aspose.Words.51b43265-f45e-4206-a945-0b7c10078cb5.035.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T00:58:04.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Redis面试题"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-04-08T00:58:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis面试题\\",\\"image\\":[\\"https://golangguide.top/assets/image/docs/Aspose.Words.51b43265-f45e-4206-a945-0b7c10078cb5.035.jpeg\\",\\"https://golangguide.top/assets/image/docs/Aspose.Words.51b43265-f45e-4206-a945-0b7c10078cb5.036.jpeg\\"],\\"dateModified\\":\\"2024-04-08T00:58:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"Redis面试题"}],["meta",{"property":"og:description","content":"Redis面试题 什么是 Redis? Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key-value 数据库。 Redis 与其他 key - value 缓存产品有以下三个特点： Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis 不仅仅支持简单的 key-value 类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T00:58:04.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-08T00:58:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T00:58:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是 Redis?","slug":"什么是-redis","link":"#什么是-redis","children":[]},{"level":2,"title":"Redis 的数据类型？","slug":"redis-的数据类型","link":"#redis-的数据类型","children":[]},{"level":2,"title":"使用 Redis 有哪些好处？","slug":"使用-redis-有哪些好处","link":"#使用-redis-有哪些好处","children":[]},{"level":2,"title":"Redis 相比 Memcached 有哪些优势？","slug":"redis-相比-memcached-有哪些优势","link":"#redis-相比-memcached-有哪些优势","children":[]},{"level":2,"title":"Memcache 与 Redis 的区别都有哪些？","slug":"memcache-与-redis-的区别都有哪些","link":"#memcache-与-redis-的区别都有哪些","children":[]},{"level":2,"title":"Redis 是单进程单线程的？","slug":"redis-是单进程单线程的","link":"#redis-是单进程单线程的","children":[]},{"level":2,"title":"一个字符串类型的值能存储最大容量是多少？","slug":"一个字符串类型的值能存储最大容量是多少","link":"#一个字符串类型的值能存储最大容量是多少","children":[]},{"level":2,"title":"Redis 集群最大节点个数是多少？","slug":"redis-集群最大节点个数是多少","link":"#redis-集群最大节点个数是多少","children":[]},{"level":2,"title":"Reids 的特点","slug":"reids-的特点","link":"#reids-的特点","children":[]},{"level":2,"title":"使用 Redis 有哪些好处？","slug":"使用-redis-有哪些好处-1","link":"#使用-redis-有哪些好处-1","children":[]},{"level":2,"title":"为什么 edis 需要把所有数据放到内存中？","slug":"为什么-edis-需要把所有数据放到内存中","link":"#为什么-edis-需要把所有数据放到内存中","children":[]},{"level":2,"title":"Redis 的内存用完了会发生什么？","slug":"redis-的内存用完了会发生什么","link":"#redis-的内存用完了会发生什么","children":[]},{"level":2,"title":"Redis  的回收策略（淘汰策略）","slug":"redis-的回收策略-淘汰策略","link":"#redis-的回收策略-淘汰策略","children":[]},{"level":2,"title":"Redis 的持久化机制是什么？各自的优缺点？","slug":"redis-的持久化机制是什么-各自的优缺点","link":"#redis-的持久化机制是什么-各自的优缺点","children":[]},{"level":2,"title":"Redis 常见性能问题和解决方案：","slug":"redis-常见性能问题和解决方案","link":"#redis-常见性能问题和解决方案","children":[]},{"level":2,"title":"Redis 过期键的删除策略？","slug":"redis-过期键的删除策略","link":"#redis-过期键的删除策略","children":[]},{"level":2,"title":"Redis 的回收策略（淘汰策略）?","slug":"redis-的回收策略-淘汰策略-1","link":"#redis-的回收策略-淘汰策略-1","children":[]},{"level":2,"title":"为什么 Redis 需要把所有数据放到内存中？","slug":"为什么-redis-需要把所有数据放到内存中","link":"#为什么-redis-需要把所有数据放到内存中","children":[]},{"level":2,"title":"Redis 的同步机制了解么？","slug":"redis-的同步机制了解么","link":"#redis-的同步机制了解么","children":[]},{"level":2,"title":"Pipeline 有什么好处，为什么要用 Pipeline？","slug":"pipeline-有什么好处-为什么要用-pipeline","link":"#pipeline-有什么好处-为什么要用-pipeline","children":[]},{"level":2,"title":"是否使用过 Redis 集群，集群的原理是什么？","slug":"是否使用过-redis-集群-集群的原理是什么","link":"#是否使用过-redis-集群-集群的原理是什么","children":[]},{"level":2,"title":"Redis 集群方案什么情况下会导致整个集群不可用？","slug":"redis-集群方案什么情况下会导致整个集群不可用","link":"#redis-集群方案什么情况下会导致整个集群不可用","children":[]},{"level":2,"title":"Redis 支持的 Java 客户端都有哪些？官方推荐用哪个？","slug":"redis-支持的-java-客户端都有哪些-官方推荐用哪个","link":"#redis-支持的-java-客户端都有哪些-官方推荐用哪个","children":[]},{"level":2,"title":"Jedis 与 Redisson 对比有什么优缺点？","slug":"jedis-与-redisson-对比有什么优缺点","link":"#jedis-与-redisson-对比有什么优缺点","children":[]},{"level":2,"title":"Redis 如何设置密码及验证密码？","slug":"redis-如何设置密码及验证密码","link":"#redis-如何设置密码及验证密码","children":[]},{"level":2,"title":"说说 Redis 哈希槽的概念？","slug":"说说-redis-哈希槽的概念","link":"#说说-redis-哈希槽的概念","children":[]},{"level":2,"title":"Redis 集群的主从复制模型是怎样的？","slug":"redis-集群的主从复制模型是怎样的","link":"#redis-集群的主从复制模型是怎样的","children":[]},{"level":2,"title":"Redis 集群会有写操作丢失吗？为什么？","slug":"redis-集群会有写操作丢失吗-为什么","link":"#redis-集群会有写操作丢失吗-为什么","children":[]},{"level":2,"title":"Redis 集群之间是如何复制的？","slug":"redis-集群之间是如何复制的","link":"#redis-集群之间是如何复制的","children":[]},{"level":2,"title":"Redis 集群最大节点个数是多少？","slug":"redis-集群最大节点个数是多少-1","link":"#redis-集群最大节点个数是多少-1","children":[]},{"level":2,"title":"Redis 集群如何选择数据库？","slug":"redis-集群如何选择数据库","link":"#redis-集群如何选择数据库","children":[]},{"level":2,"title":"怎么测试 Redis 的连通性","slug":"怎么测试-redis-的连通性","link":"#怎么测试-redis-的连通性","children":[]},{"level":2,"title":"怎么理解 Redis 事务？","slug":"怎么理解-redis-事务","link":"#怎么理解-redis-事务","children":[]},{"level":2,"title":"Redis 事务相关的命令有哪几个？","slug":"redis-事务相关的命令有哪几个","link":"#redis-事务相关的命令有哪几个","children":[]},{"level":2,"title":"Redis key 的过期时间和永久有效分别怎么设置？","slug":"redis-key-的过期时间和永久有效分别怎么设置","link":"#redis-key-的过期时间和永久有效分别怎么设置","children":[]},{"level":2,"title":"Redis 如何做内存优化？","slug":"redis-如何做内存优化","link":"#redis-如何做内存优化","children":[]},{"level":2,"title":"Redis 回收进程如何工作的？","slug":"redis-回收进程如何工作的","link":"#redis-回收进程如何工作的","children":[]},{"level":2,"title":"都有哪些办法可以降低 Redis 的内存使用情况呢？","slug":"都有哪些办法可以降低-redis-的内存使用情况呢","link":"#都有哪些办法可以降低-redis-的内存使用情况呢","children":[]},{"level":2,"title":"Redis 的内存用完了会发生什么？","slug":"redis-的内存用完了会发生什么-1","link":"#redis-的内存用完了会发生什么-1","children":[]},{"level":2,"title":"一个 Redis 实例最多能存放多少的 keys？ List、Set、 Sorted Set 他们最多能存放多少元素？","slug":"一个-redis-实例最多能存放多少的-keys-list、set、-sorted-set-他们最多能存放多少元素","link":"#一个-redis-实例最多能存放多少的-keys-list、set、-sorted-set-他们最多能存放多少元素","children":[]},{"level":2,"title":"MySQL 里有2000w 数据，Redis 中只存20w 的数据，如何保证 redis 中的数据都是热点数据？Redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。","slug":"mysql-里有2000w-数据-redis-中只存20w-的数据-如何保证-redis-中的数据都是热点数据-redis-内存数据集大小上升到一定大小的时候-就会施行数据淘汰策略。","link":"#mysql-里有2000w-数据-redis-中只存20w-的数据-如何保证-redis-中的数据都是热点数据-redis-内存数据集大小上升到一定大小的时候-就会施行数据淘汰策略。","children":[]},{"level":2,"title":"Redis 最适合的场景？","slug":"redis-最适合的场景","link":"#redis-最适合的场景","children":[]},{"level":2,"title":"假如 Redis 里面有1 亿个 key，其中有10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？","slug":"假如-redis-里面有1-亿个-key-其中有10w-个-key-是以某个固定的已知的前缀开头的-如果将它们全部找出来","link":"#假如-redis-里面有1-亿个-key-其中有10w-个-key-是以某个固定的已知的前缀开头的-如果将它们全部找出来","children":[]},{"level":2,"title":"如果有大量的 key 需要设置同一时间过期，一般需要注意什么？","slug":"如果有大量的-key-需要设置同一时间过期-一般需要注意什么","link":"#如果有大量的-key-需要设置同一时间过期-一般需要注意什么","children":[]},{"level":2,"title":"使用过 Redis 做异步队列么，你是怎么用的？","slug":"使用过-redis-做异步队列么-你是怎么用的","link":"#使用过-redis-做异步队列么-你是怎么用的","children":[]},{"level":2,"title":"使用过 Redis 分布式锁么，它是什么回事","slug":"使用过-redis-分布式锁么-它是什么回事","link":"#使用过-redis-分布式锁么-它是什么回事","children":[]},{"level":2,"title":"假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？","slug":"假如-redis-里面有-1-亿个-key-其中有-10w-个-key-是以某个固定的已知的前缀开头的-如果将它们全部找出来","link":"#假如-redis-里面有-1-亿个-key-其中有-10w-个-key-是以某个固定的已知的前缀开头的-如果将它们全部找出来","children":[]},{"level":2,"title":"Memcached  与 Redis  的区别？","slug":"memcached-与-redis-的区别","link":"#memcached-与-redis-的区别","children":[]},{"level":2,"title":"Redis  常见性能问题和解决方案：","slug":"redis-常见性能问题和解决方案-1","link":"#redis-常见性能问题和解决方案-1","children":[]},{"level":2,"title":"缓存如何实现高并发？","slug":"缓存如何实现高并发","link":"#缓存如何实现高并发","children":[]},{"level":2,"title":"Redis 和 Memcached 的区别","slug":"redis-和-memcached-的区别","link":"#redis-和-memcached-的区别","children":[]},{"level":2,"title":"用缓存可能出现的问题","slug":"用缓存可能出现的问题","link":"#用缓存可能出现的问题","children":[]},{"level":2,"title":"当查询缓存报错，怎么提高可用性？","slug":"当查询缓存报错-怎么提高可用性","link":"#当查询缓存报错-怎么提高可用性","children":[]},{"level":2,"title":"如果避免缓存”穿透”的问题？","slug":"如果避免缓存-穿透-的问题","link":"#如果避免缓存-穿透-的问题","children":[]},{"level":2,"title":"如何避免缓存“雪崩”的问题？","slug":"如何避免缓存-雪崩-的问题","link":"#如何避免缓存-雪崩-的问题","children":[]},{"level":2,"title":"如果避免缓存“击穿”的问题？","slug":"如果避免缓存-击穿-的问题","link":"#如果避免缓存-击穿-的问题","children":[]},{"level":2,"title":"什么是缓存预热？如何实现缓存预热？","slug":"什么是缓存预热-如何实现缓存预热","link":"#什么是缓存预热-如何实现缓存预热","children":[]},{"level":2,"title":"缓存数据的淘汰策略有哪些？","slug":"缓存数据的淘汰策略有哪些","link":"#缓存数据的淘汰策略有哪些","children":[]}],"git":{"createdTime":1707812321000,"updatedTime":1712537884000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1},{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":29.53,"words":8860},"filePathRelative":"中间件/redis/面试题.md","localizedDate":"2024年2月13日","autoDesc":true}');export{u as comp,g as data};
