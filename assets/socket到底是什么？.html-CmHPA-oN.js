import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as s,b as t,d as n,e as i,o as p,r}from"./app-G1Aj0uLO.js";const g={},d={href:"https://mp.weixin.qq.com/s/n17NjGRab1u5eXkOCro1gg",target:"_blank",rel:"noopener noreferrer"};function l(k,o){const e=r("ExternalLinkIcon");return p(),a("div",null,[o[4]||(o[4]=s(`<h1 id="socket-到底是什么" tabindex="-1"><a class="header-anchor" href="#socket-到底是什么"><span>socket 到底是什么？</span></a></h1><p>我相信大家刚开始学 socket 的时候，都跟我一样。</p><p>云里雾里的，对 socket 的概念很模糊。</p><p>这篇文章我打算从一个初学者的角度开始聊起，让大家了解下<strong>我眼里</strong>的 socket 到底是什么以及 socket 的原理和内核实现。</p><h2 id="socket-的概念" tabindex="-1"><a class="header-anchor" href="#socket-的概念"><span>socket 的概念</span></a></h2><p>故事要从一个<strong>插头</strong>说起。</p><figure><img src="https://cdn.xiaobaidebug.top/1671412778823.png" alt="插头与插座" tabindex="0" loading="lazy"><figcaption>插头与插座</figcaption></figure><p>当我将<strong>插头</strong>插入<strong>插座</strong>，那看起来就像是将两者连起来了。</p><figure><img src="https://cdn.xiaobaidebug.top/1671414808678.png" alt="风扇与电力系统建立&quot;连接&quot;" tabindex="0" loading="lazy"><figcaption>风扇与电力系统建立&quot;连接&quot;</figcaption></figure><p>而插座的英文，又叫<code>socket</code>。</p><p>巧了，我们程序员搞网络编程时也会用到一个叫<code>socket</code>的东西。</p><p>其实两者非常相似。通过<code>socket</code>，我们可以与某台机子建立&quot;<strong>连接</strong>&quot;，建立&quot;连接&quot;的过程，就像是将插口插入插槽一样。</p><figure><img src="https://cdn.xiaobaidebug.top/1671412753423.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>大概概念是了解了，但我相信各位对<code>socket</code>其实还是很模糊。</p><p>我们从大家最熟悉的<strong>使用场景</strong>开始说起。</p><h2 id="socket-的使用场景" tabindex="-1"><a class="header-anchor" href="#socket-的使用场景"><span>socket 的使用场景</span></a></h2><p>我们想要将数据从 A 电脑的某个进程发到 B 电脑的某个进程。</p><p>这时候我们需要选择将数据发过去的<strong>方式</strong>，如果需要确保数据要能发给对方，那就选可靠的<code>TCP</code>协议，如果数据丢了也没关系，看天意，那就选择不可靠的<code>UDP</code>协议。</p><p>初学者毫无疑问，首选<code>TCP</code>。</p><figure><img src="https://cdn.xiaobaidebug.top/tcp是什么5.drawio.png" alt="TCP是什么" tabindex="0" loading="lazy"><figcaption>TCP是什么</figcaption></figure><p>那这时候就需要用<code>socket</code>进行编程。</p><p>于是第一步就是创建个关于 TCP 的<code>socket</code>。就像下面这样。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>sock_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个方法会返回<code>socket_fd</code>，它是 socket 文件的句柄，是个数字，相当于 socket 的身份证号。</p><p>得到了<code>socket_fd</code>之后，对于服务端，就可以依次执行<code>bind()</code>, <code>listen()</code>, <code>accept()</code>方法，然后坐等客户端的连接请求。</p><p>对于客户端，得到<code>socket_fd</code>之后，你就可以执行<code>connect()</code>方法向服务端发起建立连接的请求，此时就会发生 TCP 三次握手。</p><figure><img src="https://cdn.xiaobaidebug.top/image/握手建立连接流程3.gif" alt="握手建立连接流程" tabindex="0" loading="lazy"><figcaption>握手建立连接流程</figcaption></figure><p>连接建立完成后，<strong>客户端</strong>可以执行<code>send()</code> 方法发送消息，<strong>服务端</strong>可以执行<code>recv()</code>方法接收消息，反过来，<strong>服务器</strong>也可以执行<code>send()</code>，<strong>客户端</strong>执行<code>recv()</code>方法。</p><p>到这里为止，就是我们大部分程序员最熟悉的使用场景。</p><h2 id="socket-的设计" tabindex="-1"><a class="header-anchor" href="#socket-的设计"><span>socket 的设计</span></a></h2><p>现在，socket 我们见过，也用过，但对大部分程序员来说，它是个<strong>黑盒</strong>。</p><p>那既然是黑盒，我们索性假设我们忘了 socket。重新设计一个内核网络传输功能。</p><p>网络传输，从操作上来看，无非就是，发数据和远端之间<strong>互相</strong>收发数据。也就是对应着<strong>写数据</strong>和<strong>读数据</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1671413103857.png" alt="读写收发" tabindex="0" loading="lazy"><figcaption>读写收发</figcaption></figure><p>但显然，事情没那么简单。</p><p>这里还有两个问题。</p><p>第一个是，接收端和发送端可能不止一个，因此我们需要一些信息做下区分，这个大家肯定很熟悉，可以用 IP 和端口。<strong>IP 用来定位是哪台电脑，端口用来定位是这台电脑上的哪个进程。</strong></p><p>第二个是，发送端和接收端的传输方式有很多区别，可以是可靠的<code>TCP协议</code>，也可以是不可靠的<code>UDP协议</code>，甚至还需要支持基于<code>icmp协议</code>的<code>ping命令</code>。</p><h3 id="sock-是什么" tabindex="-1"><a class="header-anchor" href="#sock-是什么"><span>sock 是什么</span></a></h3><p>写过代码的都知道，为了支持这些功能，我们需要定义一个<strong>数据结构</strong>去支持这些功能。</p><p>这个数据结构，叫<code>sock</code>。</p><p>为了解决上面的第一个问题，我们可以在<code>sock</code>里加入<strong>IP 和端口</strong>字段。</p><figure><img src="https://cdn.xiaobaidebug.top/1671415108690.png" alt="sock加入IP和端口字段" tabindex="0" loading="lazy"><figcaption>sock加入IP和端口字段</figcaption></figure><p>而第二个问题，我们会发现这些协议虽然各不相同，但还是有一些功能相似的地方，比如收发数据时的一些逻辑完全可以复用。按面向对象编程的思想，我们可以将不同的协议当成是不同的<strong>对象类（或结构体）</strong>，将公共的部分提取出来，通过&quot;<strong>继承</strong>&quot;的方式，复用功能。</p><h3 id="基于各种-sock-实现网络传输功能" tabindex="-1"><a class="header-anchor" href="#基于各种-sock-实现网络传输功能"><span>基于各种 sock 实现网络传输功能</span></a></h3><p>于是，我们将功能<strong>重新划分</strong>下，定义了一些数据结构。</p><figure><img src="https://cdn.xiaobaidebug.top/1671413147955.png" alt="继承sock的各类sock" tabindex="0" loading="lazy"><figcaption>继承sock的各类sock</figcaption></figure><p><code>sock</code>是<strong>最基础</strong>的结构，维护一些任何协议都有可能会用到的收发数据缓冲区。</p><p><code>inet_sock</code>特指用了<strong>网络传输</strong>功能的<code>sock</code>，在<code>sock</code>的基础上还加入了<code>TTL</code>，<strong>端口，IP 地址</strong>这些跟网络传输相关的字段信息。说到这里大家就懵了，难道还有不是用网络传输的？有，比如<code>Unix domain socket</code>，用于本机进程之间的通信，直接读写文件，不需要经过网络协议栈。这是个非常有用的东西，我以后一定讲讲（画饼）。</p><p><code>inet_connection_sock</code> 是指<strong>面向连接</strong>的<code>sock</code>，在<code>inet_sock</code>的基础上加入面向连接的协议里相关字段，比如<code>accept队列</code>，数据包分片大小，握手失败重试次数等。虽然我们现在提到面向连接的协议就是指 TCP，但设计上 linux 需要支持扩展<strong>其他</strong>面向连接的<strong>新协议</strong>，</p><p><code>tcp_sock</code> 就是正儿八经的<strong>tcp 协议</strong>专用的<code>sock</code>结构了，在<code>inet_connection_sock</code>基础上还加入了 tcp 特有的<strong>滑动窗口</strong>、<strong>拥塞避免</strong>等功能。同样 udp 协议也会有一个专用的数据结构，叫<code>udp_sock</code>。</p><p>好了，现在有了这套数据结构，每个数据结构实现自己职责范围内的功能，然后再将它们跟<strong>硬件</strong>网卡对接一下，就实现了网络传输的功能。</p><h3 id="提供-socket-层" tabindex="-1"><a class="header-anchor" href="#提供-socket-层"><span>提供 socket 层</span></a></h3><p>可以想象到，这里面的代码肯定非常复杂，同时还操作了网卡硬件，需要比较高的操作系统权限，再考虑到性能和安全，于是决定将它放在操作系统内核里。</p><p>既然跟远端服务端进程收发数据可以抽象为“<strong>读和写</strong>”，操作文件也可以抽象为&quot;<strong>读和写</strong>&quot;，正好有句话叫，&quot;<strong>linux 里一切皆是文件</strong>&quot;，那我们索性，<strong>将内核的 sock 封装成文件</strong>就好了。创建<code>sock</code>的同时也创建一个<strong>文件</strong>，<strong>文件有个句柄 fd</strong>，说白了就是个<strong>文件系统</strong>里的<strong>身份证号码</strong>，通过它可以<strong>唯一确定</strong>是哪个<code>sock</code>。</p><blockquote><p>这个文件句柄 fd 其实就是 <code>sock_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)</code> 里的<code>sock_fd</code>。</p></blockquote><p>将句柄暴露给用户，之后用户操作这个<strong>文件句柄</strong>，<strong>文件系统</strong>就会将操作<strong>指向</strong>内核<code>sock</code>结构。</p><figure><img src="https://cdn.xiaobaidebug.top/1671412953026.png" alt="通过文件找到sock" tabindex="0" loading="lazy"><figcaption>通过文件找到sock</figcaption></figure><p>有了<code>sock fd句柄</code>之后，我们将这部分功能抽象成一个个简单的 API 接口，让用户更方便的实现特定的网络编程功能。以后别人只需要调用这些 API 接口，就可以驱动我们写好的这一大堆复杂的数据结构去发送数据。这些 API 接口，我们列了一下，发现需要有<code>send()</code>，<code>recv()</code>，<code>bind()</code>, <code>listen()</code>，<code>connect()</code>这些。</p><p>现在是不是眼熟了，<strong>上面这些接口方法其实就是 socket 提供出来的接口。</strong></p><p>到这里，我们的内核网络传输功能就算设计完成了。</p><p>所以说，socket 其实就是个<strong>代码库或接口层</strong>，它<strong>介于内核和应用程序之间</strong>，提供了一些高度封装过的接口，让我们去使用内核网络的传输功能。</p><figure><img src="https://cdn.xiaobaidebug.top/1671412844681.png" alt="基于sock实现网络传输功能" tabindex="0" loading="lazy"><figcaption>基于sock实现网络传输功能</figcaption></figure><p>到这里，我们应该明白了。我们平时写的应用程序里代码里虽然用了 socket 实现了收发数据包的功能，但其实真正执行网络通信功能的，不是应用程序，而是<strong>linux 内核</strong>。相当于应用程序通过 socket 提供的接口，将网络传输的这部分工作<strong>外包</strong>给了<strong>linux 内核</strong>。</p><p>这听起来像不像我们最熟悉的<strong>前后端分离</strong>的服务架构，<strong>虽然这么说不太严谨</strong>，但看上去 linux 就像是被分成了<strong>应用程序和内核两个服务</strong>。内核就像是<strong>后端</strong>，暴露了好多个<strong>api 接口</strong>，其中一类就是 socket 的<code>send()</code>和<code>recv()</code>这些方法。应用程序就像是<strong>前端</strong>，负责调用内核提供的接口来实现想要的功能。</p><figure><img src="https://cdn.xiaobaidebug.top/1671413031784.png" alt="进程通过socket调用内核功能" tabindex="0" loading="lazy"><figcaption>进程通过socket调用内核功能</figcaption></figure><p>看到这里，我担心大家会有点混乱，来做个小的<strong>总结</strong>。</p><p><strong>在操作系统内核空间里，实现网络传输功能的结构是 sock，基于不同的协议和应用场景，会被泛化为各种类型的 xx_sock，它们结合硬件，共同实现了网络传输功能。为了将这部分功能暴露给用户空间的应用程序使用，于是引入了 socket 层，同时将 sock 嵌入到文件系统的框架里，sock 就变成了一个特殊的文件，用户就可以在用户空间使用文件句柄，也就是 socket_fd 来操作内核 sock 的网络传输能力。</strong></p><p>这个<code>socket_fd</code>是一个<strong>int 类型的数字</strong>。现在回去看<code>socket</code>的中文翻译，<strong>套接字</strong>，<strong>我</strong>将它理解为一<strong>套</strong>用于连<strong>接</strong>的数<strong>字</strong>，是不是就觉得特别合理了。</p><figure><img src="https://cdn.xiaobaidebug.top/1671412915637.png" alt="网络分层与基于sock实现网络传输功能" tabindex="0" loading="lazy"><figcaption>网络分层与基于sock实现网络传输功能</figcaption></figure><h2 id="socket-如何实现网络通信" tabindex="-1"><a class="header-anchor" href="#socket-如何实现网络通信"><span>socket 如何实现网络通信</span></a></h2><p>上面关于怎么实现网络通信功能这一块一笔带过了。</p><p>现在我们来聊聊。</p><p>这套 sock 的结构其实非常复杂。我们以最常用的 TCP 协议为例，简单了解下它是怎么实现网络传输功能的。</p><p>我将它分为两阶段，分别是<strong>建立连接</strong>和<strong>数据传输</strong>。</p><h3 id="建立连接" tabindex="-1"><a class="header-anchor" href="#建立连接"><span>建立连接</span></a></h3><p>对于 TCP，要传数据，就得先在客户端和服务端中间<strong>建立连接</strong>。</p><p>在客户端，代码执行 socket 提供的<code>connect(sockfd, &quot;ip:port&quot;)</code>方法时，会通过<strong>sockfd 句柄</strong>找到对应的<strong>文件</strong>，再根据文件里的信息<strong>指向</strong>内核的<code>sock</code>结构。通过这个 sock 结构主动发起三次握手。</p><figure><img src="https://cdn.xiaobaidebug.top/image/TCP三次握手修正版2.png" alt="TCP三次握手" tabindex="0" loading="lazy"><figcaption>TCP三次握手</figcaption></figure><p>在服务端握手次数还没达到&quot;三次&quot;的连接，叫<strong>半连接</strong>，完成好三次握手的连接，叫<strong>全连接</strong>。它们分别会用<strong>半连接队列</strong>和<strong>全连接队列</strong>来存放，这两个队列会在你执行<code>listen()</code>方法的时候创建好。当服务端执行<code>accept()</code>方法时，就会从全连接队列里拿出一条全连接。</p><figure><img src="https://cdn.xiaobaidebug.top/image/半连接队列和全连接队列3.png" alt="半连接队列和全连接队列" tabindex="0" loading="lazy"><figcaption>半连接队列和全连接队列</figcaption></figure><p>至此，连接就算准备好了，之后，就可以<strong>开始传输数据</strong>。</p>`,82)),t("blockquote",null,[o[3]||(o[3]=t("p",null,"虽然都叫队列，但半连接队列其实是个 hash 表，而全连接队列其实是个链表。",-1)),t("p",null,[o[1]||(o[1]=n("那么问题来了，为什么半连接队列要设计成哈希表而全连接队列是个链表？这个在我在我之前写的")),t("a",d,[o[0]||(o[0]=n("《没有 accept，能建立 TCP 连接吗？》")),i(e)]),o[2]||(o[2]=n(" 已经提到过，不再重复。"))])]),o[5]||(o[5]=s(`<h3 id="数据传输" tabindex="-1"><a class="header-anchor" href="#数据传输"><span>数据传输</span></a></h3><p>为了实现发送和接收数据的功能，sock 结构体里带了<strong>一个发送缓冲区和一个接收缓冲区</strong>，说是<strong>缓冲区</strong>，但其实就是个<strong>链表</strong>，上面挂着一个个准备要发送或接收的数据。</p><p>当应用执行<code>send()</code>方法<strong>发送数据</strong>时，同样也会通过<code>sock_fd</code>句柄找到对应的文件，根据文件指向的<code>sock</code>结构，找到这个<code>sock</code>结构里带的<strong>发送缓冲区</strong>，将数据会放到发送缓冲区，然后结束流程，内核看心情决定什么时候将这份数据发送出去。</p><p><strong>接收数据</strong>流程也类似，当数据送到 linux 内核后，数据不是立马给到应用程序的，而是先放在接收缓冲区中，数据静静躺着，卑微的等待<strong>应用程序</strong>什么时候执行<code>recv()</code>方法来拿一下。就像我的文章，躺在你的推文列表里，卑微的等一个<strong>点赞关注转发三连</strong>。懂？</p><figure><img src="https://cdn.xiaobaidebug.top/1671415539657.png" alt="sock的发送和接收缓冲区" tabindex="0" loading="lazy"><figcaption>sock的发送和接收缓冲区</figcaption></figure><blockquote><p>IP 和端口其实不在 sock 下，而在 inet_sock 下，上面这么画只是为了简化。。。</p></blockquote><p>那么问题来了，发送数据是应用程序主动发起，这个大家都没问题。</p><p><strong>那接收数据呢？数据从远端发过来了，怎么通知并给到应用程序呢？</strong></p><p>这就需要用到<strong>等待队列</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1671415660725.png" alt="sock内的等待队列" tabindex="0" loading="lazy"><figcaption>sock内的等待队列</figcaption></figure><p>当你的应用进程执行<code>recv()</code>方法尝试获取（阻塞场景下）接收缓冲区的数据时。</p><ul><li>如果有数据，那正好，取走就好了。这点没啥疑问。</li><li>但如果没数据，就会将自己的<strong>进程</strong>信息注册到这个 sock 用的<strong>等待队列</strong>里，然后进程<strong>休眠</strong>。如果这时候有数据从远端发过来了，数据进入到接收缓冲区时，内核就会取出 sock 的等待队列里的进程，<strong>唤醒</strong>进程来取数据。</li></ul><figure><img src="https://cdn.xiaobaidebug.top/1671545221736.png" alt="recv时无数据进程进入等待队列" tabindex="0" loading="lazy"><figcaption>recv时无数据进程进入等待队列</figcaption></figure><p>有时候，你会看到<strong>多个进程</strong>通过<code>fork</code>的方式，<code>listen</code>了同一个<code>socket_fd</code>。在内核，它们都是<strong>同一个 sock</strong>，多个进程执行<code>listen()</code>之后，都嗷嗷等待连接进来，所以都会将自身的进程信息注册到这个 socket_fd 对应的内核 sock 的<strong>等待队列</strong>中。如果这时真来了一个连接，是该唤醒等待队列里的哪个进程来接收连接呢？这个问题的答案比较有趣。</p><ul><li>在 linux 2.6 以前，会唤醒等待队列里的所有进程。但最后其实只有一个进程会处理这个连接请求，其他进程又重新进入休眠，这些被唤醒了又无事可做最后只能重新回去休眠的进程会消耗一定的资源。就好像你在广东的街头，想问路，叫一声靓仔，几十个人同时回头，但你其实只需要其中一个靓仔告诉你路该怎么走。你这种一不小心<strong>惊</strong>动这<strong>群</strong>靓仔的场景，在计算机领域中，就叫<strong>惊群效应</strong>。</li><li>在 linux 2.6 之后，只会唤醒等待队列里的其中一个进程。是的，socket 监听的惊群效应问题被修复了。</li></ul><figure><img src="https://cdn.xiaobaidebug.top/1671416368022.png" alt="惊群效应" tabindex="0" loading="lazy"><figcaption>惊群效应</figcaption></figure><p>看到这里，问题又来了。</p><p><strong>服务端 listen 的时候，那么多数据到一个 socket 怎么区分多个客户端的？</strong></p><p>以 TCP 为例，服务端执行 listen 方法后，会等待客户端发送数据来。客户端发来的数据包上会有<strong>源 IP 地址和端口</strong>，以及<strong>目的 IP 地址和端口</strong>，这四个元素构成一个<strong>四元组</strong>，可以用于唯一标记一个客户端。</p><blockquote><p>其实说四元组并不严谨，因为过程中还有很多其他信息，也可以说是五元组。。。但大概理解就好，就这样吧。。。</p></blockquote><figure><img src="https://cdn.xiaobaidebug.top/1671412649957.png" alt="四元组" tabindex="0" loading="lazy"><figcaption>四元组</figcaption></figure><p>服务端会创建一个新的内核 sock，并用四元组生成一个<code>hash key</code>，将它放入到一个<code>hash表</code>中。</p><figure><img src="https://cdn.xiaobaidebug.top/1671412603028.png" alt="四元组映射成hash键" tabindex="0" loading="lazy"><figcaption>四元组映射成hash键</figcaption></figure><p>下次再有消息进来的时候，通过消息自带的四元组生成<code>hash key</code>再到这个<code>hash表</code>里重新取出<strong>对应的 sock</strong>就好了。所以说<strong>服务端是通过四元组来区分多个客户端的</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/1671412571927.png" alt="多个hash_key对应多个客户端" tabindex="0" loading="lazy"><figcaption>多个hash_key对应多个客户端</figcaption></figure><h2 id="sock-怎么实现-继承" tabindex="-1"><a class="header-anchor" href="#sock-怎么实现-继承"><span>sock 怎么实现&quot;继承&quot;</span></a></h2><p>最后遗留一个问题。</p><p>大家都知道 linux 内核是 C 语言实现的，而<strong>C 语言没有类也没有继承的特性，是怎么做到&quot;继承&quot;的效果的呢？</strong></p><p>在 C 语言里，结构体里的内存是<strong>连续</strong>的，将要继承的&quot;父类&quot;，放到结构体的<strong>第一位</strong>，就像下面这样。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">tcp_sock</span> <span class="token punctuation">{</span>
	<span class="token comment">/* inet_connection_sock has to be the first member of tcp_sock */</span>
	<span class="token keyword">struct</span> <span class="token class-name">inet_connection_sock</span>	inet_conn<span class="token punctuation">;</span>
        <span class="token comment">// 其他字段</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">inet_connection_sock</span> <span class="token punctuation">{</span>
	<span class="token comment">/* inet_sock has to be the first member! */</span>
	<span class="token keyword">struct</span> <span class="token class-name">inet_sock</span>	  icsk_inet<span class="token punctuation">;</span>
        <span class="token comment">// 其他字段</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们就可以通过结构体名的长度来强行截取内存，这样就能转换结构体，从而实现类似&quot;继承&quot;的效果。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// sock 转为 tcp_sock</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">tcp_sock</span> <span class="token operator">*</span><span class="token function">tcp_sk</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tcp_sock</span> <span class="token operator">*</span><span class="token punctuation">)</span>sk<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.xiaobaidebug.top/1671413228308.png" alt="内存布局" tabindex="0" loading="lazy"><figcaption>内存布局</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>socket 中文套接字，我理解为一<strong>套</strong>用于连<strong>接</strong>的数<strong>字</strong>。并不一定准确，欢迎评论。</li><li>sock 在内核，socket_fd 在用户空间，socket 层介于内核和用户空间之间。</li><li>在操作系统内核空间里，实现网络传输功能的结构是 sock，基于不同的协议和应用场景，会被泛化为各种类型的 xx_sock，它们结合硬件，共同实现了网络传输功能。为了将这部分功能暴露给用户空间的应用程序使用，于是引入了 socket 层，同时将 sock 嵌入到文件系统的框架里，sock 就变成了一个特殊的文件，用户就可以在用户空间使用文件句柄，也就是 socket_fd 来操作内核 sock 的网络传输能力。</li><li>服务端可以通过四元组来区分多个客户端。</li><li>内核通过 c 语言&quot;结构体里的内存是连续的&quot;这一特点实现了类似继承的效果。</li></ul><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>这是图解网络系列的第 27 篇文章。</p><p>大部分文章都是通过一个问题去引发话题，然后从基础开始讲起，最后再去回答问题。</p><p>我希望能做到的是将一个话题聊深，让新手能看懂，让有一些工作经验的人看了也能有一定的收获。</p><p>所以，从选题到写文再到画图，时间成本极高。</p><p>最近有人提到过这样&quot;<strong>不体系，不连贯，也不连续</strong>&quot;，我也为此吃了个大亏。</p><p>比较难受吧。</p><p>我在想接下来该写点啥。</p><p>大家是希望看点体系化的内容吗？</p><p>我们评论区聊聊。</p>`,45))])}const h=c(g,[["render",l],["__file","socket到底是什么？.html.vue"]]),m=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/socket%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F.html","title":"socket 到底是什么？","lang":"zh-CN","frontmatter":{"description":"socket 到底是什么？ 我相信大家刚开始学 socket 的时候，都跟我一样。 云里雾里的，对 socket 的概念很模糊。 这篇文章我打算从一个初学者的角度开始聊起，让大家了解下我眼里的 socket 到底是什么以及 socket 的原理和内核实现。 socket 的概念 故事要从一个插头说起。 插头与插座插头与插座 当我将插头插入插座，那看起来...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/socket%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"socket 到底是什么？"}],["meta",{"property":"og:description","content":"socket 到底是什么？ 我相信大家刚开始学 socket 的时候，都跟我一样。 云里雾里的，对 socket 的概念很模糊。 这篇文章我打算从一个初学者的角度开始聊起，让大家了解下我眼里的 socket 到底是什么以及 socket 的原理和内核实现。 socket 的概念 故事要从一个插头说起。 插头与插座插头与插座 当我将插头插入插座，那看起来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/1671412778823.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T13:53:58.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"socket 到底是什么？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-05-12T13:53:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"socket 到底是什么？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/1671412778823.png\\",\\"https://cdn.xiaobaidebug.top/1671414808678.png\\",\\"https://cdn.xiaobaidebug.top/1671412753423.png\\",\\"https://cdn.xiaobaidebug.top/tcp%E6%98%AF%E4%BB%80%E4%B9%885.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image/%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E6%B5%81%E7%A8%8B3.gif\\",\\"https://cdn.xiaobaidebug.top/1671413103857.png\\",\\"https://cdn.xiaobaidebug.top/1671415108690.png\\",\\"https://cdn.xiaobaidebug.top/1671413147955.png\\",\\"https://cdn.xiaobaidebug.top/1671412953026.png\\",\\"https://cdn.xiaobaidebug.top/1671412844681.png\\",\\"https://cdn.xiaobaidebug.top/1671413031784.png\\",\\"https://cdn.xiaobaidebug.top/1671412915637.png\\",\\"https://cdn.xiaobaidebug.top/image/TCP三次握手修正版2.png\\",\\"https://cdn.xiaobaidebug.top/image/%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%973.png\\",\\"https://cdn.xiaobaidebug.top/1671415539657.png\\",\\"https://cdn.xiaobaidebug.top/1671415660725.png\\",\\"https://cdn.xiaobaidebug.top/1671545221736.png\\",\\"https://cdn.xiaobaidebug.top/1671416368022.png\\",\\"https://cdn.xiaobaidebug.top/1671412649957.png\\",\\"https://cdn.xiaobaidebug.top/1671412603028.png\\",\\"https://cdn.xiaobaidebug.top/1671412571927.png\\",\\"https://cdn.xiaobaidebug.top/1671413228308.png\\"],\\"dateModified\\":\\"2024-05-12T13:53:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/socket%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/socket%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"socket 到底是什么？"}],["meta",{"property":"og:description","content":"socket 到底是什么？ 我相信大家刚开始学 socket 的时候，都跟我一样。 云里雾里的，对 socket 的概念很模糊。 这篇文章我打算从一个初学者的角度开始聊起，让大家了解下我眼里的 socket 到底是什么以及 socket 的原理和内核实现。 socket 的概念 故事要从一个插头说起。 插头与插座插头与插座 当我将插头插入插座，那看起来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T13:53:58.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-12T13:53:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"socket 到底是什么？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-12T13:53:58.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"socket 的概念","slug":"socket-的概念","link":"#socket-的概念","children":[]},{"level":2,"title":"socket 的使用场景","slug":"socket-的使用场景","link":"#socket-的使用场景","children":[]},{"level":2,"title":"socket 的设计","slug":"socket-的设计","link":"#socket-的设计","children":[{"level":3,"title":"sock 是什么","slug":"sock-是什么","link":"#sock-是什么","children":[]},{"level":3,"title":"基于各种 sock 实现网络传输功能","slug":"基于各种-sock-实现网络传输功能","link":"#基于各种-sock-实现网络传输功能","children":[]},{"level":3,"title":"提供 socket 层","slug":"提供-socket-层","link":"#提供-socket-层","children":[]}]},{"level":2,"title":"socket 如何实现网络通信","slug":"socket-如何实现网络通信","link":"#socket-如何实现网络通信","children":[{"level":3,"title":"建立连接","slug":"建立连接","link":"#建立连接","children":[]},{"level":3,"title":"数据传输","slug":"数据传输","link":"#数据传输","children":[]}]},{"level":2,"title":"sock 怎么实现\\"继承\\"","slug":"sock-怎么实现-继承","link":"#sock-怎么实现-继承","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]}],"git":{"createdTime":1708337758000,"updatedTime":1715522038000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1},{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":15.51,"words":4652},"filePathRelative":"计算机基础/网络基础/核心知识点/socket到底是什么？.md","localizedDate":"2024年2月19日","autoDesc":true}');export{h as comp,m as data};
