import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-B8sM3wnN.js";const e={},p=t(`<h1 id="_1-python-的起源与发展" tabindex="-1"><a class="header-anchor" href="#_1-python-的起源与发展"><span>1. Python 的起源与发展</span></a></h1><h2 id="python-的诞生" tabindex="-1"><a class="header-anchor" href="#python-的诞生"><span>Python 的诞生</span></a></h2><p>Python 的创始人 Guido van Rossum 于 1989 年开始了 Python 的开发工作。当时，他在荷兰的 CWI（Centrum Wiskunde &amp; Informatica）工作，目的是创建一门简单易读、功能强大的编程语言。</p><p>Guido van Rossum 设计 Python 的初衷是为了解决其他编程语言的一些缺陷和不足。在当时，许多编程语言要么过于复杂，要么不够灵活，导致了开发效率低下，代码可读性差等问题。</p><h2 id="为什么要设计出-python" tabindex="-1"><a class="header-anchor" href="#为什么要设计出-python"><span>为什么要设计出 Python？</span></a></h2><p>在 Guido van Rossum 开始着手开发 Python 之前，他对于编程语言的态度和需求起到了关键作用。他希望能够拥有一门可以让程序员快速编写代码、同时又易于阅读和理解的语言。</p><p>Python 的设计哲学包括了一系列强调代码可读性的原则，这使得 Python 成为了一门优美而易于学习的编程语言。相对于其他语言，Python 的代码看起来更加清晰简洁，使得开发者可以专注于解决问题，而不是花费过多精力在语法细节上。</p><h2 id="没有-python-的时候-人们都用什么-遇到什么问题" tabindex="-1"><a class="header-anchor" href="#没有-python-的时候-人们都用什么-遇到什么问题"><span>没有 Python 的时候，人们都用什么，遇到什么问题？</span></a></h2><p>在 Python 出现之前，C 和 C++是主要的编程语言。虽然它们非常强大，但在开发速度和代码可读性方面并不出色。</p><p>C 和 C++的语法相对复杂，需要开发者关心许多底层细节。这导致了开发过程中常常会出现错误，而且需要大量的时间和精力来调试和维护代码。</p><p>此外，许多编程语言在处理某些任务时并不高效，或者缺乏直观性。这使得在特定领域的开发过程中非常困难，也限制了应用程序的规模和复杂度。</p><p>Python 的出现填补了这一空白，它为开发者提供了一种高效、简单、易于阅读的编程语言，使得开发过程更加高效和愉快。</p><p>我们以读写文件为例，看下 C 和 python 的代码量差异。</p><p>首先是 Python 代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Python</span>

<span class="token comment"># 打开一个文件，如果不存在则创建</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;example.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;Hello, this is a file written in Python!\\n&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 读取文件内容</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;example.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是 C 语言代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">//</span> C

<span class="token comment">#include &lt;stdio.h&gt;</span>

<span class="token builtin">int</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FILE <span class="token operator">*</span><span class="token builtin">file</span><span class="token punctuation">;</span>

    <span class="token operator">//</span> 打开一个文件，如果不存在则创建
    <span class="token builtin">file</span> <span class="token operator">=</span> fopen<span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">file</span> <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        printf<span class="token punctuation">(</span><span class="token string">&quot;无法打开文件\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    fprintf<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello, this is a file written in C!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fclose<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">//</span> 重新打开文件以读取内容
    <span class="token builtin">file</span> <span class="token operator">=</span> fopen<span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">file</span> <span class="token operator">==</span> NULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        printf<span class="token punctuation">(</span><span class="token string">&quot;无法打开文件\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    char content<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    fgets<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    printf<span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>

    fclose<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们对比一下这两段代码：</p><ol><li>Python 代码使用了 <code>with open(...)</code> 的上下文管理器，可以确保在离开代码块后文件会被正确关闭。而在 C 语言中，需要显式地使用 <code>fclose()</code> 来关闭文件。</li><li>Python 的文件写入使用了 <code>file.write(...)</code>，非常直观。而在 C 语言中，需要使用 <code>fprintf(...)</code>。</li><li>Python 的文件读取使用了 <code>file.read()</code>，也非常直观。在 C 语言中，需要使用 <code>fgets(...)</code>，并手动处理字符串。</li></ol><p>可以看出，Python 提供了更简洁、易懂的文件读写操作，同时还提供了一些方便的高级特性（如上下文管理器）来确保代码的可靠性。这使得 Python 成为日常写工具代码的首选语言之一。</p><h2 id="python-的设计哲学" tabindex="-1"><a class="header-anchor" href="#python-的设计哲学"><span>Python 的设计哲学</span></a></h2><p>Python 的设计哲学可以用一句口头化的话来概括：它强调的是代码的“看得懂”，而不是“看得出神奇”。Guido van Rossum 的初衷是让编程变得直白易懂，而不是将其变成晦涩难懂的黑魔法。</p><p>在 Python 的世界里，我们常常说“Pythonic”的代码，这指的是符合 Python 特有风格和思想的写法。它鼓励我们使用 Python 本身提供的优雅解决方案，避免繁琐的过程和复杂的逻辑。</p><p>此外，还有一句经典的“Python 之禅”（The Zen of Python）：“优美胜于丑陋”。这句话告诉我们，写代码不只是为了让机器执行，更是为了让人容易理解和维护。</p><p>所以，当你写 Python 代码时，可以想象着在和其他开发者进行交流，让他们能轻松看懂你的代码，这才是 Python 设计哲学的真谛。</p><h2 id="python-的版本演变" tabindex="-1"><a class="header-anchor" href="#python-的版本演变"><span>Python 的版本演变</span></a></h2><p>Python 的发展历程经历了多个版本的迭代和升级，每个版本都带来了新的特性和改进。</p><p>最开始的 Python 版本就叫做 1.x 系列，就像是软件的第一个版本一样。然后，随着时间推移，Python 变得越来越强大，也就有了 2.x 系列，就像手机升级成了新版本，功能更全面。</p><p>但不久后，Guido van Rossum 觉得需要给 Python 做一个全面的升级，因为 Python 2.x 系列有一些缺陷。这些缺陷包括了一些不够优雅的语言设计，以及一些让开发过程变得繁琐的问题。</p><p>他希望通过这次升级，使 Python 变得更加现代化和高效。新的 Python 3.x 系列带来了许多重要的改进，让编程变得更加顺畅和便捷。这也让 Python 能够更好地适应当时和未来的编程需求，让开发者们更加愉快地使用这门语言。</p><p>目前，Python 3.x 系列已成为主流版本，Python 社区生态越来越好，新的版本和功能依然在不断地推出。</p><p>通过这些版本的演变，Python 不断地得到改进和优化，成为了一门功能强大、易于学习、应用广泛的编程语言。</p><h2 id="python-在业界的应用与影响" tabindex="-1"><a class="header-anchor" href="#python-在业界的应用与影响"><span>Python 在业界的应用与影响</span></a></h2><p>Python 已经成为了业界各个领域中不可或缺的一部分。它的简洁、灵活和强大的特性使得它成为了许多企业和项目的首选编程语言。</p><h3 id="web-开发" tabindex="-1"><a class="header-anchor" href="#web-开发"><span>Web 开发</span></a></h3><p>在 Web 开发领域，Python 有着强大的框架，比如 Django 和 Flask。它们提供了快速、高效地构建网站和 Web 应用的能力。许多知名网站，包括知乎、豆瓣等，都是用 Python 开发的。</p><h3 id="科学计算与数据分析" tabindex="-1"><a class="header-anchor" href="#科学计算与数据分析"><span>科学计算与数据分析</span></a></h3><p>Python 成为了科学家和数据分析师们的得力助手。库如 NumPy、Pandas 和 Matplotlib 使得数据的处理、分析和可视化变得十分便捷。在学术界和工业界，Python 都被广泛应用于数据科学和人工智能领域。</p><h3 id="人工智能与机器学习" tabindex="-1"><a class="header-anchor" href="#人工智能与机器学习"><span>人工智能与机器学习</span></a></h3><p>Python 在人工智能领域的影响巨大。库如 TensorFlow、PyTorch 等提供了强大的工具来构建和训练深度学习模型。无论是自然语言处理、计算机视觉还是强化学习，Python 都是首选语言之一。随着最近 ChatGPT 等人工智能技术的迅猛发展，Python 将在这个领域继续发挥重要作用。深度学习、自然语言处理等技术的不断创新将会推动 Python 在人工智能领域的更广泛应用。</p><h2 id="python-的社区与生态系统" tabindex="-1"><a class="header-anchor" href="#python-的社区与生态系统"><span>Python 的社区与生态系统</span></a></h2><p>Python 拥有一个庞大而活跃的社区，这使得它的生态系统非常丰富多彩。这个社区充满了热情和创造力，成员们不断为 Python 的发展做出贡献。</p><h3 id="pypi-与第三方库" tabindex="-1"><a class="header-anchor" href="#pypi-与第三方库"><span>PyPI 与第三方库</span></a></h3><p>PyPI（Python Package Index）是 Python 的包管理器，拥有数以千计的第三方库和工具。无论是用于 Web 开发、数据分析还是其他领域，PyPI 中都有满足各种需求的库。</p><h3 id="开源项目" tabindex="-1"><a class="header-anchor" href="#开源项目"><span>开源项目</span></a></h3><p>Python 社区中涌现了许多优秀的开源项目，它们不仅推动了 Python 技术的发展，也为其他开发者提供了丰富的参考和学习资源。</p><h3 id="开发者社交网络" tabindex="-1"><a class="header-anchor" href="#开发者社交网络"><span>开发者社交网络</span></a></h3><p>Python 社区活跃于各种在线社交平台、论坛和社区。开发者们可以在这些平台上分享经验、提问问题、参与讨论，形成了一个互相学习、互相帮助的良好氛围。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过本文，我们了解了 Python 的起源和发展历程，希望你现在对 Python 有了更清晰的认识，相信在接下来的学习中会有很多乐趣！</p>`,50),o=[p];function i(l,c){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","1. Python 的起源与发展.html.vue"]]),d=JSON.parse('{"path":"/golang-base/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.%20Python%20%E7%9A%84%E8%B5%B7%E6%BA%90%E4%B8%8E%E5%8F%91%E5%B1%95.html","title":"1. Python 的起源与发展","lang":"zh-CN","frontmatter":{"description":"1. Python 的起源与发展 Python 的诞生 Python 的创始人 Guido van Rossum 于 1989 年开始了 Python 的开发工作。当时，他在荷兰的 CWI（Centrum Wiskunde & Informatica）工作，目的是创建一门简单易读、功能强大的编程语言。 Guido van Rossum 设计 Pytho...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/golang-base/%E7%AC%AC1%E7%AB%A0%EF%BC%9APython%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.%20Python%20%E7%9A%84%E8%B5%B7%E6%BA%90%E4%B8%8E%E5%8F%91%E5%B1%95.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"1. Python 的起源与发展"}],["meta",{"property":"og:description","content":"1. Python 的起源与发展 Python 的诞生 Python 的创始人 Guido van Rossum 于 1989 年开始了 Python 的开发工作。当时，他在荷兰的 CWI（Centrum Wiskunde & Informatica）工作，目的是创建一门简单易读、功能强大的编程语言。 Guido van Rossum 设计 Pytho..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-12T10:05:49.000Z"}],["meta",{"property":"article:author","content":"Golang全栈程序员"}],["meta",{"property":"article:modified_time","content":"2024-02-12T10:05:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. Python 的起源与发展\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-12T10:05:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Golang全栈程序员\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"]]},"headers":[{"level":2,"title":"Python 的诞生","slug":"python-的诞生","link":"#python-的诞生","children":[]},{"level":2,"title":"为什么要设计出 Python？","slug":"为什么要设计出-python","link":"#为什么要设计出-python","children":[]},{"level":2,"title":"没有 Python 的时候，人们都用什么，遇到什么问题？","slug":"没有-python-的时候-人们都用什么-遇到什么问题","link":"#没有-python-的时候-人们都用什么-遇到什么问题","children":[]},{"level":2,"title":"Python 的设计哲学","slug":"python-的设计哲学","link":"#python-的设计哲学","children":[]},{"level":2,"title":"Python 的版本演变","slug":"python-的版本演变","link":"#python-的版本演变","children":[]},{"level":2,"title":"Python 在业界的应用与影响","slug":"python-在业界的应用与影响","link":"#python-在业界的应用与影响","children":[{"level":3,"title":"Web 开发","slug":"web-开发","link":"#web-开发","children":[]},{"level":3,"title":"科学计算与数据分析","slug":"科学计算与数据分析","link":"#科学计算与数据分析","children":[]},{"level":3,"title":"人工智能与机器学习","slug":"人工智能与机器学习","link":"#人工智能与机器学习","children":[]}]},{"level":2,"title":"Python 的社区与生态系统","slug":"python-的社区与生态系统","link":"#python-的社区与生态系统","children":[{"level":3,"title":"PyPI 与第三方库","slug":"pypi-与第三方库","link":"#pypi-与第三方库","children":[]},{"level":3,"title":"开源项目","slug":"开源项目","link":"#开源项目","children":[]},{"level":3,"title":"开发者社交网络","slug":"开发者社交网络","link":"#开发者社交网络","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1707732349000,"updatedTime":1707732349000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1}]},"readingTime":{"minutes":7.11,"words":2134},"filePathRelative":"golang-base/第1章：Python 基础知识/1. Python 的起源与发展.md","localizedDate":"2024年2月12日","autoDesc":true}');export{r as comp,d as data};
