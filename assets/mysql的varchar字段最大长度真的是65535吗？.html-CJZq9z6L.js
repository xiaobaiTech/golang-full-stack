import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as i,a,b as n,d as s,e as r}from"./app-CSVPTWdb.js";const l={},c=r('<h1 id="mysql的varchar字段最大长度真的是65535吗" tabindex="-1"><a class="header-anchor" href="#mysql的varchar字段最大长度真的是65535吗"><span>mysql的varchar字段最大长度真的是65535吗？</span></a></h1><p>在mysql建表sql里，我们经常会有定义<strong>字符串</strong>类型的需求。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名字&#39;</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比方说user表里的名字，就是个字符串。mysql里有两个<strong>类型</strong>比较适合这个场景。</p><p><strong>char和varchar。</strong></p><p>声明它们都需要在字段边上加个数组，比如<strong>char(100)<strong>和</strong>varchar(100)</strong>，这个100是指当前字段能放的<strong>最大字符数</strong>。</p><p><strong>char和varchar的区别</strong>在于，varchar虽然声明了最大能放100个字符，但一开始不需要分配100个字符的空间，可以根据需要慢慢增加空间。而char一开始声明是多少，就固定预留多少空间。</p><p>所以，varchar比起char更省空间，一般没啥大事，大家都爱用<strong>varchar</strong>。</p><br><p>那问题来了，声明<strong>varchar</strong>字段时，它的最大长度是多少呢？</p><br><p><strong>相信大家应该听说过varchar字段的最大长度是65535吧。</strong></p><br><p>没听过也没关系，你现在听到了。</p><p>但实际上是这样吗？</p><p>我们来做个实验。</p><br><h1 id="varchar最大值是多少" tabindex="-1"><a class="header-anchor" href="#varchar最大值是多少"><span>varchar最大值是多少</span></a></h1><p>我们直接拿65535来试一下。</p><figure><img src="https://cdn.xiaobaidebug.top/长度为65535的varchar报错.png" alt="长度为65535的varchar报错" tabindex="0" loading="lazy"><figcaption>长度为65535的varchar报错</figcaption></figure><p>很明显报错了。</p><p>报错内容也说了, <strong>由于列长度过大导致报错，最长是16383</strong>。</p><p>把上面的65535<strong>改成 16383，确实是成功了。</strong></p><p>哦？所以说varchar最大值是16383？</p><p>当然不是。</p><p>这其实还有好几个因素影响这这个最大值。</p><br><h2 id="不同字符集的影响" tabindex="-1"><a class="header-anchor" href="#不同字符集的影响"><span>不同字符集的影响</span></a></h2><p>varchar里放的是字符串，而字符串看起来可以是英文字母，也可以是数字或中文。但不管怎么样，都可以把这样的中英文数字转成二进制的01串。</p><p>按照一定规则把符号和二进制码对应起来，这就是<strong>编码</strong>。而把n多这种已经编码的字符聚在一起，就是我们常说的<strong>字符集</strong>。</p><p>建表语句里有个<strong>CHARSET</strong>，这里填的是<strong>字符集。</strong></p><p>不同的字符集要求使用的字节个数也不同，我们可以通过 <code>show charset;</code> 看到mysql支持哪些字符集，以及这些字符集里<strong>存储一个字符所需的最大字节数（Maxlen）。</strong></p><figure><img src="https://cdn.xiaobaidebug.top/charset种类.png" alt="查看mysql支持哪些charset" tabindex="0" loading="lazy"><figcaption>查看mysql支持哪些charset</figcaption></figure><p>我们尝试下把建表sql语句里的CHARSET改一改，比如改成<strong>utf8mb3</strong>。</p><p>我们再执行下，会发现，最大值又不一样了。</p><figure><img src="https://cdn.xiaobaidebug.top/utf8mb3下的报错.png" alt="utf8mb3下的报错" tabindex="0" loading="lazy"><figcaption>utf8mb3下的报错</figcaption></figure><p>并且，上面虽然提示max=21845，但要是真执行起来会发现还是报错。<strong>在改为21844之后才成功。</strong></p><p>不讲武德。</p><p>再把<strong>字符集改为 latin1</strong>。会发现，<strong>最大值会是 65533</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/varchar为65533时创建成功.png" alt="varchar为65533时创建成功" tabindex="0" loading="lazy"><figcaption>varchar为65533时创建成功</figcaption></figure><p>这里渐渐可以发现规律。</p><ul><li>utf8mb4的maxlen=4，对应varchar最大长度=16383。 4*16383 = 65532。</li><li>utf8mb3的maxlen=3，对应varchar最大长度=21844。3*21844 = 65532。</li><li>latin1的maxlen=1，对应varchar最大长度=65533。 1 * 65533 = 65533。</li></ul><p>也就是说varchar边上的长度代表的是这一列能放的最大<strong>字符数</strong>，而maxlen代表单个字符占用的最大<strong>字节数</strong>。相乘的结果很接近65535。说明<strong>65535是指的字节数</strong>，而<strong>不是字符数</strong>。</p><p>也就是说varchar的最大长度，根据选择的字符集的不同，会有区别。</p><p>总的来说接近于 65535 除以 字符集的maxlen。</p><br><p><strong>但其实这样还不够严谨</strong>。还有其他影响因素。</p><br><h2 id="是否可以为null的影响" tabindex="-1"><a class="header-anchor" href="#是否可以为null的影响"><span>是否可以为NULL的影响</span></a></h2><p>上面的建表语句里声明了test字段都是<code>NOT NULL</code>，也就是非空，如果我们将这个改成可以为NULL，再用 <strong>CHARSET=latin1</strong>去试试。这时候就会发现，前面NOT NULL的时候最大能使用65533去建表，现在报错了。</p><p>改成65532，就能成功了，也就是最长长度<strong>少了1个字节</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/是否为NULL的影响.png" alt="是否为NULL的影响" tabindex="0" loading="lazy"><figcaption>是否为NULL的影响</figcaption></figure><p>这是因为一个字段是否为NULL这件事情，是需要<strong>一个字节</strong>去记录下来的。</p><p>而当字段为<strong>NOT NULL</strong>的时候，则可以省下这个字节。</p><br><h2 id="列数的影响" tabindex="-1"><a class="header-anchor" href="#列数的影响"><span>列数的影响</span></a></h2><p>上面提到的情况都是在表里只有一列时的结果，当我们表里<strong>有更多的列</strong>时，我们会发现varchar的最大值还会有变化。比如同样还是latin1字符集，我们再增加一列varchar类型，并且用的还是前面允许的最大值65533。</p><p>结果发现这次会失败。</p><figure><img src="https://cdn.xiaobaidebug.top/两个varchar列的情况.png" alt="两个varchar列的情况" tabindex="0" loading="lazy"><figcaption>两个varchar列的情况</figcaption></figure><p>查了一下资料发现，原来65535是mysql单行的最大长度（不包含blob和text等类型的情况下）</p><p>mysql表里单行中的<strong>所有列加起来</strong>（不考虑其他隐藏列和记录头信息） ，占用的最大长度是65535个字节。</p><p><strong>注意上面加粗的部分，加起来不超过65535。</strong></p><p>比如如果还有int的列，那它占用4个字节，bigint占用8个字节，字段越多，留给单个varchar列的空间就越少。</p><p>因此，<strong>前面提到的 varchar 的最大长度，接近于 65535 除以 字符集的maxlen，但前提是只有一列not null 的varchar类型的字段。</strong></p><br><h2 id="为什么不是65535而是65533" tabindex="-1"><a class="header-anchor" href="#为什么不是65535而是65533"><span>为什么不是65535而是65533？</span></a></h2><p>不过问题又来了，上面建表sql里，不管是那种字符集，最后得到的字符数都约等于65533。</p><p>但数据库单行最大值应该是65535。<strong>65535 - 65533 = 2 。这里面还差了个2</strong>，为什么呢？</p><p>这就要聊一下mysql单行里数据到底是怎么存储的。</p><br><h3 id="数据表行存储的格式" tabindex="-1"><a class="header-anchor" href="#数据表行存储的格式"><span>数据表行存储的格式</span></a></h3><p>我们可以通过 <code>show table status</code> 命令，查看到当前表格使用的行格式。</p><figure><img src="https://cdn.xiaobaidebug.top/查看到当前表格使用的行格式.png" alt="查看到当前表格使用的行格式" tabindex="0" loading="lazy"><figcaption>查看到当前表格使用的行格式</figcaption></figure><p>通过上面的 <code>Row_format</code> 字段可以看到这个表用的是 <code>Dynamic</code> 行格式。</p><p>事实上，现在的mysql数据表一般都是采用Dynamic行记录格式。</p><p>我们来看下<code>Dynamic</code>行格式长什么样子。</p><figure><img src="https://cdn.xiaobaidebug.top/Dynamic行记录格式3.drawio.png" alt="Dynamic行记录格式" tabindex="0" loading="lazy"><figcaption>Dynamic行记录格式</figcaption></figure><p>Dynamic格式将行记录分为两部分，分为是<strong>行记录的额外信息</strong>和<strong>行记录的真实数据</strong>。</p><p><strong>行记录的额外信息：</strong></p><ul><li><strong>变长字段长度列表</strong>：指的是varchar，text，blob这种类型，它们属于变长字段，这里表示的就是这些字段的长度。</li><li><strong>NULL值列表</strong>：用来记录当前行里哪些列是为null的。如果全部列都是not null的话，那就不需要有这个字段。</li><li><strong>记录头信息</strong>：这是固定5个字节，用来记录一些特殊的信息，比如这一行是否被删了，这一行在这个16k的数据页内是不是最小的，以及指向下一条记录的指针之类的一些信息，不需要太关注。</li></ul><br><p><strong>行记录的真实数据：</strong></p><p>里面放的就是一行里，每一列的真正内容。除了我们建表时里涉及到的列以外，还有一些隐藏列。</p>',83),g=a("code",null,"trx_id",-1),d=a("strong",null,"哪个事务",-1),h=a("code",null,"roll_pointer",-1),E=a("strong",null,"多版本并发控制（MVCC）",-1),b={href:"https://mp.weixin.qq.com/s/SR0ZL1zAc_0QIQvpDCOANw",target:"_blank",rel:"noopener noreferrer"},m=r('<figure><img src="https://cdn.xiaobaidebug.top/隐藏列有哪些.drawio.png" alt="隐藏列有哪些" tabindex="0" loading="lazy"><figcaption>隐藏列有哪些</figcaption></figure><p>所以我们回过头来看我们建的表，当只有一列not null的 varchar字段时，行记录长下面这样。</p><figure><img src="https://cdn.xiaobaidebug.top/单条varchar数据的Dynamic行记录格式.drawio.png" alt="单条varchar数据的Dynamic行记录格式.drawio" tabindex="0" loading="lazy"><figcaption>单条varchar数据的Dynamic行记录格式.drawio</figcaption></figure><p>前面提到，行最大值65535字节是不包含隐藏列和记录头信息的，所以其实是指上图中红色的部分。</p><br><p>而最左边的<strong>变长字段长度列表</strong>中，为了表示varchar列的长度，占用了<strong>两个字节</strong>，也就是16位，2的16次方，最大可以表示65535的长度，正好足够用来表示varchar列当前的长度是65533。</p><p>所以<strong>65535 - 65533 = 2 。这里面差的2</strong>，是用来存<strong>varchar字段长度</strong>去了。</p><br><h2 id="一个页才16k-怎么保存65533-64k-数据" tabindex="-1"><a class="header-anchor" href="#一个页才16k-怎么保存65533-64k-数据"><span>一个页才16k，怎么保存65533（64k）数据？</span></a></h2><p>之前的文章里其实多次提到了mysql底层是以页的形式去存储数据的，而一个页固定16k，而一个varchar字段最大能放65533字节数据，换算一下大概是64k，整整4个16k的页。</p><figure><img src="https://cdn.xiaobaidebug.top/页结构.png" alt="页结构" tabindex="0" loading="lazy"><figcaption>页结构</figcaption></figure><p>这里面是怎么实现的？</p><p>对于这种情况，其实行数据里针对这个超大的varchar字段只保存个20字节的指针（实际上是个偏移量），这个指针会指向新的页（off page），这些页里保存的是实际的varchar字段里的65533字节数据。这种由于字段过长导致需要额外的页来保存数据的现象叫<strong>行溢出</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/行溢出.drawio.png" alt="行溢出" tabindex="0" loading="lazy"><figcaption>行溢出</figcaption></figure><br><h2 id="大于64k的字符串该怎么处理" tabindex="-1"><a class="header-anchor" href="#大于64k的字符串该怎么处理"><span>大于64k的字符串该怎么处理？</span></a></h2><p>如果离谱点，数据量更大，比64k还大，这时候就不能继续用varchar了，需要改用text和blob类型字段。</p><p>而text和blob类型本身也是分TINY、MEDIUM，LONG三个档位的，对应着不同的数据长度，最大到4G左右。</p><p>像下面这样就可以将数据类型定义为LONGTEXT。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>test_max_length<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span> <span class="token keyword">LONGTEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;测试长度字段&#39;</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>latin1 <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而他们的存储方式也跟varchar的情况类似，只保存20个字节的指针，实际数据保存在其他溢出页里。</p><p>以前我们查某一行数据，他们都在一个16k的数据页里，查询时只要一次磁盘IO就能将这个数据页读取出来。</p><p>当一个数据库里某行数据里有个特别大的字符串时，我们如果还想把整行数据给读出来，那我们还得把<strong>off page</strong>的数据给全部读出来，这意味着<strong>更多的磁盘IO，性能就更差了</strong>。</p><p>为了规避这个问题，我们写<strong>select sql</strong>的时候，如果发现某列字段，是个特别长的字符串时，能不读它就尽量不加到select里，这也是为什么大家不建议使用<code>select * from table</code>的原因。</p><br><h3 id="blob和text的区别" tabindex="-1"><a class="header-anchor" href="#blob和text的区别"><span>blob和text的区别</span></a></h3><p>一般来说，blob和text都可以用来放超长字符串。但它们会有一点点区别。</p><p>我们知道字符集（charset）下还有个<strong>校对规则</strong>（collation）的概念，比如同样是a，大写A和小写a能不能算作是一个字符，这会影响比较和排序，collation就是定义这个规则用的。</p><p><strong>blob没有字符集的概念，而text有</strong>。这意味如果用blob来存文本的话，就没法用字符集的校对规则来排序和做比较。</p><p>还有一个区别，blob还能保存二进制数据，比如压缩过的文本数据，图片或者视频，别笑，虽然不合适，但我确实见过有人拿它来保存视频。。。</p><br><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>现在的mysql数据表一般采用Dynamic行记录格式。它由行记录的额外信息和行记录的真实数据组成。</li><li>mysql表里单行中的<strong>所有列加起来</strong>（不考虑其他隐藏列和记录头信息） ，占用的最大长度是65535个字节。</li><li>如果数据表里只有<strong>一列 not null</strong> 的varchar字段，它的最大长度，接近于 <strong>65535 除以 字符集的maxlen</strong>。</li><li>如果要存放大于64k的字段数据，可以考虑使用longtext和longblob等类型。</li><li>mysql的数据页大小是16k，为了保存varchar或者text，blob这种长度可能大于16k的字段，在Dynamic行格式中，会只保留<strong>20个字节</strong>的指针，实际数据则放在其他溢出页中。为了将它们读取出来，会需要更多的磁盘IO。</li><li>blob和text很像，但blob没有字符集的概念，并且还能存放二进制的数据，比如图片或视频，但实际上图片和视频更推荐放在对象存储（<strong>O</strong>bject <strong>S</strong>torage <strong>S</strong>ervice，简称<strong>oss</strong>）中。</li></ul><br><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>《mysql技术内幕》</p><p>《从根儿理解mysql》</p><br><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>最近原创更文的阅读量稳步下跌，思前想后，夜里辗转反侧。</p><p>我有个不成熟的请求。</p><img src="https://cdn.xiaobaidebug.top/image-20220522162506224.png" alt="" style="zoom:20%;"><br><p><strong>离开广东好长时间了，好久没人叫我靓仔了。</strong></p><p>大家可以在<strong>评论区</strong>里，叫我一靓仔吗？</p><p>我这么善良质朴的愿望，能被满足吗？</p><p>如果实在叫不出口的话，能帮我点下右下角的<strong>点赞和在看</strong>吗？</p><br><h5 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h5><p><strong>点击</strong>下方名片，关注公众号:【小白debug】<br><img src="https://cdn.xiaobaidebug.top/扫码_搜索联合传播样式-标准色版.png" alt="" loading="lazy"></p><br><p>不满足于在留言区说骚话？</p><p>加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。就<strong>超！开！心！</strong></p><img src="https://cdn.xiaobaidebug.top/image-20220522162616202.png" alt="" style="zoom:50%;"><figure><img src="https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>',56),u={href:"https://mp.weixin.qq.com/s/PP80aD-GQp7VtgyfHj392g",target:"_blank",rel:"noopener noreferrer"},A={href:"https://mp.weixin.qq.com/s/0-YBxU1cSbDdzcZEZjmQYA",target:"_blank",rel:"noopener noreferrer"},y={href:"https://mp.weixin.qq.com/s/YpQGsRyyrGNDu1cOuMy83w",target:"_blank",rel:"noopener noreferrer"};function v(k,B){const t=o("ExternalLinkIcon");return p(),i("div",null,[c,a("p",null,[n("比如Row_ID，这个是在建表是没有声明主键时，数据表自动会生成的隐藏主键。另外还有"),g,n("字段，用于记录当前这一行数据行是被"),d,n("修改的，和一个"),h,n("字段，这个字段是用来指向当前这个数据行的上一个版本，通过这个字段，可以为这行数据形成一条版本链，从而实现"),E,n("。有没有很眼熟，这个在之前写的"),a("a",b,[n("文章"),s(t)]),n("里出现过。")]),m,a("ul",null,[a("li",null,[a("a",u,[n("程序员防猝死指南"),s(t)])]),a("li",null,[a("a",A,[n("TCP粘包 数据包：我只是犯了每个数据包都会犯的错 |硬核图解"),s(t)])]),a("li",null,[a("a",y,[n("动图图解！既然IP层会分片，为什么TCP层也还要分段？"),s(t)])])])])}const q=e(l,[["render",v],["__file","mysql的varchar字段最大长度真的是65535吗？.html.vue"]]),_=JSON.parse('{"path":"/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/mysql%E7%9A%84varchar%E5%AD%97%E6%AE%B5%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6%E7%9C%9F%E7%9A%84%E6%98%AF65535%E5%90%97%EF%BC%9F.html","title":"mysql的varchar字段最大长度真的是65535吗？","lang":"zh-CN","frontmatter":{"description":"mysql的varchar字段最大长度真的是65535吗？ 在mysql建表sql里，我们经常会有定义字符串类型的需求。 比方说user表里的名字，就是个字符串。mysql里有两个类型比较适合这个场景。 char和varchar。 声明它们都需要在字段边上加个数组，比如char(100)和varchar(100)，这个100是指当前字段能放的最大字符数...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/mysql%E7%9A%84varchar%E5%AD%97%E6%AE%B5%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6%E7%9C%9F%E7%9A%84%E6%98%AF65535%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"mysql的varchar字段最大长度真的是65535吗？"}],["meta",{"property":"og:description","content":"mysql的varchar字段最大长度真的是65535吗？ 在mysql建表sql里，我们经常会有定义字符串类型的需求。 比方说user表里的名字，就是个字符串。mysql里有两个类型比较适合这个场景。 char和varchar。 声明它们都需要在字段边上加个数组，比如char(100)和varchar(100)，这个100是指当前字段能放的最大字符数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/%E9%95%BF%E5%BA%A6%E4%B8%BA65535%E7%9A%84varchar%E6%8A%A5%E9%94%99.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-19T03:57:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"mysql的varchar字段最大长度真的是65535吗？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-02-19T03:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql的varchar字段最大长度真的是65535吗？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/%E9%95%BF%E5%BA%A6%E4%B8%BA65535%E7%9A%84varchar%E6%8A%A5%E9%94%99.png\\",\\"https://cdn.xiaobaidebug.top/charset%E7%A7%8D%E7%B1%BB.png\\",\\"https://cdn.xiaobaidebug.top/utf8mb3%E4%B8%8B%E7%9A%84%E6%8A%A5%E9%94%99.png\\",\\"https://cdn.xiaobaidebug.top/varchar%E4%B8%BA65533%E6%97%B6%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F.png\\",\\"https://cdn.xiaobaidebug.top/%E6%98%AF%E5%90%A6%E4%B8%BANULL%E7%9A%84%E5%BD%B1%E5%93%8D.png\\",\\"https://cdn.xiaobaidebug.top/%E4%B8%A4%E4%B8%AAvarchar%E5%88%97%E7%9A%84%E6%83%85%E5%86%B5.png\\",\\"https://cdn.xiaobaidebug.top/%E6%9F%A5%E7%9C%8B%E5%88%B0%E5%BD%93%E5%89%8D%E8%A1%A8%E6%A0%BC%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A1%8C%E6%A0%BC%E5%BC%8F.png\\",\\"https://cdn.xiaobaidebug.top/Dynamic%E8%A1%8C%E8%AE%B0%E5%BD%95%E6%A0%BC%E5%BC%8F3.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E9%9A%90%E8%97%8F%E5%88%97%E6%9C%89%E5%93%AA%E4%BA%9B.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E5%8D%95%E6%9D%A1varchar%E6%95%B0%E6%8D%AE%E7%9A%84Dynamic%E8%A1%8C%E8%AE%B0%E5%BD%95%E6%A0%BC%E5%BC%8F.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E9%A1%B5%E7%BB%93%E6%9E%84.png\\",\\"https://cdn.xiaobaidebug.top/%E8%A1%8C%E6%BA%A2%E5%87%BA.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E6%89%AB%E7%A0%81_%E6%90%9C%E7%B4%A2%E8%81%94%E5%90%88%E4%BC%A0%E6%92%AD%E6%A0%B7%E5%BC%8F-%E6%A0%87%E5%87%86%E8%89%B2%E7%89%88.png\\",\\"https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi.gif\\"],\\"dateModified\\":\\"2024-02-19T03:57:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/mysql%E7%9A%84varchar%E5%AD%97%E6%AE%B5%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6%E7%9C%9F%E7%9A%84%E6%98%AF65535%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E4%B8%AD%E9%97%B4%E4%BB%B6/mysql/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/mysql%E7%9A%84varchar%E5%AD%97%E6%AE%B5%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6%E7%9C%9F%E7%9A%84%E6%98%AF65535%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"mysql的varchar字段最大长度真的是65535吗？"}],["meta",{"property":"og:description","content":"mysql的varchar字段最大长度真的是65535吗？ 在mysql建表sql里，我们经常会有定义字符串类型的需求。 比方说user表里的名字，就是个字符串。mysql里有两个类型比较适合这个场景。 char和varchar。 声明它们都需要在字段边上加个数组，比如char(100)和varchar(100)，这个100是指当前字段能放的最大字符数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-19T03:57:35.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-19T03:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql的varchar字段最大长度真的是65535吗？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-19T03:57:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"不同字符集的影响","slug":"不同字符集的影响","link":"#不同字符集的影响","children":[]},{"level":2,"title":"是否可以为NULL的影响","slug":"是否可以为null的影响","link":"#是否可以为null的影响","children":[]},{"level":2,"title":"列数的影响","slug":"列数的影响","link":"#列数的影响","children":[]},{"level":2,"title":"为什么不是65535而是65533？","slug":"为什么不是65535而是65533","link":"#为什么不是65535而是65533","children":[{"level":3,"title":"数据表行存储的格式","slug":"数据表行存储的格式","link":"#数据表行存储的格式","children":[]}]},{"level":2,"title":"一个页才16k，怎么保存65533（64k）数据？","slug":"一个页才16k-怎么保存65533-64k-数据","link":"#一个页才16k-怎么保存65533-64k-数据","children":[]},{"level":2,"title":"大于64k的字符串该怎么处理？","slug":"大于64k的字符串该怎么处理","link":"#大于64k的字符串该怎么处理","children":[{"level":3,"title":"blob和text的区别","slug":"blob和text的区别","link":"#blob和text的区别","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1708315055000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1}]},"readingTime":{"minutes":12.21,"words":3663},"filePathRelative":"中间件/mysql/核心知识点/mysql的varchar字段最大长度真的是65535吗？.md","localizedDate":"2024年2月19日","autoDesc":true}');export{q as comp,_ as data};
