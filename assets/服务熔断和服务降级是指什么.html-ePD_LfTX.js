import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as p,b as n,d as a,e as s,o as l,r}from"./app-G1Aj0uLO.js";const c={},d={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function b(E,t){const e=r("ExternalLinkIcon");return l(),i("div",null,[t[4]||(t[4]=p(`<h1 id="服务熔断和服务降级分别指什么" tabindex="-1"><a class="header-anchor" href="#服务熔断和服务降级分别指什么"><span>服务熔断和服务降级分别指什么？</span></a></h1><p>微服务领域里有个词叫服务熔断，你知道这是啥不？<br> 故事要从我读大学那会说起。<br> 因为<strong>功率</strong>问题，很多寝室都是不让用吹风筒和热水壶的。<br> 但我那时候头铁，不仅用，而且还同时开了两个热水壶和一个吹风筒。直接给寝室电路来了个压测。<br> 不出意外的出了意外，寝室直接停电。<br> 一时间，隔壁寝室灯火通明，我们寝室一片漆黑。<br> 作为本科专业电气工程的靓仔，我们意识到，这妥妥是电路过载导致<strong>断路器跳闸</strong>了。<br> 于是我们趁社管阿姨不注意，偷偷摸进配电房，<strong>手动将断路器开关复位</strong>，寝室就来电了。</p><p>是真的有惊无险。<br> 如果没有这个断路器，寝室总电路怕是得因为过载全部烧掉，我们几个妥妥会提前进入社会大学。<br> 我能毕业，全靠这个断路器！<br> 看到这里，我们知道了<strong>断路器的作用，就是在电路出问题的时候及时断开电路，避免过载，从而保护电路</strong>。<br> 在<strong>微服务</strong>领域，我们也可以借鉴断路器的思路，引入了<strong>服务熔断</strong>的概念。</p><h2 id="服务熔断是什么" tabindex="-1"><a class="header-anchor" href="#服务熔断是什么"><span>服务熔断是什么</span></a></h2><p>服务熔断，也就是 <strong>Circuit Breaker</strong>，本质上是一种软件设计模式，用于在分布式系统中处理服务调用失败的情况。</p><p>假设有个 <code>A 服务</code>调用 <code>B 服务</code>的场景，如果 <code>B 服务</code>已经出现频繁失败的情况，<code>A</code> 继续调用只会加剧 <code>B 服务</code>的负担，严重的时候，有可能导致 <code>B 服务</code>崩溃，甚至出现 <code>B 服务</code>重启后立马被打崩的情况。因此，最好的做法是，在一段时间内先不要再<strong>频繁</strong>调用 <code>B 服务</code>。</p><p>为了实现这个保护效果，我们可以<strong>在 A 和 B 之间加一个熔断器</strong>。当 <code>B 服务</code>频繁失败时，熔断器可以防止 <code>A</code> 继续频繁调用 <code>B 服务</code>，相当于阻断服务间的请求，并且还能在 <code>B 服务</code>恢复正常之后，恢复 <code>A</code> 对 <code>B</code> 的调用。</p><figure><img src="https://cdn.xiaobaidebug.top/1710802492568.png" alt="熔断器的作用" tabindex="0" loading="lazy"><figcaption>熔断器的作用</figcaption></figure><p>工作原理也和上文提到的宿舍电路里的断路器类似。当服务调用<strong>失败的次数超过某个阈值</strong>时，熔断器会自动“打开”（<strong>Open</strong>），阻止进一步的服务调用，防止不断报错重试导致压垮被调用服务。</p><p>然后在在<strong>一段时间</strong>之后，熔断器开始尝试<strong>允许少量</strong>的请求通过，以检查服务是否已经恢复，也就是所谓的“半打开”（<strong>HalfOpen</strong>）。</p><p>如果这些请求<strong>成功</strong>，熔断器会“关闭”(<strong>Close</strong>)，系统恢复正常的服务调用；但如果调用还是<strong>失败</strong>，那熔断器会继续再次回到“打开”（<strong>Open</strong>）状态。</p><p>上面提到的三个状态<code>Open</code>，<code>HalfOpen</code>和<code>Close</code>是服务熔断中非常重要的三个状态。</p><ul><li><strong>Closed（关闭）</strong>：这是熔断器的初始状态。在这种状态下，可以进行服务间调用，熔断器会跟踪服务调用的成功和失败情况。如果失败调用次数，到了某个配置的阈值，熔断器就会切换到 Open（打开）状态。<br><img src="https://cdn.xiaobaidebug.top/1710803412232.png" alt="熔断器关闭" loading="lazy"></li><li><strong>HalfOpen（半开）</strong>：保持 Open 状态一段时间后，熔断器会<strong>尝试</strong>进入 HalfOpen 状态。这个状态下，熔断器会尝试放几个请求通过，看下被调用服务是否已经恢复。如果这些请求成功，熔断器就会回到 Closed 状态；如果失败，那它会退回到 Open 状态。<br><img src="https://cdn.xiaobaidebug.top/1710803299527.png" alt="熔断器半打开" loading="lazy"></li><li><strong>Open（打开）</strong>：当熔断器检测到服务调用连续失败时，它会切换到 Open 状态。在这种状态下，熔断器会阻止所有对服务的调用，直到超时时间过后，或者在 HalfOpen 状态下的探测请求成功。<br><img src="https://cdn.xiaobaidebug.top/1710803330470.png" alt="熔断器打开" loading="lazy"></li></ul><p>它们的状态流转关系就像下图这样。</p><figure><img src="https://cdn.xiaobaidebug.top/1707223730016.png" alt="熔断状态机" tabindex="0" loading="lazy"><figcaption>熔断状态机</figcaption></figure><h2 id="服务降级是什么" tabindex="-1"><a class="header-anchor" href="#服务降级是什么"><span>服务降级是什么</span></a></h2><p>看到这里问题就来了，如果服务熔断打开了，同时 <code>A服务</code> api 依赖 <code>B服务</code>的响应，那 <code>A服务</code> API 岂不是会一直处于报错的状态？<br> 听起来确实是的。那有没有办法让 <code>A服务</code>的 API 不报错？<br> 有。举个例子。<br> 假设 <code>B服务</code>是获取推荐商品列表的 api 接口，<code>A服务</code>逻辑依赖 <code>B服务</code>的结果，目的是展示商品给买家。<br> 如果 <code>B服务</code>报错了，<code>A服务</code>按理说只是拿不到 <code>B服务</code>的商品，但 <code>A服务</code>可以在服务缓存里预先放好一些固定的商品，作为 <code>B服务</code>报错时的<strong>备用</strong>，这样买家一样能看到商品列表，只不过是从千人千面的推荐商品，变成一批固定商品而已。</p><p><img src="https://cdn.xiaobaidebug.top/1710897365188.png" alt="服务降级" loading="lazy"><br> 但服务依然可用，像这种，在服务熔断或报错时，为系统提供兜底方案的能力，其实就是所谓的<strong>服务降级</strong>。<br> 这其实是个很常用的操作，可以大大提升接口<strong>可用性</strong>，我知道你不是很关心接口可用性，但你的老板真的很关心！具体还有哪些使用场景，大家可以结合自己的代码发散下思路。</p><h2 id="怎么使用熔断器" tabindex="-1"><a class="header-anchor" href="#怎么使用熔断器"><span>怎么使用熔断器？</span></a></h2><p>可以看出，熔断器的逻辑其实很简单，而且这么通用的功能，必然有现成的库可以直接拿来用。<br> 比如阿里开源的<a href="github.com/alibaba/sentinel-golang">sentinel-golang</a>。<br> 使用也比较简单。只需要三步。</p><h3 id="_1-引入-circuitbreaker-库" tabindex="-1"><a class="header-anchor" href="#_1-引入-circuitbreaker-库"><span>1.引入 circuitbreaker 库</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token string">&quot;github.com/alibaba/sentinel-golang/core/circuitbreaker&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-声明熔断规则" tabindex="-1"><a class="header-anchor" href="#_2-声明熔断规则"><span>2.声明熔断规则</span></a></h3><p>通过<code>circuitbreaker.LoadRules</code>加载对应的熔断规则。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> circuitbreaker<span class="token punctuation">.</span><span class="token function">LoadRules</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>circuitbreaker<span class="token punctuation">.</span>Rule<span class="token punctuation">{</span>
		<span class="token comment">// Statistic time span=5s, recoveryTimeout=3s, maxErrorRatio=40%</span>
		<span class="token punctuation">{</span>
			Resource<span class="token punctuation">:</span>                     <span class="token string">&quot;api_url&quot;</span><span class="token punctuation">,</span>
			Strategy<span class="token punctuation">:</span>                     circuitbreaker<span class="token punctuation">.</span>ErrorRatio<span class="token punctuation">,</span>
			RetryTimeoutMs<span class="token punctuation">:</span>               <span class="token number">3000</span><span class="token punctuation">,</span>
			MinRequestAmount<span class="token punctuation">:</span>             <span class="token number">10</span><span class="token punctuation">,</span>
			StatIntervalMs<span class="token punctuation">:</span>               <span class="token number">5000</span><span class="token punctuation">,</span>
			StatSlidingWindowBucketCount<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
			Threshold<span class="token punctuation">:</span>                    <span class="token number">0.4</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面有几个需要注意的地方：</p><ul><li><strong>Resource</strong> 是想要保护的资源名称，也就是上面提到的 B 服务，这里可以直接使用被调用方的 url。</li><li><strong>Strategy</strong> 是指熔断策略，示例代码里展示的是错误率，也就是说服务达到 xx 比例的错误率时就会触发熔断。同时这里还支持填其他策略，比如从错误率换成错误次数或者是慢调用的比例个数。</li><li><strong>RetryTimeoutMs</strong> 是指熔断器打开后经过多长时间后进行重试。在熔断器 Open 期间，请求会被直接拒绝，不会发送到后端 Resource（B 服务）。在指定的超时时间之后，熔断器将尝试发送一个请求以检查后端资源的可用性。</li><li><strong>MinRequestAmount</strong> 表示在进行熔断之前必须满足的最小请求数量。只有当请求的数量达到或超过这个阈值时，熔断器才会生效。这个参数可以用来避免在系统启动时就触发熔断。</li><li><strong>StatIntervalMs</strong> 表示统计信息的时间间隔，以毫秒为单位。在这个时间间隔内，熔断器将收集请求的统计信息，用于计算错误率。</li><li><strong>Threshold</strong>：表示错误率的阈值。当错误率超过这个阈值时，熔断器将触发熔断，停止发送请求到后端资源。</li></ul><h3 id="_3-加入熔断保护" tabindex="-1"><a class="header-anchor" href="#_3-加入熔断保护"><span>3.加入熔断保护</span></a></h3><p>在需要进行熔断保护的地方，加入下面的代码：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>	e<span class="token punctuation">,</span> b <span class="token operator">:=</span> sentinel<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span><span class="token string">&quot;api_url&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 通过检测，不需要熔断，直接执行api调用</span>
		err <span class="token operator">:=</span> <span class="token function">api_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			sentinel<span class="token punctuation">.</span><span class="token function">TraceError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token comment">// 这里也可以加入降级逻辑，比如当api_call出现错误时</span>
			<span class="token comment">// fallback() // 服务降级的备用逻辑</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 保证执行完之后退出资源</span>
		e<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// 检测到需要熔断，执行服务降级逻辑</span>
		<span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 服务降级的备用逻辑</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 <code>sentinel.Entry()</code>方法内部会自动检测&quot;<code>api_url</code>&quot;这个资源是否需要打开熔断器，如果 api 调用报错了，可以通过 <code>sentinel.TraceError</code> 记录下来，<code>sentinel</code> 内部会根据报错去计算报错率，<strong>自动</strong>判断要不要熔断。如果触发熔断，则走 fallback() 逻辑，进行<strong>服务降级</strong>。</p><p>到这里，就算使用上熔断器的能力啦。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>服务熔断是一种软件设计模式，用于分布式系统中处理服务调用失败的情况，可以防止被调用服务因为频繁失败被压垮。它借鉴了电路中的断路器原理，通过监控服务调用的失败率等条件来决定是否阻止进一步的调用，以保护系统免受过载。</li><li>服务熔断器有三个主要状态：<code>关闭（Closed）</code>、<code>半开（HalfOpen）</code>和打开<code>（Open）</code>，分别对应不同的保护策略。当服务调用失败次数超过阈值时，熔断器打开，阻止服务调用。在一定时间后，熔断器尝试半开状态，允许少量请求通过以测试服务恢复情况。如果服务恢复，熔断器关闭；如果失败，熔断器保持打开状态。</li><li>在服务熔断或报错时，为系统提供兜底方案的能力，其实就是所谓的<strong>服务降级</strong>。</li><li>在 go 语言里可以使用 <code>sentinel-golang</code> 库实现熔断功能。</li></ul><h1 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章：</span></a></h1>`,35)),n("ul",null,[n("li",null,[n("p",null,[n("a",d,[t[0]||(t[0]=a("golang进阶面试题八股文合集")),s(e)])])]),n("li",null,[n("p",null,[n("a",u,[t[1]||(t[1]=a("golang基础面试题八股文合集")),s(e)])])]),n("li",null,[n("p",null,[n("a",g,[t[2]||(t[2]=a("golang常用标准库第三方库大全")),s(e)])])]),n("li",null,[n("p",null,[n("a",m,[t[3]||(t[3]=a("golang学习路线")),s(e)])])])])])}const A=o(c,[["render",b],["__file","服务熔断和服务降级是指什么.html.vue"]]),v=JSON.parse('{"path":"/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E5%92%8C%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E6%98%AF%E6%8C%87%E4%BB%80%E4%B9%88.html","title":"服务熔断和服务降级分别指什么？","lang":"zh-CN","frontmatter":{"description":"服务熔断和服务降级分别指什么？ 微服务领域里有个词叫服务熔断，你知道这是啥不？ 故事要从我读大学那会说起。 因为功率问题，很多寝室都是不让用吹风筒和热水壶的。 但我那时候头铁，不仅用，而且还同时开了两个热水壶和一个吹风筒。直接给寝室电路来了个压测。 不出意外的出了意外，寝室直接停电。 一时间，隔壁寝室灯火通明，我们寝室一片漆黑。 作为本科专业电气工程的...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E5%92%8C%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E6%98%AF%E6%8C%87%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"服务熔断和服务降级分别指什么？"}],["meta",{"property":"og:description","content":"服务熔断和服务降级分别指什么？ 微服务领域里有个词叫服务熔断，你知道这是啥不？ 故事要从我读大学那会说起。 因为功率问题，很多寝室都是不让用吹风筒和热水壶的。 但我那时候头铁，不仅用，而且还同时开了两个热水壶和一个吹风筒。直接给寝室电路来了个压测。 不出意外的出了意外，寝室直接停电。 一时间，隔壁寝室灯火通明，我们寝室一片漆黑。 作为本科专业电气工程的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/1710802492568.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T03:33:31.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"服务熔断和服务降级分别指什么？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-04-06T03:33:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"服务熔断和服务降级分别指什么？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/1710802492568.png\\",\\"https://cdn.xiaobaidebug.top/1710803412232.png\\",\\"https://cdn.xiaobaidebug.top/1710803299527.png\\",\\"https://cdn.xiaobaidebug.top/1710803330470.png\\",\\"https://cdn.xiaobaidebug.top/1707223730016.png\\",\\"https://cdn.xiaobaidebug.top/1710897365188.png\\"],\\"dateModified\\":\\"2024-04-06T03:33:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E5%92%8C%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E6%98%AF%E6%8C%87%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%AD%E5%92%8C%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%E6%98%AF%E6%8C%87%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"服务熔断和服务降级分别指什么？"}],["meta",{"property":"og:description","content":"服务熔断和服务降级分别指什么？ 微服务领域里有个词叫服务熔断，你知道这是啥不？ 故事要从我读大学那会说起。 因为功率问题，很多寝室都是不让用吹风筒和热水壶的。 但我那时候头铁，不仅用，而且还同时开了两个热水壶和一个吹风筒。直接给寝室电路来了个压测。 不出意外的出了意外，寝室直接停电。 一时间，隔壁寝室灯火通明，我们寝室一片漆黑。 作为本科专业电气工程的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T03:33:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T03:33:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"服务熔断和服务降级分别指什么？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-06T03:33:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"服务熔断是什么","slug":"服务熔断是什么","link":"#服务熔断是什么","children":[]},{"level":2,"title":"服务降级是什么","slug":"服务降级是什么","link":"#服务降级是什么","children":[]},{"level":2,"title":"怎么使用熔断器？","slug":"怎么使用熔断器","link":"#怎么使用熔断器","children":[{"level":3,"title":"1.引入 circuitbreaker 库","slug":"_1-引入-circuitbreaker-库","link":"#_1-引入-circuitbreaker-库","children":[]},{"level":3,"title":"2.声明熔断规则","slug":"_2-声明熔断规则","link":"#_2-声明熔断规则","children":[]},{"level":3,"title":"3.加入熔断保护","slug":"_3-加入熔断保护","link":"#_3-加入熔断保护","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1710897687000,"updatedTime":1712374411000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1},{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":8.3,"words":2489},"filePathRelative":"架构/微服务/核心知识点/服务熔断和服务降级是指什么.md","localizedDate":"2024年3月20日","autoDesc":true}');export{A as comp,v as data};
