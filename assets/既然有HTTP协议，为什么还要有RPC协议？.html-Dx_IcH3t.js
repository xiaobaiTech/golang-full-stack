import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as i,c as p,a as t,b as o,d as e,e as r}from"./app-DfxZWHzO.js";const g={},E={href:"https://github.com/xiaobaiTech/golangFamily",target:"_blank",rel:"noopener noreferrer"},c=t("br",null,null,-1),d={href:"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A1%AC%E6%A0%B8%EF%BC%81%E6%BC%AB%E7%94%BB%E5%9B%BE%E8%A7%A3HTTP%E7%9F%A5%E8%AF%86%E7%82%B9_%E9%9D%A2%E8%AF%95%E9%A2%98.html",target:"_blank",rel:"noopener noreferrer"},l=r(`<p>于是就到网上去搜。</p><p>不少解释显得非常官方，我相信大家在各种平台上也都看到过，解释了又好像没解释，都在<strong>用一个我们不认识的概念去解释另外一个我们不认识的概念</strong>，懂的人不需要看，不懂的人看了还是不懂。</p><p>这种看了，又好像没看的感觉，云里雾里的很难受，<strong>我懂</strong>。</p><p>为了避免大家有强烈的<strong>审丑疲劳</strong>，今天我们来尝试重新换个方式讲一讲。</p><br><h2 id="从-tcp-聊起" tabindex="-1"><a class="header-anchor" href="#从-tcp-聊起"><span>从 TCP 聊起</span></a></h2><p>作为一个程序员，假设我们需要在 A 电脑的进程发一段数据到 B 电脑的进程，我们一般会在代码里使用 socket 进行编程。</p><p>这时候，我们可选项一般也就**TCP 和 UDP 二选一。TCP 可靠，UDP 不可靠。**除非是马总这种神级程序员（早期 QQ 大量使用 UDP），否则，只要稍微对可靠性有些要求，普通人一般无脑选 TCP 就对了。</p><p>类似下面这样。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中<code>SOCK_STREAM</code>，是指使用<strong>字节流</strong>传输数据，说白了就是<strong>TCP 协议</strong>。</p><p>在定义了 socket 之后，我们就可以愉快的对这个 socket 进行操作，比如用<code>bind()</code>绑定 IP 端口，用<code>connect()</code>发起建连。</p><figure><img src="https://cdn.xiaobaidebug.top/握手建立连接流程3.gif" alt="握手建立连接流程" tabindex="0" loading="lazy"><figcaption>握手建立连接流程</figcaption></figure><p>在连接建立之后，我们就可以使用<code>send()</code>发送数据，<code>recv()</code>接收数据。</p><p>光这样一个纯裸的 TCP 连接，就可以做到收发数据了，那是不是就够了？</p><p>不行，这么用会有问题。</p><br><h2 id="使用纯裸-tcp-会有什么问题" tabindex="-1"><a class="header-anchor" href="#使用纯裸-tcp-会有什么问题"><span>使用纯裸 TCP 会有什么问题</span></a></h2><p>八股文常背，TCP 是有三个特点，<strong>面向连接</strong>、<strong>可靠</strong>、基于<strong>字节流</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/tcp是什么5.drawio.png" alt="TCP是什么" tabindex="0" loading="lazy"><figcaption>TCP是什么</figcaption></figure><p>这三个特点真的概括的<strong>非常精辟</strong>，这个八股文我们没白背。</p><p>每个特点展开都能聊一篇文章，而今天我们需要关注的是<strong>基于字节流</strong>这一点。</p><p>字节流可以理解为一个双向的通道里流淌的数据，这个<strong>数据</strong>其实就是我们常说的二进制数据，简单来说就是一大堆 <strong>01 串</strong>。纯裸 TCP 收发的这些 01 串之间是<strong>没有任何边界</strong>的，你根本不知道到哪个地方才算一条完整消息。</p><figure><img src="https://cdn.xiaobaidebug.top/01二进制字节流.drawio.png" alt="01二进制字节流" tabindex="0" loading="lazy"><figcaption>01二进制字节流</figcaption></figure><p>正因为这个没有<strong>任何边界</strong>的特点，所以当我们选择使用 TCP 发送**&quot;夏洛&quot;和&quot;特烦恼&quot;<strong>的时候，接收端收到的就是</strong>&quot;夏洛特烦恼&quot;<strong>，这时候接收端没发区分你是想要表达</strong>&quot;夏洛&quot;+&quot;特烦恼&quot;<strong>还是</strong>&quot;夏洛特&quot;+&quot;烦恼&quot;**。</p><figure><img src="https://cdn.xiaobaidebug.top/消息对比_夏洛特烦恼.drawio.png" alt="消息对比" tabindex="0" loading="lazy"><figcaption>消息对比</figcaption></figure>`,26),B=t("strong",null,"粘包问题",-1),h={href:"https://www.xiaobaidebug.top/2021/03/26/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/TCP%E7%B2%98%E5%8C%85%EF%BC%81%E6%95%B0%E6%8D%AE%E5%8C%85%EF%BC%9A%E6%88%91%E5%8F%AA%E6%98%AF%E7%8A%AF%E4%BA%86%E6%AF%8F%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E9%83%BD%E4%BC%9A%E7%8A%AF%E7%9A%84%E9%94%99%EF%BC%8C%E7%A1%AC%E6%A0%B8%E5%9B%BE%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},A=r(`<p>说这个的目的是为了告诉大家，纯裸 TCP 是不能直接拿来用的，你需要在这个基础上加入一些<strong>自定义的规则</strong>，用于区分<strong>消息边界</strong>。</p><p>于是我们会把每条要发送的数据都包装一下，比如加入<strong>消息头</strong>，<strong>消息头里写清楚一个完整的包长度是多少</strong>，根据这个长度可以继续接收数据，截取出来后它们就是我们真正要传输的<strong>消息体</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/消息边界长度标志6.drawio.png" alt="消息边界长度标志" tabindex="0" loading="lazy"><figcaption>消息边界长度标志</figcaption></figure><p>而这里头提到的<strong>消息头</strong>，还可以放各种东西，比如消息体是否被压缩过和消息体格式之类的，只要上下游都约定好了，互相都认就可以了，这就是所谓的<strong>协议。</strong></p><p>每个使用 TCP 的项目都可能会定义一套类似这样的协议解析标准，他们可能<strong>有区别，但原理都类似</strong>。</p><p><strong>于是基于 TCP，就衍生了非常多的协议，比如 HTTP 和 RPC。</strong></p><br><h2 id="http-和-rpc" tabindex="-1"><a class="header-anchor" href="#http-和-rpc"><span>HTTP 和 RPC</span></a></h2><p>我们回过头来看网络的分层图。</p><figure><img src="https://cdn.xiaobaidebug.top/四层网络协议5.drawio.png" alt="四层网络协议" tabindex="0" loading="lazy"><figcaption>四层网络协议</figcaption></figure><p><strong>TCP 是传输层的协议</strong>，而基于 TCP 造出来的 HTTP 和<strong>各类</strong>RPC 协议，它们都只是定义了不同消息格式的<strong>应用层协议</strong>而已。</p><p><strong>HTTP</strong>协议（<strong>H</strong>yper <strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol），又叫做<strong>超文本传输协议</strong>。我们用的比较多，平时上网在浏览器上敲个网址就能访问网页，这里用到的就是 HTTP 协议。</p><figure><img src="https://cdn.xiaobaidebug.top/HTTP调用.drawio.png" alt="HTTP调用" tabindex="0" loading="lazy"><figcaption>HTTP调用</figcaption></figure><p>而<strong>RPC</strong>（<strong>R</strong>emote <strong>P</strong>rocedure <strong>C</strong>all），又叫做<strong>远程过程调用</strong>。它本身并不是一个具体的协议，而是一种<strong>调用方式</strong>。</p><p>举个例子，我们平时调用一个<strong>本地方法</strong>就像下面这样。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code> res <span class="token operator">=</span> <span class="token function">localFunc</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果现在这不是个本地方法，而是个<strong>远端服务器</strong>暴露出来的一个方法<code>remoteFunc</code>，如果我们还能像调用本地方法那样去调用它，这样就可以<strong>屏蔽掉一些网络细节</strong>，用起来更方便，岂不美哉？</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code> res <span class="token operator">=</span> <span class="token function">remoteFunc</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.xiaobaidebug.top/RPC是一种调用方式.drawio.png" alt="RPC可以像调用本地方法那样调用远端方法" tabindex="0" loading="lazy"><figcaption>RPC可以像调用本地方法那样调用远端方法</figcaption></figure><p>基于这个思路，大佬们造出了非常多款式的 RPC 协议，比如比较有名的<code>gRPC</code>，<code>thrift</code>。</p><p>值得注意的是，虽然大部分 RPC 协议底层使用 TCP，但实际上<strong>它们不一定非得使用 TCP，改用 UDP 或者 HTTP，其实也可以做到类似的功能。</strong></p><figure><img src="https://cdn.xiaobaidebug.top/基于TCP协议的HTTP和RPC协议.drawio.png" alt="基于TCP协议的HTTP和RPC协议" tabindex="0" loading="lazy"><figcaption>基于TCP协议的HTTP和RPC协议</figcaption></figure><br><p>到这里，我们回到文章标题的问题。</p><p><strong>既然有 HTTP 协议，为什么还要有 RPC？</strong></p><p>其实，<code>TCP</code>是<strong>70 年</strong>代出来的协议，而<code>HTTP</code>是<strong>90 年代</strong>才开始流行的。而直接使用裸 TCP 会有问题，可想而知，这中间这么多年有多少自定义的协议，而这里面就有<strong>80 年代</strong>出来的<code>RPC</code>。</p><p>所以我们该问的不是<strong>既然有 HTTP 协议为什么要有 RPC</strong>，而是<strong>为什么有 RPC 还要有 HTTP 协议</strong>。</p><br><h3 id="那既然有-rpc-了-为什么还要有-http-呢" tabindex="-1"><a class="header-anchor" href="#那既然有-rpc-了-为什么还要有-http-呢"><span>那既然有 RPC 了，为什么还要有 HTTP 呢？</span></a></h3><p>现在电脑上装的各种<strong>联网</strong>软件，比如 xx 管家，xx 卫士，它们都作为**客户端（client）<strong>需要跟</strong>服务端（server）<strong>建立连接收发消息，此时都会用到应用层协议，在这种</strong>client/server (c/s)**架构下，它们可以使用自家造的 RPC 协议，因为它只管连自己公司的服务器就 ok 了。</p><p>但有个软件不同，<strong>浏览器（browser）</strong>，不管是 chrome 还是 IE，它们不仅要能访问自家公司的<strong>服务器（server）</strong>，还需要访问其他公司的网站服务器，因此它们需要有个统一的标准，不然大家没法交流。于是，HTTP 就是那个时代用于统一 <strong>browser/server (b/s)</strong> 的协议。</p><p>也就是说在多年以前，<strong>HTTP 主要用于 b/s 架构，而 RPC 更多用于 c/s 架构。但现在其实已经没分那么清了，b/s 和 c/s 在慢慢融合。<strong>很多软件同时支持多端，比如某度云盘，既要支持</strong>网页版</strong>，还要支持<strong>手机端和 pc 端</strong>，如果通信协议都用 HTTP 的话，那服务器只用同一套就够了。而 RPC 就开始退居幕后，一般用于公司内部集群里，各个微服务之间的通讯。</p><p>那这么说的话，<strong>都用 HTTP 得了，还用什么 RPC？</strong></p><p>仿佛又回到了文章开头的样子，那这就要从它们之间的区别开始说起。</p><br><h2 id="http-和-rpc-有什么区别" tabindex="-1"><a class="header-anchor" href="#http-和-rpc-有什么区别"><span>HTTP 和 RPC 有什么区别</span></a></h2><p>我们来看看 RPC 和 HTTP 区别比较明显的几个点。</p><br><h3 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现"><span>服务发现</span></a></h3>`,39),T=t("strong",null,"IP 地址和端口",-1),P={href:"https://golangguide.top/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A6%81%E7%B4%A0.html",target:"_blank",rel:"noopener noreferrer"},u=r('<p>在<strong>HTTP</strong>中，你知道服务的域名，就可以通过<strong>DNS 服务</strong>去解析得到它背后的 IP 地址，默认 80 端口。</p><p>而<strong>RPC</strong>的话，就有些区别，一般会有专门的<strong>中间服务</strong>去保存服务名和 IP 信息，比如<strong>consul 或者 etcd，甚至是 redis</strong>。想要访问某个服务，就去这些中间服务去获得 IP 和端口信息。由于 dns 也是服务发现的一种，所以也有基于 dns 去做服务发现的组件，比如<strong>CoreDNS</strong>。</p><p>可以看出服务发现这一块，两者是有些区别，但不太能分高低。</p><br><h3 id="底层连接形式" tabindex="-1"><a class="header-anchor" href="#底层连接形式"><span>底层连接形式</span></a></h3><p>以主流的<strong>HTTP1.1</strong>协议为例，其默认在建立底层 TCP 连接之后会一直保持这个连接（<strong>keep alive</strong>），之后的请求和响应都会复用这条连接。</p><p>而<strong>RPC</strong>协议，也跟 HTTP 类似，也是通过建立 TCP 长链接进行数据交互，但不同的地方在于，RPC 协议一般还会再建个<strong>连接池</strong>，在请求量大的时候，建立多条连接放在池内，要发数据的时候就从池里取一条连接出来，<strong>用完放回去，下次再复用</strong>，可以说非常环保。</p><figure><img src="https://cdn.xiaobaidebug.top/connection_pool3.drawio.png" alt="connection_pool" tabindex="0" loading="lazy"><figcaption>connection_pool</figcaption></figure><p><strong>由于连接池有利于提升网络请求性能，所以不少编程语言的网络库里都会给 HTTP 加个连接池</strong>，比如<strong>go</strong>就是这么干的。</p><p>可以看出这一块两者也没太大区别，所以也不是关键。</p><br><h3 id="传输的内容" tabindex="-1"><a class="header-anchor" href="#传输的内容"><span>传输的内容</span></a></h3><p>基于 TCP 传输的消息，说到底，无非都是<strong>消息头 header 和消息体 body。</strong></p><p><strong>header</strong>是用于标记一些特殊信息，其中最重要的是<strong>消息体长度</strong>。</p><p><strong>body</strong>则是放我们真正需要传输的内容，而这些内容只能是二进制 01 串，毕竟计算机只认识这玩意。所以 TCP 传字符串和数字都问题不大，因为字符串可以转成编码再变成 01 串，而数字本身也能直接转为二进制。但结构体呢，我们得想个办法将它也转为二进制 01 串，这样的方案现在也有很多现成的，比如<strong>json，protobuf。</strong></p><p>这个将结构体转为二进制数组的过程就叫<strong>序列化</strong>，反过来将二进制数组复原成结构体的过程叫<strong>反序列化</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/序列化和反序列化.drawio.png" alt="序列化和反序列化" tabindex="0" loading="lazy"><figcaption>序列化和反序列化</figcaption></figure><br><p>对于主流的 HTTP1.1，虽然它现在叫<strong>超文本</strong>协议，支持音频视频，但 HTTP 设计初是用于做网页<strong>文本</strong>展示的，所以它传的内容以字符串为主。header 和 body 都是如此。在 body 这块，它使用<strong>json</strong>来<strong>序列化</strong>结构体数据。</p><p>我们可以随便截个图直观看下。</p><figure><img src="https://cdn.xiaobaidebug.top/image-20220716212628672.png" alt="HTTP报文" tabindex="0" loading="lazy"><figcaption>HTTP报文</figcaption></figure><p>可以看到这里面的内容非常多的<strong>冗余</strong>，显得<strong>非常啰嗦</strong>。最明显的，像<code>header</code>里的那些信息，其实如果我们约定好头部的第几位是 content-type，就<strong>不需要每次都真的把&quot;content-type&quot;这个字段都传过来</strong>，类似的情况其实在<code>body</code>的 json 结构里也特别明显。</p><p>而 RPC，因为它定制化程度更高，可以采用体积更小的 protobuf 或其他序列化协议去保存结构体数据，同时也不需要像 HTTP 那样考虑各种浏览器行为，比如 302 重定向跳转啥的。<strong>因此性能也会更好一些，这也是在公司内部微服务中抛弃 HTTP，选择使用 RPC 的最主要原因。</strong></p><figure><img src="https://cdn.xiaobaidebug.top/HTTP原理.drawio.png" alt="HTTP原理" tabindex="0" loading="lazy"><figcaption>HTTP原理</figcaption></figure><figure><img src="https://cdn.xiaobaidebug.top/RPC原理.drawio.png" alt="RPC原理" tabindex="0" loading="lazy"><figcaption>RPC原理</figcaption></figure><p>当然上面说的 HTTP，其实<strong>特指的是现在主流使用的 HTTP1.1</strong>，<code>HTTP2</code>在前者的基础上做了很多改进，所以<strong>性能可能比很多 RPC 协议还要好</strong>，甚至连<code>gRPC</code>底层都直接用的<code>HTTP2</code>。</p><p>那么问题又来了。</p><br><h4 id="为什么既然有了-http2-还要有-rpc-协议" tabindex="-1"><a class="header-anchor" href="#为什么既然有了-http2-还要有-rpc-协议"><span>为什么既然有了 HTTP2，还要有 RPC 协议？</span></a></h4><p>这个是由于 HTTP2 是 2015 年出来的。那时候很多公司内部的 RPC 协议都已经跑了好些年了，基于历史原因，一般也没必要去换了。</p><br><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>纯裸 TCP 是能收发数据，但它是个<strong>无边界</strong>的数据流，上层需要定义<strong>消息格式</strong>用于定义<strong>消息边界</strong>。于是就有了各种协议，HTTP 和各类 RPC 协议就是在 TCP 之上定义的应用层协议。</li><li><strong>RPC 本质上不算是协议，而是一种调用方式</strong>，而像 gRPC 和 thrift 这样的具体实现，才是协议，它们是实现了 RPC 调用的协议。目的是希望程序员能像调用本地方法那样去调用远端的服务方法。同时 RPC 有很多种实现方式，<strong>不一定非得基于 TCP 协议</strong>。</li><li>从发展历史来说，**HTTP 主要用于 b/s 架构，而 RPC 更多用于 c/s 架构。但现在其实已经没分那么清了，b/s 和 c/s 在慢慢融合。**很多软件同时支持多端，所以对外一般用 HTTP 协议，而内部集群的微服务之间则采用 RPC 协议进行通讯。</li><li>RPC 其实比 HTTP 出现的要早，且比目前主流的 HTTP1.1<strong>性能</strong>要更好，所以大部分公司内部都还在使用 RPC。</li><li><strong>HTTP2.0</strong>在<strong>HTTP1.1</strong>的基础上做了优化，性能可能比很多 RPC 协议都要好，但由于是这几年才出来的，所以也不太可能取代掉 RPC。</li></ul><br><p>最后留个问题吧，大家有没有发现，不管是 HTTP 还是 RPC，它们都有个特点，那就是消息都是客户端请求，服务端响应。<strong>客户端没问，服务端肯定就不答</strong>，这就有点僵了，但现实中肯定有需要<strong>下游主动发送消息给上游</strong>的场景，比如打个网页游戏，站在那啥也不操作，怪也会主动攻击我，这种情况该怎么办呢？</p><br><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>',37),C={href:"https://www.zhihu.com/question/41609070",target:"_blank",rel:"noopener noreferrer"},b=r('<br><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>按照惯例，我应该在这里唯唯诺诺的求大家叫我两声<strong>靓仔</strong>的。</p><p>但还是算了。因为我最近一直在想一个问题，希望兄弟们能在<strong>评论区</strong>告诉我答案。</p><p>最近手机借给别人玩了一下午，现在老是给我推荐<strong>练习时长两年半的练习生</strong>视频。</p><p>每个视频都在声嘶力竭的告诉我，<strong>鸡你太美</strong>。</p><p>所以我很想问，兄弟们。</p><p><strong>鸡，到底美不美？</strong></p><p>头疼。</p><br><p><strong>右下角的点赞和再看还是可以走一波的。</strong></p><p>先这样。</p><p>我是小白，我们下期见。</p><br><h5 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h5><p>关注公众号:【小白 debug】</p><br><p>不满足于在留言区说骚话？</p><p>加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。就<strong>超！开！心！</strong></p><img src="https://cdn.xiaobaidebug.top/image-20220522162616202.png" alt="" style="zoom:50%;"><figure><img src="https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><br><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>',23),m={href:"https://www.xiaobaidebug.top/2022/07/19/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/%E6%97%A2%E7%84%B6%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89RPC%E5%8D%8F%E8%AE%AE%EF%BC%9F/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.xiaobaidebug.top/2021/03/26/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/TCP%E7%B2%98%E5%8C%85%EF%BC%81%E6%95%B0%E6%8D%AE%E5%8C%85%EF%BC%9A%E6%88%91%E5%8F%AA%E6%98%AF%E7%8A%AF%E4%BA%86%E6%AF%8F%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E9%83%BD%E4%BC%9A%E7%8A%AF%E7%9A%84%E9%94%99%EF%BC%8C%E7%A1%AC%E6%A0%B8%E5%9B%BE%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.xiaobaidebug.top/2021/05/25/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%EF%BC%81%E6%97%A2%E7%84%B6IP%E5%B1%82%E4%BC%9A%E5%88%86%E7%89%87%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88TCP%E5%B1%82%E4%B9%9F%E8%BF%98%E8%A6%81%E5%88%86%E6%AE%B5%EF%BC%9F/",target:"_blank",rel:"noopener noreferrer"};function x(_,H){const n=s("ExternalLinkIcon");return i(),p("div",null,[t("blockquote",null,[t("p",null,[o("文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub "),t("a",E,[o("https://github.com/xiaobaiTech/golangFamily"),e(n)]),o(" , 有大厂面试完整考点和成长路线，欢迎 Star。")])]),c,t("p",null,[o("我想起了我刚工作的时候，第一次接触 RPC 协议，当时就很懵，"),t("strong",null,[o("我 "),t("a",d,[o("HTTP 协议"),e(n)]),o("用的好好的，为什么还要用 RPC 协议？")])]),l,t("p",null,[o("这就是所谓的"),B,o("，之前也写过一篇专门的"),t("a",h,[o("文章"),e(n)]),o("聊过这个问题。")]),A,t("p",null,[o("首先要向某个服务器发起请求，你得先建立连接，而建立连接的前提是，你得知道"),T,o("。这个找到服务对应的 IP 端口的过程，其实就是"),t("a",P,[o("服务发现"),e(n)]),o("。")]),u,t("p",null,[t("a",C,[o("https://www.zhihu.com/question/41609070"),e(n)])]),b,t("ul",null,[t("li",null,[t("a",m,[o("既然有 HTTP 协议，为什么还要有 RPC"),e(n)])]),t("li",null,[t("a",F,[o("TCP 粘包 数据包：我只是犯了每个数据包都会犯的错 |硬核图解"),e(n)])]),t("li",null,[t("a",f,[o("动图图解！既然 IP 层会分片，为什么 TCP 层也还要分段？"),e(n)])])])])}const w=a(g,[["render",x],["__file","既然有HTTP协议，为什么还要有RPC协议？.html.vue"]]),k=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%97%A2%E7%84%B6%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89RPC%E5%8D%8F%E8%AE%AE%EF%BC%9F.html","title":"既然有HTTP协议，为什么还要有RPC","lang":"zh-CN","frontmatter":{"title":"既然有HTTP协议，为什么还要有RPC","date":"2022-07-19T22:57:55.000Z","tags":null,"categories":"图解网络","description":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 我想起了我刚工作的时候，第一次接触 RPC 协议，当时就很懵，我 HTTP 协议用的好好的，为什...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%97%A2%E7%84%B6%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89RPC%E5%8D%8F%E8%AE%AE%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"既然有HTTP协议，为什么还要有RPC"}],["meta",{"property":"og:description","content":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 我想起了我刚工作的时候，第一次接触 RPC 协议，当时就很懵，我 HTTP 协议用的好好的，为什..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E6%B5%81%E7%A8%8B3.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T13:55:00.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"既然有HTTP协议，为什么还要有RPC"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:published_time","content":"2022-07-19T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-12T13:55:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"既然有HTTP协议，为什么还要有RPC\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E6%B5%81%E7%A8%8B3.gif\\",\\"https://cdn.xiaobaidebug.top/tcp%E6%98%AF%E4%BB%80%E4%B9%885.drawio.png\\",\\"https://cdn.xiaobaidebug.top/01%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E8%8A%82%E6%B5%81.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E6%B6%88%E6%81%AF%E5%AF%B9%E6%AF%94_%E5%A4%8F%E6%B4%9B%E7%89%B9%E7%83%A6%E6%81%BC.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E6%B6%88%E6%81%AF%E8%BE%B9%E7%95%8C%E9%95%BF%E5%BA%A6%E6%A0%87%E5%BF%976.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E5%9B%9B%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE5.drawio.png\\",\\"https://cdn.xiaobaidebug.top/HTTP%E8%B0%83%E7%94%A8.drawio.png\\",\\"https://cdn.xiaobaidebug.top/RPC%E6%98%AF%E4%B8%80%E7%A7%8D%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E5%9F%BA%E4%BA%8ETCP%E5%8D%8F%E8%AE%AE%E7%9A%84HTTP%E5%92%8CRPC%E5%8D%8F%E8%AE%AE.drawio.png\\",\\"https://cdn.xiaobaidebug.top/connection_pool3.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image-20220716212628672.png\\",\\"https://cdn.xiaobaidebug.top/HTTP%E5%8E%9F%E7%90%86.drawio.png\\",\\"https://cdn.xiaobaidebug.top/RPC%E5%8E%9F%E7%90%86.drawio.png\\",\\"https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi.gif\\"],\\"datePublished\\":\\"2022-07-19T22:57:55.000Z\\",\\"dateModified\\":\\"2024-05-12T13:55:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%97%A2%E7%84%B6%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89RPC%E5%8D%8F%E8%AE%AE%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%97%A2%E7%84%B6%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89RPC%E5%8D%8F%E8%AE%AE%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"既然有HTTP协议，为什么还要有RPC"}],["meta",{"property":"og:description","content":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 我想起了我刚工作的时候，第一次接触 RPC 协议，当时就很懵，我 HTTP 协议用的好好的，为什..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T13:55:00.000Z"}],["meta",{"property":"article:published_time","content":"2022-07-19T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-12T13:55:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"既然有HTTP协议，为什么还要有RPC\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-19T22:57:55.000Z\\",\\"dateModified\\":\\"2024-05-12T13:55:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"从 TCP 聊起","slug":"从-tcp-聊起","link":"#从-tcp-聊起","children":[]},{"level":2,"title":"使用纯裸 TCP 会有什么问题","slug":"使用纯裸-tcp-会有什么问题","link":"#使用纯裸-tcp-会有什么问题","children":[]},{"level":2,"title":"HTTP 和 RPC","slug":"http-和-rpc","link":"#http-和-rpc","children":[{"level":3,"title":"那既然有 RPC 了，为什么还要有 HTTP 呢？","slug":"那既然有-rpc-了-为什么还要有-http-呢","link":"#那既然有-rpc-了-为什么还要有-http-呢","children":[]}]},{"level":2,"title":"HTTP 和 RPC 有什么区别","slug":"http-和-rpc-有什么区别","link":"#http-和-rpc-有什么区别","children":[{"level":3,"title":"服务发现","slug":"服务发现","link":"#服务发现","children":[]},{"level":3,"title":"底层连接形式","slug":"底层连接形式","link":"#底层连接形式","children":[]},{"level":3,"title":"传输的内容","slug":"传输的内容","link":"#传输的内容","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1715522100000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":2},{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":15.34,"words":4601},"filePathRelative":"计算机基础/网络基础/核心知识点/既然有HTTP协议，为什么还要有RPC协议？.md","localizedDate":"2022年7月19日","autoDesc":true}');export{w as comp,k as data};
