import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as g,c as r,a as t,b as n,d as e,e as a}from"./app-CVBBBkvE.js";const s={},E={href:"https://github.com/xiaobaiTech/golangFamily",target:"_blank",rel:"noopener noreferrer"},c=a('<br><p>平时，我们想要知道，自己的机器到目的机器之间，<strong>网络通不通</strong>，一般会执行<strong>ping 命令</strong>。</p><p>一般对于状况良好的网络来说，你能看到它对应的<code>loss</code>丢包率为<code>0%</code>，也就是所谓的<strong>能 ping 通</strong>。如果看到丢包率<code>100%</code>，也就是<strong>ping 不通</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/ping正常.png" alt="ping正常" tabindex="0" loading="lazy"><figcaption>ping正常</figcaption></figure><figure><img src="https://cdn.xiaobaidebug.top/ping不通.png" alt="ping不通" tabindex="0" loading="lazy"><figcaption>ping不通</figcaption></figure><br><p>那么问题来了，假设我能<strong>ping</strong>通某台机器，那这时候如果我改用<strong>TCP 协议</strong>去发数据到目的机器，<strong>也一定能通吗？</strong></p><p>或者换个问法，<strong>ping 和 tcp 协议走的网络路径是一样的吗？</strong></p><br><p>这时候第一反应就是<strong>不一定</strong>，因为 ping 完之后中间链路里的<strong>某个路由器可能会挂了（断电了）</strong>，再用 TCP 去连就会走别的路径。</p><p>也没错。但假设，<strong>中间链路没发生任何变化呢？</strong></p><p>我先直接说答案。</p><p><strong>不一定，走的网络路径还是有可能是不同的。</strong></p><p>今天就来聊聊为什么。</p><br>',15),d={href:"https://mp.weixin.qq.com/s/Gml_xxvGjq224L7zCoXm5w",target:"_blank",rel:"noopener noreferrer"},l=t("strong",null,"ping 数据包和 tcp 数据包的区别",-1),h=a(`<figure><img src="https://cdn.xiaobaidebug.top/ping和普通发消息的关系67.drawio.png" alt="ping和TCP发消息的区别" tabindex="0" loading="lazy"><figcaption>ping和TCP发消息的区别</figcaption></figure><br><p>我们知道网络是分层的，每一层都有对应协议。</p><figure><img src="https://cdn.xiaobaidebug.top/五层网络协议对应的消息体变化分析.png" alt="五层网络协议对应的消息体变化分析" tabindex="0" loading="lazy"><figcaption>五层网络协议对应的消息体变化分析</figcaption></figure><p>而这网络层就像搭积木一样，上层协议都是基于下层协议搭出来的。</p><p><strong>不管是 ping（用了 ICMP 协议）还是 tcp 本质上都是基于网络层 IP 协议的数据包，而到了物理层，都是二进制 01 串，都走网卡发出去了。</strong></p><p>如果网络环境没发生变化，目的地又一样，那按道理说他们走的网络路径应该是一样的，什么情况下会不同呢？</p><p>我们就从<strong>路由</strong>这个话题聊起吧。</p><br><h2 id="网络路径" tabindex="-1"><a class="header-anchor" href="#网络路径"><span>网络路径</span></a></h2><p>在我们的想象中，当我们想在两台机器之间传输数据。本机和目的机器之间会建立一条连接，像<strong>一条管道</strong>一样，数据从这头到那头。这条管道其实是我们为了方便理解而抽象出来的概念。</p><p>实际上，我们将数据包从本地网卡发出之后，会经过各种<strong>路由器（或者交换机）</strong>，才能到达目的机器。</p><p>这些路由器数量众多，相互之间可以互连，连起来之后就像是一张大网，所以叫**&quot;网络&quot;**可以说是非常的形象。</p><figure><img src="https://cdn.xiaobaidebug.top/路由器构成的网络.drawio.png" alt="路由器构成的网络" tabindex="0" loading="lazy"><figcaption>路由器构成的网络</figcaption></figure><blockquote><p>考虑到交换机有的功能，路由器基本上都支持，所以我们这边只讨论路由器。</p></blockquote><p>那么现在问题来了，<strong>路由器收到数据后，怎么知道应该走哪条路径，传给哪个路由器？</strong></p><br><h2 id="路径由什么决定" tabindex="-1"><a class="header-anchor" href="#路径由什么决定"><span>路径由什么决定？</span></a></h2><p>在上面的那么大一张网络中，随便一个路由器都有可能走任何一个路径，将数据发到另外一个路由器上，</p><p>但路由和路由之间距离，带宽啥的可能都不同。</p><p>于是就很需要知道，<strong>两点之间走哪条路才是最优路径</strong>。</p><p>于是问题就变成了这样一个<strong>图状结构</strong>。每条边都带有<strong>成本或权重</strong>，算这上面<strong>任意两点的最短距离</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/路由器的Dijkstra.drawio.png" alt="路由器和Dijkstra" tabindex="0" loading="lazy"><figcaption>路由器和Dijkstra</figcaption></figure><p>这时候想必大家回忆压不住要上来了。</p><p>这题我熟，这就是大学时候刷的<strong>Dijkstra 算法</strong>。菊花厂的 OJ 笔试题集里也经常出现，现在终于明白为什么他们家的笔试题里图类题目比别的大厂貌似要多一些了吧，因为菊花厂就是搞通信的，做路由器的老玩家了。</p><br><h3 id="路由表的生成" tabindex="-1"><a class="header-anchor" href="#路由表的生成"><span>路由表的生成</span></a></h3><p>基于<strong>Dijkstra 算法</strong>，封装出了一个新的协议，<strong>OSPF 协议</strong>（<strong>O</strong>pen <strong>S</strong>hortest <strong>P</strong>ath <strong>F</strong>irst, 开放最短路径优先）。</p><p>有了 OSPF，路由器就得到了网络图里自己到其他点之间的<strong>最短距离</strong>，于是就知道了<strong>数据包要到某个点，该走哪条最优路径</strong>。</p><p>将这些信息汇成一张表，也就是我们常说的<strong>路由表</strong>。</p><p>路由表里记录了到什么 IP 需要走什么端口，以及走这条路径的成本（<code>metric</code>）。</p><p>可以通过 <code>route</code> 命令查看到。</p><figure><img src="https://cdn.xiaobaidebug.top/route2.png" alt="route表" tabindex="0" loading="lazy"><figcaption>route表</figcaption></figure><br><h3 id="路由表决定数据包路径" tabindex="-1"><a class="header-anchor" href="#路由表决定数据包路径"><span>路由表决定数据包路径</span></a></h3><p>数据包在发送的过程中，会在<strong>网络层</strong>加入<strong>目标地址 IP</strong>。</p><p>路由器会根据这个<strong>IP</strong>跟<strong>路由表</strong>去做匹配。</p><p>然后路由表，会告诉路由器，什么样的消息该转发到什么端口。</p><p>举个例子。</p><figure><img src="https://cdn.xiaobaidebug.top/路由互联时新版.drawio.png" alt="通过路由表转发数据" tabindex="0" loading="lazy"><figcaption>通过路由表转发数据</figcaption></figure><p>假设 A 要发消息到 D。也就是<code>192.168.0.105/24</code>要发消息到<code>192.168.1.11/24</code>。</p><p>那么 A 会把消息经发到路由器。</p><p>路由器已知目的地 IP<code>192.168.1.11/24</code> ，去跟<strong>路由表</strong>做匹配，发现<code>192.168.1.0/24</code>, 就在 e2 端口，那么就会把消息从 e2 端口发出，（可能还会经过交换机）最后把消息打到目的机器。</p><p>当然，如果路由表里找不到，那就打到<strong>默认网关</strong>吧，也就是从 e1 口发出，发到 IP<code>192.0.2.1</code>。<strong>这个路由器的路由表不知道该去哪，说不定其他路由器知道</strong>。</p><br><h3 id="路由表的匹配规则" tabindex="-1"><a class="header-anchor" href="#路由表的匹配规则"><span>路由表的匹配规则</span></a></h3><p>上面的例子里，是只匹配上了路由表里的<strong>一项</strong>，所以只能是它了。</p><p>但是，条条大路通罗马。实际上能到目的地的路径肯定有很多。</p><p><strong>如果路由表里有很多项都被匹配上了，会怎么选？</strong></p><br><p>如果多个路由项都能到目的地，那就优先选<strong>匹配长度更长</strong>的那个。比如，还是目的地<code>192.168.1.11</code>，发现路由表里的<strong>192.168.1</strong>.0/<strong>24</strong> 和 <strong>192.168</strong>.0.0/<strong>16</strong>都能匹配上，但明显<strong>前者匹配长度更长</strong>，所以最后会走 <strong>192.168.1</strong>.0/<strong>24</strong>对应的转发端口。</p><p><strong>但如果两个表项的匹配长度都一样呢？</strong></p><p>那就会看生成这个路由表项的<strong>协议</strong>是啥，选优先级高的，优先级越高也就是所谓的<strong>管理距离</strong>（<strong>AD</strong>，<strong>A</strong>dministrative<strong>D</strong>istance）越小。比如说优先选<strong>手动配</strong>的静态（<strong>static</strong>）路由，次优选<strong>OSPF</strong>动态学习过来的表项。</p><p>如果还是相同，就看<strong>度量值 metrics</strong>，其实也就是<strong>路径成本 cost</strong>，成本越小，越容易被选中。</p><p><strong>路由器能选的路线有很多，但按道理，最优的只有&quot;一条&quot;，所以到这里为止，我们都可以认为，对于同一个目的地，ping 和 TCP 走的路径是相同的。</strong></p><p>但是。</p><p>**如果连路径成本都一样呢？**也就是说有多条最优路径呢。</p><p><strong>那就都用</strong>。</p><p>这也就是所谓的<strong>等价多路径，ECMP</strong>（<strong>E</strong>qual <strong>C</strong>ost <strong>M</strong>ulti<strong>P</strong>ath）。</p><p>我们可以通过<code>traceroute</code>看下链路是否存在等价多路径的情况。</p><figure><img src="https://cdn.xiaobaidebug.top/image-20220805122619206.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，中间某几行，有<strong>好几个 IP</strong>，也就是说这一跳里同时可以选好几个目的机器，说明这段路径<strong>支持 ECMP</strong>。</p><br><h3 id="ecmp-有什么用" tabindex="-1"><a class="header-anchor" href="#ecmp-有什么用"><span>ECMP 有什么用</span></a></h3><p>利用等价多路径，我们<strong>可以增加链路带宽</strong>。</p><p>举个例子。</p><figure><img src="https://cdn.xiaobaidebug.top/没有ECMP时只能选择某一条路径.drawio4.png" alt="没有ECMP时只能选择某一条路径" tabindex="0" loading="lazy"><figcaption>没有ECMP时只能选择某一条路径</figcaption></figure><p>从 A 点到 B 点，如果这两条路径成本不同，带宽都是<code>1千兆</code>。那数据包肯定就选成本低的那条路了，如果这条路出故障了，就走下面那条路。但不管怎么样，<strong>同一时间，只用到了一条路径</strong>。另外一条闲置就有些浪费了，有没有办法可以利用起来呢？</p><p>有，将它们两条路径的成本设置成一样，那它们就成了等价路由，然后中间的路由器开启<strong>ECMP</strong>特性，就可以同时利用这两条链路了。带宽就从原来的<code>1千兆</code>变成了<code>2千兆</code>。数据就可以在两条路径中随意选择了。</p><figure><img src="https://cdn.xiaobaidebug.top/利用ECMP可以同时使用两条链路.drawi3o.png" alt="利用ECMP可以同时使用两条链路" tabindex="0" loading="lazy"><figcaption>利用ECMP可以同时使用两条链路</figcaption></figure><p>但这也带来了另外一个问题。<strong>加剧了数据包乱序</strong>。</p><p>原来我只使用一条网络路径，数据依次发出，如无意外，也是依次到达。</p><p>现在两个数据包走两条路径，先发的数据包可能后到。这就乱序了。</p><p>那么问题又又来了。</p><br><h3 id="乱序会有什么问题" tabindex="-1"><a class="header-anchor" href="#乱序会有什么问题"><span>乱序会有什么问题？</span></a></h3><p>对于我们最最最常使用的 TCP 协议来说，它是个可靠性网络的协议，这里提到的<strong>可靠</strong>，不仅是保证数据要能送到目的地，还要保证<strong>数据顺序</strong>要跟原来发送端的一样。</p><p>实现也很简单，<strong>TCP 为每个数据包（segment）做上编号</strong>。数据到了接收端后，根据<strong>数据包编号</strong>发现是<strong>乱序数据包</strong>，就会扔到<strong>乱序队列</strong>中对数据包进行排序。如果前面的数据包还没到，哪怕后面的数据包先到了，也得在乱序队列中一直等，到齐后才能被上层拿到。</p><p>举个例子，发送端发出三个数据包，<code>编号1,2,3</code>，假设在<strong>传输层</strong><code>2和3</code>先到了，<code>1</code>还没到。那此时<strong>应用层</strong>是没办法拿到<code>2和3</code>的数据包的，必须得等<code>1</code>来了之后，<strong>应用层才能一次性拿到这三个包</strong>。因为这三个包原来可能表示的是一个完整的消息，少了 1, 那么<strong>消息就不完整</strong>，应用层拿到了也毫无意义。</p><p>像这种，由于<strong>前面的数据丢失</strong>导致<strong>后面的数据没办法及时给到应用层</strong>的现象，就是我们常说的<strong>TCP 队头阻塞</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/乱序队列等待数据包的到来.drawio.png" alt="乱序队列等待数据包的到来" tabindex="0" loading="lazy"><figcaption>乱序队列等待数据包的到来</figcaption></figure><p>乱序发生时<code>2和3</code>需要待在乱序队列中，而<strong>乱序队列其实用的也是接收缓冲区的内存</strong>，而<strong>接收缓冲区是有大小限制的</strong>。通过下面的命令可以看到接收缓冲区的大小。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看接收缓冲区</span>
$ <span class="token function">sysctl</span> net.ipv4.tcp_rmem
net.ipv4.tcp_rmem <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span>	<span class="token number">87380</span><span class="token punctuation">(</span>default<span class="token punctuation">)</span>	<span class="token number">6291456</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span>
<span class="token comment"># 缓冲区会在min和max之间动态调整</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乱序的情况越多，接收缓冲区的内存就被占用的越多，对应的<strong>接收窗口</strong>就会变小，那正常能收的数据就变少了，<strong>网络吞吐就变差</strong>了，也就是性能变差了。</p><p>因此，我们需要尽量保证所有<strong>同一个 TCP 连接下的所有 TCP 包都走相同路径，这样才能最大程度避免丢包</strong>。</p><br><h3 id="ecmp-的路径选择策略" tabindex="-1"><a class="header-anchor" href="#ecmp-的路径选择策略"><span>ECMP 的路径选择策略</span></a></h3><p><strong>当初开启 ECMP 就是为了提升性能，现在反而加重了乱序，降低了 TCP 传输性能。</strong></p><p>这怎么能忍。</p><p>为了解决这个问题，我们需要有一个合理的路径选择策略。为了避免同一个连接里的数据包乱序，我们需要保证同一个连接里的数据包，都走同样的路径。</p><p>这好办。我们可以通过连接的<strong>五元组</strong>（发送方的<strong>IP</strong>和<strong>端口</strong>，接收方的<strong>IP</strong>和<strong>端口</strong>，以及通信<strong>协议</strong>）信息定位到唯一一条连接。</p><figure><img src="https://cdn.xiaobaidebug.top/五元组.drawio.png" alt="五元组" tabindex="0" loading="lazy"><figcaption>五元组</figcaption></figure><p>然后对五元组信息生成哈希键，让同一个哈希键的数据走同一条路径，问题就完美解决了。</p><figure><img src="https://cdn.xiaobaidebug.top/五元组映射成hash键.drawio.png" alt="五元组映射成hash键" tabindex="0" loading="lazy"><figcaption>五元组映射成hash键</figcaption></figure><figure><img src="https://cdn.xiaobaidebug.top/根据五元组选择ECMP路径.3.png" alt="根据五元组选择ECMP路径" tabindex="0" loading="lazy"><figcaption>根据五元组选择ECMP路径</figcaption></figure><br><h2 id="tcp-和-ping-走的网络路径一样吗" tabindex="-1"><a class="header-anchor" href="#tcp-和-ping-走的网络路径一样吗"><span>TCP 和 Ping 走的网络路径一样吗</span></a></h2><p>现在我们回到文章开头的问题。</p><p>对于同样的发送端和接收端，<strong>TCP 和 Ping 走的网络路径一样吗？</strong></p><p>不一定一样，因为<strong>五元组</strong>里的信息里有一项是<strong>通信协议</strong>。ping 用的是<strong>ICMP 协议</strong>，跟<strong>TCP 协议</strong>不同，并且 ping 不需要用到端口，所以五元组不同，生成的<strong>哈希键不同</strong>，通过 ECMP 选择到的路径也可能不同。</p><figure><img src="https://cdn.xiaobaidebug.top/TCP和ping的五元组差异.drawio.png" alt="TCP和ping的五元组差异" tabindex="0" loading="lazy"><figcaption>TCP和ping的五元组差异</figcaption></figure><br><h2 id="同样都用-tcp-协议-数据包走的网络路径一样吗" tabindex="-1"><a class="header-anchor" href="#同样都用-tcp-协议-数据包走的网络路径一样吗"><span>同样都用 TCP 协议，数据包走的网络路径一样吗</span></a></h2><p>还是同样的发送端和接收端，同样是 TCP 协议，不同 TCP 连接走的网络路径是一样的吗？</p><p>跟上面的问题一样，其实<strong>还是五元组的问题</strong>，同样都是 TCP 协议，对于同样的发送端和接收端，他们的 IP 和接收端的端口肯定是一样的，但<strong>发送方的端口是可以随时变化</strong>的，因此通过 ECMP 走的路径也可能不同。</p><figure><img src="https://cdn.xiaobaidebug.top/不同TCP连接的五元组差异.drawio.png" alt="不同TCP连接的五元组差异" tabindex="0" loading="lazy"><figcaption>不同TCP连接的五元组差异</figcaption></figure><br><p>但问题又来了。</p><p><strong>我知道这个有什么用呢？我做业务开发，又没有设置网络路由的权限。</strong></p><br><h2 id="利用这个知识点排查问题" tabindex="-1"><a class="header-anchor" href="#利用这个知识点排查问题"><span>利用这个知识点排查问题</span></a></h2><p>对于业务开发，这绝对不是个没用的知识点。</p><p>如果某天，你发现，你能 ping 通目的机器，但用 TCP 去连，却<strong>偶尔连不上</strong>目的机器。而且两端机器都挺空闲，没什么性能上的瓶颈。实在<strong>走投无路</strong>了。</p><p>你就可以想想，会不会是网络中用到了<code>ECMP</code>，其中一条链路有问题导致的。</p><figure><img src="https://cdn.xiaobaidebug.top/ping能成功但部分TCP连接失败.drawio.png" alt="ping能成功但部分TCP连接失败" tabindex="0" loading="lazy"><figcaption>ping能成功但部分TCP连接失败</figcaption></figure><p>排查方法也很简单。</p><p>你是知道本机的 IP 以及目的机器的 IP 和端口号的，也知道自己用的是 TCP 连接。</p><p>只要你在<strong>报错的时候打印下错误信息，你就知道了发送端的端口号了。</strong></p><p>这样<strong>五元组</strong>是啥你就知道了。</p><p>下一步就是<strong>指定发送端的端口号重新发起 TCP 请求，同样的五元组，走同样的路径，按理说如果链路有问题，就肯定会复现。</strong></p><p>如果不想改自己的代码，你可以用<strong>nc 命令指定客户端端口</strong>看下能不能正常建立 TCP 连接。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nc</span> <span class="token parameter variable">-p</span> <span class="token number">6666</span> baidu.com <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-p 6666</code>是指定发出请求的客户端端口是<code>6666</code>，后面跟着的是<strong>连接的域名</strong>和<strong>80 端口</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image-20220805141757559.png" alt="通过nc成功建立tcp连接" tabindex="0" loading="lazy"><figcaption>通过nc成功建立tcp连接</figcaption></figure><p>假设用了<code>6666端口</code>的五元组去连接<strong>总是失败</strong>，改用<code>6667或其他端口</code><strong>却能成功</strong>，你可以带着这个信息去找找负责网络的同事。</p><br><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>路由器可以通过 OSPF 协议生成路由表，利用数据包里的 IP 地址去跟路由表做匹配，选择最优路径后进行转发。</li><li>当路由表一个都匹配不上时会走默认网关。当匹配上多个的时候，会先看<strong>匹配长度</strong>，如果一样就看<strong>管理距离</strong>，还一样就看<strong>路径成本</strong>。如果连路径成本都一样，那<strong>等价路径</strong>。如果路由开启了 ECMP，那就可以同时利用这几条路径做传输。</li><li>ECMP 可以提高链路带宽，同时利用五元组做哈希键进行路径选择，保证了同一条连接的数据包走同一条路径，减少了乱序的情况。</li><li>可以通过 traceroute 命令查看到链路上是否有用到 ECMP 的情况。</li><li>开启了 ECMP 的网络链路中，TCP 和 ping 命令可能走的路径不同，甚至同样是 TCP，不同连接之间，走的路径也不同，因此出现了连接时好时坏的问题，实在是走投无路了，可以考虑下是不是跟 ECMP 有关。</li><li>当然，<strong>遇到问题多怀疑自己，要相信绝大部分时候真的跟 ECMP 无关</strong>。</li></ul><br><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>《网络排查案例课》 ——极客时间</p><br><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>兄弟们。</p><p>按照惯例，我应该在这里唯唯诺诺的求大家叫我两声<strong>靓仔</strong>的。</p><p>但我今天不想。</p><p>因为越是这样，评论区里叫我 diao 毛的兄弟就越多。</p><p><strong>上海快 40° 的天气，你们竟然能说出如此冰冷的话。</strong></p><p>但是。</p><p>只要你们还能给我文章右下角来个<strong>点赞和在看</strong>的话。</p><p>这口气，我还能忍。</p><br><h5 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h5><p><strong>点击</strong>下方名片，关注公众号:【小白 debug】<br><img src="https://cdn.xiaobaidebug.top/1696069689495.png" alt="" loading="lazy"></p><br><p>不满足于在留言区说骚话？</p><p>加我，我们建了个划水吹牛皮群，在群里，你可以跟你下次跳槽可能遇到的同事或面试官聊点有意思的话题。就<strong>超！开！心！</strong></p><img src="https://cdn.xiaobaidebug.top/image-20220522162616202.png" alt="" style="zoom:50%;"><figure><img src="https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi-20220806162638482.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>`,150),B={href:"https://www.xiaobaidebug.top/2022/07/19/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/%E6%97%A2%E7%84%B6%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89RPC%E5%8D%8F%E8%AE%AE%EF%BC%9F/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.xiaobaidebug.top/2021/03/26/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/TCP%E7%B2%98%E5%8C%85%EF%BC%81%E6%95%B0%E6%8D%AE%E5%8C%85%EF%BC%9A%E6%88%91%E5%8F%AA%E6%98%AF%E7%8A%AF%E4%BA%86%E6%AF%8F%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E9%83%BD%E4%BC%9A%E7%8A%AF%E7%9A%84%E9%94%99%EF%BC%8C%E7%A1%AC%E6%A0%B8%E5%9B%BE%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.xiaobaidebug.top/2021/05/25/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%EF%BC%81%E6%97%A2%E7%84%B6IP%E5%B1%82%E4%BC%9A%E5%88%86%E7%89%87%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88TCP%E5%B1%82%E4%B9%9F%E8%BF%98%E8%A6%81%E5%88%86%E6%AE%B5%EF%BC%9F/",target:"_blank",rel:"noopener noreferrer"};function A(m,C){const o=p("ExternalLinkIcon");return g(),r("div",null,[t("blockquote",null,[t("p",null,[n("文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub "),t("a",E,[n("https://github.com/xiaobaiTech/golangFamily"),e(o)]),n(" , 有大厂面试完整考点和成长路线，欢迎 Star。")])]),c,t("p",null,[n("我之前写过一篇"),t("a",d,[n("《断网了，还能 ping 通 127.0.0.1 吗？》"),e(o)]),n(",里面提到过"),l,n("。")]),h,t("ul",null,[t("li",null,[t("a",B,[n("既然有 HTTP 协议，为什么还要有 RPC"),e(o)])]),t("li",null,[t("a",b,[n("TCP 粘包 数据包：我只是犯了每个数据包都会犯的错 |硬核图解"),e(o)])]),t("li",null,[t("a",u,[n("动图图解！既然 IP 层会分片，为什么 TCP 层也还要分段？"),e(o)])])])])}const x=i(s,[["render",A],["__file","能ping通，就代表TCP一定能连通吗？.html.vue"]]),F=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%83%BDping%E9%80%9A%EF%BC%8C%E5%B0%B1%E4%BB%A3%E8%A1%A8TCP%E4%B8%80%E5%AE%9A%E8%83%BD%E8%BF%9E%E9%80%9A%E5%90%97%EF%BC%9F.html","title":"能ping通，TCP就一定能连通吗？","lang":"zh-CN","frontmatter":{"title":"能ping通，TCP就一定能连通吗？","date":"2022-08-18T22:57:55.000Z","tags":null,"categories":"图解网络","description":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 平时，我们想要知道，自己的机器到目的机器之间，网络通不通，一般会执行ping 命令。 一般对于状...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%83%BDping%E9%80%9A%EF%BC%8C%E5%B0%B1%E4%BB%A3%E8%A1%A8TCP%E4%B8%80%E5%AE%9A%E8%83%BD%E8%BF%9E%E9%80%9A%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"能ping通，TCP就一定能连通吗？"}],["meta",{"property":"og:description","content":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 平时，我们想要知道，自己的机器到目的机器之间，网络通不通，一般会执行ping 命令。 一般对于状..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/ping%E6%AD%A3%E5%B8%B8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-19T03:57:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"能ping通，TCP就一定能连通吗？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:published_time","content":"2022-08-18T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-19T03:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"能ping通，TCP就一定能连通吗？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/ping%E6%AD%A3%E5%B8%B8.png\\",\\"https://cdn.xiaobaidebug.top/ping%E4%B8%8D%E9%80%9A.png\\",\\"https://cdn.xiaobaidebug.top/ping%E5%92%8C%E6%99%AE%E9%80%9A%E5%8F%91%E6%B6%88%E6%81%AF%E7%9A%84%E5%85%B3%E7%B3%BB67.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E4%BA%94%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%B6%88%E6%81%AF%E4%BD%93%E5%8F%98%E5%8C%96%E5%88%86%E6%9E%90.png\\",\\"https://cdn.xiaobaidebug.top/%E8%B7%AF%E7%94%B1%E5%99%A8%E6%9E%84%E6%88%90%E7%9A%84%E7%BD%91%E7%BB%9C.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84Dijkstra.drawio.png\\",\\"https://cdn.xiaobaidebug.top/route2.png\\",\\"https://cdn.xiaobaidebug.top/%E8%B7%AF%E7%94%B1%E4%BA%92%E8%81%94%E6%97%B6%E6%96%B0%E7%89%88.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image-20220805122619206.png\\",\\"https://cdn.xiaobaidebug.top/%E6%B2%A1%E6%9C%89ECMP%E6%97%B6%E5%8F%AA%E8%83%BD%E9%80%89%E6%8B%A9%E6%9F%90%E4%B8%80%E6%9D%A1%E8%B7%AF%E5%BE%84.drawio4.png\\",\\"https://cdn.xiaobaidebug.top/%E5%88%A9%E7%94%A8ECMP%E5%8F%AF%E4%BB%A5%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E4%B8%A4%E6%9D%A1%E9%93%BE%E8%B7%AF.drawi3o.png\\",\\"https://cdn.xiaobaidebug.top/%E4%B9%B1%E5%BA%8F%E9%98%9F%E5%88%97%E7%AD%89%E5%BE%85%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E5%88%B0%E6%9D%A5.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E4%BA%94%E5%85%83%E7%BB%84.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E4%BA%94%E5%85%83%E7%BB%84%E6%98%A0%E5%B0%84%E6%88%90hash%E9%94%AE.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E6%A0%B9%E6%8D%AE%E4%BA%94%E5%85%83%E7%BB%84%E9%80%89%E6%8B%A9ECMP%E8%B7%AF%E5%BE%84.3.png\\",\\"https://cdn.xiaobaidebug.top/TCP%E5%92%8Cping%E7%9A%84%E4%BA%94%E5%85%83%E7%BB%84%E5%B7%AE%E5%BC%82.drawio.png\\",\\"https://cdn.xiaobaidebug.top/%E4%B8%8D%E5%90%8CTCP%E8%BF%9E%E6%8E%A5%E7%9A%84%E4%BA%94%E5%85%83%E7%BB%84%E5%B7%AE%E5%BC%82.drawio.png\\",\\"https://cdn.xiaobaidebug.top/ping%E8%83%BD%E6%88%90%E5%8A%9F%E4%BD%86%E9%83%A8%E5%88%86TCP%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5.drawio.png\\",\\"https://cdn.xiaobaidebug.top/image-20220805141757559.png\\",\\"https://cdn.xiaobaidebug.top/1696069689495.png\\",\\"https://cdn.xiaobaidebug.top/006APoFYly1g5q9gn2jipg308w08wqdi-20220806162638482.gif\\"],\\"datePublished\\":\\"2022-08-18T22:57:55.000Z\\",\\"dateModified\\":\\"2024-02-19T03:57:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%83%BDping%E9%80%9A%EF%BC%8C%E5%B0%B1%E4%BB%A3%E8%A1%A8TCP%E4%B8%80%E5%AE%9A%E8%83%BD%E8%BF%9E%E9%80%9A%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%83%BDping%E9%80%9A%EF%BC%8C%E5%B0%B1%E4%BB%A3%E8%A1%A8TCP%E4%B8%80%E5%AE%9A%E8%83%BD%E8%BF%9E%E9%80%9A%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"能ping通，TCP就一定能连通吗？"}],["meta",{"property":"og:description","content":" 文章持续更新，可以微信搜一搜「小白 debug」第一时间阅读，回复【面试】获面试题集。本文已经收录在 GitHub https://github.com/xiaobaiTech/golangFamily , 有大厂面试完整考点和成长路线，欢迎 Star。 平时，我们想要知道，自己的机器到目的机器之间，网络通不通，一般会执行ping 命令。 一般对于状..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-19T03:57:35.000Z"}],["meta",{"property":"article:published_time","content":"2022-08-18T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-19T03:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"能ping通，TCP就一定能连通吗？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-18T22:57:55.000Z\\",\\"dateModified\\":\\"2024-02-19T03:57:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"网络路径","slug":"网络路径","link":"#网络路径","children":[]},{"level":2,"title":"路径由什么决定？","slug":"路径由什么决定","link":"#路径由什么决定","children":[{"level":3,"title":"路由表的生成","slug":"路由表的生成","link":"#路由表的生成","children":[]},{"level":3,"title":"路由表决定数据包路径","slug":"路由表决定数据包路径","link":"#路由表决定数据包路径","children":[]},{"level":3,"title":"路由表的匹配规则","slug":"路由表的匹配规则","link":"#路由表的匹配规则","children":[]},{"level":3,"title":"ECMP 有什么用","slug":"ecmp-有什么用","link":"#ecmp-有什么用","children":[]},{"level":3,"title":"乱序会有什么问题？","slug":"乱序会有什么问题","link":"#乱序会有什么问题","children":[]},{"level":3,"title":"ECMP 的路径选择策略","slug":"ecmp-的路径选择策略","link":"#ecmp-的路径选择策略","children":[]}]},{"level":2,"title":"TCP 和 Ping 走的网络路径一样吗","slug":"tcp-和-ping-走的网络路径一样吗","link":"#tcp-和-ping-走的网络路径一样吗","children":[]},{"level":2,"title":"同样都用 TCP 协议，数据包走的网络路径一样吗","slug":"同样都用-tcp-协议-数据包走的网络路径一样吗","link":"#同样都用-tcp-协议-数据包走的网络路径一样吗","children":[]},{"level":2,"title":"利用这个知识点排查问题","slug":"利用这个知识点排查问题","link":"#利用这个知识点排查问题","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1708315055000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1}]},"readingTime":{"minutes":16.46,"words":4938},"filePathRelative":"计算机基础/网络基础/核心知识点/能ping通，就代表TCP一定能连通吗？.md","localizedDate":"2022年8月18日","autoDesc":true}');export{x as comp,F as data};
