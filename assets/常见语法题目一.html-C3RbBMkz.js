import{_ as o,c,a as e,b as s,d as a,e as p,r as i,o as l}from"./app-DC6Jj10o.js";const u={},r={href:"https://golang.org/ref/spec#Type_switches",target:"_blank",rel:"noopener noreferrer"},d={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function g(b,n){const t=i("ExternalLinkIcon");return l(),c("div",null,[n[12]||(n[12]=e(`<h1 id="常见语法题目-一" tabindex="-1"><a class="header-anchor" href="#常见语法题目-一"><span>常见语法题目 一</span></a></h1><h3 id="_1、下面代码能运行吗-为什么。" tabindex="-1"><a class="header-anchor" href="#_1、下面代码能运行吗-为什么。"><span>1、下面代码能运行吗？为什么。</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Param <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> Show <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Param
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Show<span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>Param<span class="token punctuation">[</span><span class="token string">&quot;RMB&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong></p><p>共发现两个问题：</p><ol><li><code>main</code> 函数不能加数字。</li><li><code>new</code> 关键字无法初始化 <code>Show</code> 结构体中的 <code>Param</code> 属性，所以直接对 <code>s.Param</code> 操作会出错。</li></ol><h3 id="_2、请说出下面代码存在什么问题。" tabindex="-1"><a class="header-anchor" href="#_2、请说出下面代码存在什么问题。"><span>2、请说出下面代码存在什么问题。</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">zhoujielun</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> msg <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token operator">*</span>student<span class="token punctuation">,</span> student<span class="token punctuation">:</span>
		msg<span class="token punctuation">.</span>Name
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p>golang中有规定，<code>switch type</code>的<code>case T1</code>，类型列表只有一个，那么<code>v := m.(type)</code>中的<code>v</code>的类型就是T1类型。</p><p>如果是<code>case T1, T2</code>，类型列表中有多个，那<code>v</code>的类型还是多对应接口的类型，也就是<code>m</code>的类型。</p>`,11)),s("p",null,[n[1]||(n[1]=a("所以这里")),n[2]||(n[2]=s("code",null,"msg",-1)),n[3]||(n[3]=a("的类型还是")),n[4]||(n[4]=s("code",null,"interface{}",-1)),n[5]||(n[5]=a("，所以他没有")),n[6]||(n[6]=s("code",null,"Name",-1)),n[7]||(n[7]=a("这个字段，编译阶段就会报错。具体解释见： ")),s("a",r,[n[0]||(n[0]=a("https://golang.org/ref/spec#Type_switches")),p(t)])]),n[13]||(n[13]=e(`<h3 id="_3、写出打印的结果。" tabindex="-1"><a class="header-anchor" href="#_3、写出打印的结果。"><span>3、写出打印的结果。</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	js <span class="token operator">:=</span> <span class="token string">\`{
		&quot;name&quot;:&quot;11&quot;
	}\`</span>
	<span class="token keyword">var</span> p People
	err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;err: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;people: &quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p>按照 golang 的语法，小写开头的方法、属性或 <code>struct</code> 是私有的，同样，在<code>json</code> 解码或转码的时候也无法上线私有属性的转换。</p><p>题目中是无法正常得到<code>People</code>的<code>name</code>值的。而且，私有属性<code>name</code>也不应该加<code>json</code>的标签。</p><h3 id="_4、下面的代码是有问题的-请说明原因。" tabindex="-1"><a class="header-anchor" href="#_4、下面的代码是有问题的-请说明原因。"><span>4、下面的代码是有问题的，请说明原因。</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>People<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;print: %v&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 	p <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>
	p<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p>在golang中<code>String() string</code> 方法实际上是实现了<code>String</code>的接口的，该接口定义在<code>fmt/print.go</code> 中：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Stringer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用 <code>fmt</code> 包中的打印方法时，如果类型实现了这个接口，会直接调用。而题目中打印 <code>p</code> 的时候会直接调用 <code>p</code> 实现的 <code>String()</code> 方法，然后就产生了循环调用。</p><h3 id="_5、请找出下面代码的问题所在。" tabindex="-1"><a class="header-anchor" href="#_5、请找出下面代码的问题所在。"><span>5、请找出下面代码的问题所在。</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
			ch <span class="token operator">&lt;-</span> i
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			a<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch
			<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">}</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;a: &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p>在 golang 中 <code>goroutine</code> 的调度时间是不确定的，在题目中，第一个写 <code>channel</code> 的 <code>goroutine</code> 可能还未调用，或已调用但没有写完时直接 <code>close</code> 管道，可能导致写失败，既然出现 <code>panic</code> 错误。</p><h3 id="_6、请说明下面代码书写是否正确。" tabindex="-1"><a class="header-anchor" href="#_6、请说明下面代码书写是否正确。"><span>6、请说明下面代码书写是否正确。</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> value <span class="token builtin">int32</span>

<span class="token keyword">func</span> <span class="token function">SetValue</span><span class="token punctuation">(</span>delta <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		v <span class="token operator">:=</span> value
		<span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token operator">+</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p><code>atomic.CompareAndSwapInt32</code> 函数不需要循环调用。</p><h3 id="_7、下面的程序运行后为什么会爆异常。" tabindex="-1"><a class="header-anchor" href="#_7、下面的程序运行后为什么会爆异常。"><span>7、下面的程序运行后为什么会爆异常。</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Project <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Project<span class="token punctuation">)</span> <span class="token function">deferError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;recover: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Project<span class="token punctuation">)</span> <span class="token function">exec</span><span class="token punctuation">(</span>msgchan <span class="token keyword">chan</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> msg <span class="token operator">:=</span> <span class="token keyword">range</span> msgchan <span class="token punctuation">{</span>
		m <span class="token operator">:=</span> msg<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;msg: &quot;</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Project<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span>msgchan <span class="token keyword">chan</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token keyword">defer</span> p<span class="token punctuation">.</span><span class="token function">deferError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> p<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>msgchan<span class="token punctuation">)</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Project<span class="token punctuation">)</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">{</span>
			a <span class="token operator">&lt;-</span> <span class="token string">&quot;1&quot;</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">100000000000000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Project<span class="token punctuation">)</span>
	p<span class="token punctuation">.</span><span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p>有一下几个问题：</p><ol><li><code>time.Sleep</code> 的参数数值太大，超过了 <code>1&lt;&lt;63 - 1</code> 的限制。</li><li><code>defer p.deferError()</code> 需要在协程开始出调用，否则无法捕获 <code>panic</code>。</li></ol><h3 id="_8、请说出下面代码哪里写错了" tabindex="-1"><a class="header-anchor" href="#_8、请说出下面代码哪里写错了"><span>8、请说出下面代码哪里写错了</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	abc <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		abc <span class="token operator">&lt;-</span> i
	<span class="token punctuation">}</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span>  a <span class="token operator">:=</span> <span class="token keyword">range</span> abc  <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;a: &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">close</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p>协程可能还未启动，管道就关闭了。</p><h3 id="_9、请说出下面代码-执行时为什么会报错" tabindex="-1"><a class="header-anchor" href="#_9、请说出下面代码-执行时为什么会报错"><span>9、请说出下面代码，执行时为什么会报错</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Student<span class="token punctuation">{</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;zhoujielun&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
	m<span class="token punctuation">[</span><span class="token string">&quot;people&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;wuyanzu&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p>map的value本身是不可寻址的，因为map中的值会在内存中移动，并且旧的指针地址在map改变时会变得无效。故如果需要修改map值，可以将<code>map</code>中的非指针类型<code>value</code>，修改为指针类型，比如使用<code>map[string]*Student</code>.</p><h3 id="_10、请说出下面的代码存在什么问题" tabindex="-1"><a class="header-anchor" href="#_10、请说出下面的代码存在什么问题"><span>10、请说出下面的代码存在什么问题？</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> query <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token function">exec</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> vs <span class="token operator">...</span>query<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
	fn <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ch <span class="token operator">&lt;-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> vs <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token function">fn</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">&lt;-</span>ch
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ret <span class="token operator">:=</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;111&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token string">&quot;func1&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token string">&quot;func2&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token string">&quot;func3&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token string">&quot;func4&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p>依据4个goroutine的启动后执行效率，很可能打印111func4，但其他的111func*也可能先执行，exec只会返回一条信息。</p><h3 id="_11、下面这段代码为什么会卡死" tabindex="-1"><a class="header-anchor" href="#_11、下面这段代码为什么会卡死"><span>11、下面这段代码为什么会卡死？</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;runtime&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token builtin">byte</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Dropping mic&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// Yield execution to force executing other goroutines</span>
    runtime<span class="token punctuation">.</span><span class="token function">Gosched</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析</strong>：</p><p>Golang 中，byte 其实被 alias 到 uint8 上了。所以上面的 for 循环会始终成立，因为 i++ 到 i=255 的时候会溢出，i &lt;= 255 一定成立。</p><p>也即是， for 循环永远无法退出，所以上面的代码其实可以等价于这样：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正在被执行的 goroutine 发生以下情况时让出当前 goroutine 的执行权，并调度后面的 goroutine 执行：</p><ul><li>IO 操作</li><li>Channel 阻塞</li><li>system call</li><li>运行较长时间</li></ul><p>如果一个 goroutine 执行时间太长，scheduler 会在其 G 对象上打上一个标志（ preempt），当这个 goroutine 内部发生函数调用的时候，会先主动检查这个标志，如果为 true 则会让出执行权。</p><p>main 函数里启动的 goroutine 其实是一个没有 IO 阻塞、没有 Channel 阻塞、没有 system call、没有函数调用的死循环。</p><p>也就是，它无法主动让出自己的执行权，即使已经执行很长时间，scheduler 已经标志了 preempt。</p><p>而 golang 的 GC 动作是需要所有正在运行 <code>goroutine</code> 都停止后进行的。因此，程序会卡在 <code>runtime.GC()</code> 等待所有协程退出。</p><h2 id="相关文章" tabindex="-1"><a class="header-anchor" href="#相关文章"><span>相关文章</span></a></h2>`,49)),s("ul",null,[s("li",null,[s("p",null,[s("a",d,[n[8]||(n[8]=a("golang进阶面试题八股文合集")),p(t)])])]),s("li",null,[s("p",null,[s("a",k,[n[9]||(n[9]=a("golang基础面试题八股文合集")),p(t)])])]),s("li",null,[s("p",null,[s("a",v,[n[10]||(n[10]=a("golang常用标准库第三方库大全")),p(t)])])]),s("li",null,[s("p",null,[s("a",m,[n[11]||(n[11]=a("golang学习路线")),p(t)])])])])])}const y=o(u,[["render",g],["__file","常见语法题目一.html.vue"]]),h=JSON.parse('{"path":"/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95%E9%A2%98%E7%9B%AE%E4%B8%80.html","title":"常见语法题目 一","lang":"zh-CN","frontmatter":{"description":"常见语法题目 一 1、下面代码能运行吗？为什么。 解析 共发现两个问题： main 函数不能加数字。 new 关键字无法初始化 Show 结构体中的 Param 属性，所以直接对 s.Param 操作会出错。 2、请说出下面代码存在什么问题。 解析： golang中有规定，switch type的case T1，类型列表只有一个，那么v := m.(t...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95%E9%A2%98%E7%9B%AE%E4%B8%80.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"常见语法题目 一"}],["meta",{"property":"og:description","content":"常见语法题目 一 1、下面代码能运行吗？为什么。 解析 共发现两个问题： main 函数不能加数字。 new 关键字无法初始化 Show 结构体中的 Param 属性，所以直接对 s.Param 操作会出错。 2、请说出下面代码存在什么问题。 解析： golang中有规定，switch type的case T1，类型列表只有一个，那么v := m.(t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T00:58:04.000Z"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-04-08T00:58:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见语法题目 一\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T00:58:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95%E9%A2%98%E7%9B%AE%E4%B8%80.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95%E9%A2%98%E7%9B%AE%E4%B8%80.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"常见语法题目 一"}],["meta",{"property":"og:description","content":"常见语法题目 一 1、下面代码能运行吗？为什么。 解析 共发现两个问题： main 函数不能加数字。 new 关键字无法初始化 Show 结构体中的 Param 属性，所以直接对 s.Param 操作会出错。 2、请说出下面代码存在什么问题。 解析： golang中有规定，switch type的case T1，类型列表只有一个，那么v := m.(t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T00:58:04.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-08T00:58:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见语法题目 一\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T00:58:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"1、下面代码能运行吗？为什么。","slug":"_1、下面代码能运行吗-为什么。","link":"#_1、下面代码能运行吗-为什么。","children":[]},{"level":3,"title":"2、请说出下面代码存在什么问题。","slug":"_2、请说出下面代码存在什么问题。","link":"#_2、请说出下面代码存在什么问题。","children":[]},{"level":3,"title":"3、写出打印的结果。","slug":"_3、写出打印的结果。","link":"#_3、写出打印的结果。","children":[]},{"level":3,"title":"4、下面的代码是有问题的，请说明原因。","slug":"_4、下面的代码是有问题的-请说明原因。","link":"#_4、下面的代码是有问题的-请说明原因。","children":[]},{"level":3,"title":"5、请找出下面代码的问题所在。","slug":"_5、请找出下面代码的问题所在。","link":"#_5、请找出下面代码的问题所在。","children":[]},{"level":3,"title":"6、请说明下面代码书写是否正确。","slug":"_6、请说明下面代码书写是否正确。","link":"#_6、请说明下面代码书写是否正确。","children":[]},{"level":3,"title":"7、下面的程序运行后为什么会爆异常。","slug":"_7、下面的程序运行后为什么会爆异常。","link":"#_7、下面的程序运行后为什么会爆异常。","children":[]},{"level":3,"title":"8、请说出下面代码哪里写错了","slug":"_8、请说出下面代码哪里写错了","link":"#_8、请说出下面代码哪里写错了","children":[]},{"level":3,"title":"9、请说出下面代码，执行时为什么会报错","slug":"_9、请说出下面代码-执行时为什么会报错","link":"#_9、请说出下面代码-执行时为什么会报错","children":[]},{"level":3,"title":"10、请说出下面的代码存在什么问题？","slug":"_10、请说出下面的代码存在什么问题","link":"#_10、请说出下面的代码存在什么问题","children":[]},{"level":3,"title":"11、下面这段代码为什么会卡死？","slug":"_11、下面这段代码为什么会卡死","link":"#_11、下面这段代码为什么会卡死","children":[]},{"level":2,"title":"相关文章","slug":"相关文章","link":"#相关文章","children":[]}],"git":{"createdTime":1710132137000,"updatedTime":1712537884000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":2},{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":5.08,"words":1523},"filePathRelative":"golang/核心知识点/常见语法题目一.md","localizedDate":"2024年3月11日","autoDesc":true}');export{y as comp,h as data};
