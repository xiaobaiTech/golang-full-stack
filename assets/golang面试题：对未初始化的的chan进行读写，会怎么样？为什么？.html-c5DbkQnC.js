import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-Bq6Ggxk4.js";const t={},o=e(`<figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8zNjlhMWU4Zi1lNWExLTQ1N2YtYmJmNy1iMjA1Yjc5NjlhYTAucG5n?x-oss-process=image/format,png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h1><p>对<strong>未初始化</strong>的的<code>chan</code>进行读写，会怎么样？<strong>为什么？</strong></p><h1 id="怎么答" tabindex="-1"><a class="header-anchor" href="#怎么答"><span>怎么答</span></a></h1><p>读写<strong>未初始化</strong>的<code>chan</code>都会<strong>阻塞</strong>。</p><h1 id="举例" tabindex="-1"><a class="header-anchor" href="#举例"><span>举例</span></a></h1><h4 id="_1-写未初始化的-chan" tabindex="-1"><a class="header-anchor" href="#_1-写未初始化的-chan"><span>1.写未初始化的 chan</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token comment">// 写未初始化的chan</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span>
	c <span class="token operator">&lt;-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 输出结果</span>
fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span>

goroutine <span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">chan</span> send <span class="token punctuation">(</span><span class="token boolean">nil</span> <span class="token keyword">chan</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">/</span>Users<span class="token operator">/</span>admin18<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>repos<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span> <span class="token operator">+</span><span class="token number">0x36</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这个<code>chan send (nil chan)</code>，待会会提到。</p><h4 id="_2-写读未初始化的-chan" tabindex="-1"><a class="header-anchor" href="#_2-写读未初始化的-chan"><span>2.写读未初始化的 chan</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>
<span class="token comment">// 读未初始化的chan</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span>
	num<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;读chan的协程结束, num=%v, ok=%v\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 输出结果</span>
fatal <span class="token builtin">error</span><span class="token punctuation">:</span> all goroutines are asleep <span class="token operator">-</span> deadlock<span class="token operator">!</span>

goroutine <span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">chan</span> receive <span class="token punctuation">(</span><span class="token boolean">nil</span> <span class="token keyword">chan</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">/</span>Users<span class="token operator">/</span>admin18<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>src<span class="token operator">/</span>repos<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">6</span> <span class="token operator">+</span><span class="token number">0x46</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这个<code>chan receive (nil chan)</code>，待会也会提到。</p><h1 id="多问一句" tabindex="-1"><a class="header-anchor" href="#多问一句"><span>多问一句</span></a></h1><p>关于<code>chan</code>的面试题非常多，这个是比较常见的其中一个。但多问一句：<strong>为什么对未初始化的<code>chan</code>就会阻塞呢？</strong></p><p><strong>1.对于写的情况</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//在 src/runtime/chan.go中</span>
<span class="token keyword">func</span> <span class="token function">chansend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">,</span> callerpc <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      <span class="token comment">// 不能阻塞，直接返回 false，表示未发送成功</span>
      <span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
      <span class="token function">gopark</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> waitReasonChanSendNilChan<span class="token punctuation">,</span> traceEvGoStop<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;unreachable&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
  <span class="token comment">// 省略其他逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>未初始化的<code>chan</code>此时是等于<code>nil</code>，当它不能阻塞的情况下，直接返回 <code>false</code>，表示写 <code>chan</code> 失败</li><li>当<code>chan</code>能阻塞的情况下，则直接阻塞 <code>gopark(nil, nil, waitReasonChanSendNilChan, traceEvGoStop, 2) </code>, 然后调用<code>throw(s string)</code>抛出错误,其中<code>waitReasonChanSendNilChan</code>就是刚刚提到的报错<code>&quot;chan send (nil chan)&quot;</code></li></ul><p><strong>2. 对于读的情况</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//在 src/runtime/chan.go中</span>
<span class="token keyword">func</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span> ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> block <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>selected<span class="token punctuation">,</span> received <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//省略逻辑...</span>
    <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>block <span class="token punctuation">{</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token function">gopark</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> waitReasonChanReceiveNilChan<span class="token punctuation">,</span> traceEvGoStop<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&quot;unreachable&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//省略逻辑...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>未初始化的<code>chan</code>此时是等于<code>nil</code>，当它不能阻塞的情况下，直接返回 <code>false</code>，表示读 <code>chan</code> 失败</li><li>当<code>chan</code>能阻塞的情况下，则直接阻塞 <code>gopark(nil, nil, waitReasonChanReceiveNilChan, traceEvGoStop, 2) </code>, 然后调用<code>throw(s string)</code>抛出错误,其中<code>waitReasonChanReceiveNilChan</code>就是刚刚提到的报错<code>&quot;chan receive (nil chan)&quot;</code></li></ul>`,22),c=[o];function p(i,l){return a(),s("div",null,c)}const d=n(t,[["render",p],["__file","golang面试题：对未初始化的的chan进行读写，会怎么样？为什么？.html.vue"]]),k=JSON.parse('{"path":"/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%AF%B9%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E7%9A%84chan%E8%BF%9B%E8%A1%8C%E8%AF%BB%E5%86%99%EF%BC%8C%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F.html","title":"golang面试题：对未初始化的的chan进行读写，会怎么样？为什么？","lang":"zh-CN","frontmatter":{"title":"golang面试题：对未初始化的的chan进行读写，会怎么样？为什么？","date":"2020-06-11T22:57:55.000Z","tags":null,"categories":"golang面试题","description":" 问题 对未初始化的的chan进行读写，会怎么样？为什么？ 怎么答 读写未初始化的chan都会阻塞。 举例 1.写未初始化的 chan 注意这个chan send (nil chan)，待会会提到。 2.写读未初始化的 chan 注意这个chan receive (nil chan)，待会也会提到。 多问一句 关于chan的面试题非常多，这个是比较常见...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/golang%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E5%AF%B9%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E7%9A%84chan%E8%BF%9B%E8%A1%8C%E8%AF%BB%E5%86%99%EF%BC%8C%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"golang面试题：对未初始化的的chan进行读写，会怎么样？为什么？"}],["meta",{"property":"og:description","content":" 问题 对未初始化的的chan进行读写，会怎么样？为什么？ 怎么答 读写未初始化的chan都会阻塞。 举例 1.写未初始化的 chan 注意这个chan send (nil chan)，待会会提到。 2.写读未初始化的 chan 注意这个chan receive (nil chan)，待会也会提到。 多问一句 关于chan的面试题非常多，这个是比较常见..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8zNjlhMWU4Zi1lNWExLTQ1N2YtYmJmNy1iMjA1Yjc5NjlhYTAucG5n?x-oss-process=image/format,png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-19T04:05:40.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"golang面试题：对未初始化的的chan进行读写，会怎么样？为什么？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:published_time","content":"2020-06-11T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-19T04:05:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"golang面试题：对未初始化的的chan进行读写，会怎么样？为什么？\\",\\"image\\":[\\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8zNjlhMWU4Zi1lNWExLTQ1N2YtYmJmNy1iMjA1Yjc5NjlhYTAucG5n?x-oss-process=image/format,png\\"],\\"datePublished\\":\\"2020-06-11T22:57:55.000Z\\",\\"dateModified\\":\\"2024-02-19T04:05:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"]]},"headers":[],"git":{"createdTime":1708315540000,"updatedTime":1708315540000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":1}]},"readingTime":{"minutes":1.82,"words":546},"filePathRelative":"golang/核心知识点/golang面试题：对未初始化的的chan进行读写，会怎么样？为什么？.md","localizedDate":"2020年6月11日","autoDesc":true}');export{d as comp,k as data};
