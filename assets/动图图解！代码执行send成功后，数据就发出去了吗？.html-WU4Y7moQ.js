import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,b as a,d as t,e as i}from"./app-DYlHDzk5.js";const l={},r=i(`<p>今天又是被倾盆的需求淹没的一天。</p><figure><img src="https://cdn.xiaobaidebug.top/image/8e7e47794e20a373.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有没有人知道，那种“<strong>我用 3 句话，就让产品为我砍了 18 个需求</strong>”的鸡汤课在哪报名，想报。</p><p>&quot;<strong>听懂掌声</strong>&quot;的那种课就算了，太费手了。</p><figure><img src="https://cdn.xiaobaidebug.top/image/2b1dc921fecd27e1.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>扯远了，回到我们今天的正题，我们了解下这篇文的目录。</p><figure><img src="https://cdn.xiaobaidebug.top/image/send目录.png" alt="目录" tabindex="0" loading="lazy"><figcaption>目录</figcaption></figure><p>代码执行 send 成功后，数据就发出去了吗？</p><p>回答这个问题之前，需要了解什么是<strong>Socket 缓冲区</strong>。</p><br><h1 id="socket-缓冲区" tabindex="-1"><a class="header-anchor" href="#socket-缓冲区"><span>Socket 缓冲区</span></a></h1><h2 id="什么是-socket-缓冲区" tabindex="-1"><a class="header-anchor" href="#什么是-socket-缓冲区"><span>什么是 socket 缓冲区</span></a></h2><p>编程的时候，如果要跟某个 IP 建立连接，我们需要调用操作系统提供的 <code>socket API</code>。</p><p><strong>socket</strong> 在操作系统层面，可以理解为一个<strong>文件</strong>。</p><p>我们可以对这个文件进行一些<strong>方法操作</strong>。</p><p>用<code>listen</code>方法，可以让程序作为服务器<strong>监听</strong>其他客户端的连接。</p><p>用<code>connect</code>，可以作为客户端<strong>连接</strong>服务器。</p><p>用<code>send</code>或<code>write</code>可以<strong>发送</strong>数据，<code>recv</code>或<code>read</code>可以<strong>接收</strong>数据。</p><p>在建立好连接之后，这个 <strong>socket</strong> 文件就像是远端机器的 <strong>&quot;代理人&quot;</strong> 一样。比如，如果我们想给远端服务发点什么东西，那就只需要对这个文件执行写操作就行了。</p><figure><img src="https://cdn.xiaobaidebug.top/image/socket_api.png" alt="socket_api" tabindex="0" loading="lazy"><figcaption>socket_api</figcaption></figure><p>那写到了这个文件之后，剩下的发送工作自然就是由操作系统<strong>内核</strong>来完成了。</p><p>既然是写给操作系统，那操作系统就需要<strong>提供一个地方给用户写</strong>。同理，接收消息也是一样。</p><p>这个地方就是 <strong>socket 缓冲区</strong>。</p><p>用户<strong>发送</strong>消息的时候写给 send buffer（发送缓冲区）。</p><p>用户<strong>接收</strong>消息的时候，是从 recv buffer（接收缓冲区）中读取数据。</p><p>也就是说<strong>一个 socket ，会带有两个缓冲区</strong>，一个用于发送，一个用于接收。因为这是个先进先出的结构，有时候也叫它们<strong>发送、接收队列</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/一个socket有两个缓冲区.png" alt="一个socket有两个缓冲区" tabindex="0" loading="lazy"><figcaption>一个socket有两个缓冲区</figcaption></figure><br><h3 id="怎么观察-socket-缓冲区" tabindex="-1"><a class="header-anchor" href="#怎么观察-socket-缓冲区"><span>怎么观察 socket 缓冲区</span></a></h3><p>如果想要查看 socket 缓冲区，可以在 linux 环境下执行 <code>netstat -nt</code> 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># netstat -nt</span>
Active Internet connections <span class="token punctuation">(</span>w/o servers<span class="token punctuation">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        <span class="token number">0</span>     <span class="token number">60</span> <span class="token number">172.22</span>.66.69:22         <span class="token number">122.14</span>.220.252:59889    ESTABLISHED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这上面表明了，这里有一个协议（Proto）类型为 TCP 的连接，同时还有本地（Local Address）和远端（Foreign Address）的 IP 信息，状态（State）是已连接。</p><p>还有<strong>Send-Q 是发送缓冲区</strong>，下面的数字 60 是指，当前还有 60 Byte 在发送缓冲区中未发送。而 <strong>Recv-Q 代表接收缓冲区</strong>， 此时是空的，数据都被应用进程接收干净了。</p><br><h1 id="tcp-部分" tabindex="-1"><a class="header-anchor" href="#tcp-部分"><span>TCP 部分</span></a></h1><p>我们在使用 TCP 建立连接之后，一般会使用 send 发送数据。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 创建socket</span>
    sockfd<span class="token operator">=</span><span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 建立连接</span>
    <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> 服务器ip信息<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 执行 send 发送消息</span>
    <span class="token function">send</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 关闭 socket</span>
    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一段伪代码，仅用于展示大概逻辑，我们在建立好连接后，一般会在代码中执行 <code>send</code> 方法。那么此时，消息就会被立刻发到对端机器吗？</p><br><h2 id="执行-send-发送的字节-会立马发送吗" tabindex="-1"><a class="header-anchor" href="#执行-send-发送的字节-会立马发送吗"><span>执行 send 发送的字节，会立马发送吗？</span></a></h2><p>答案是不确定！执行 send 之后，数据只是拷贝到了 socket 缓冲区。至于什么时候会发数据，发多少数据，<strong>全听操作系统安排</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/tcp_sendmsg逻辑3.png" alt="tcp_sendmsg逻辑" tabindex="0" loading="lazy"><figcaption>tcp_sendmsg逻辑</figcaption></figure><p>在用户进程中，程序通过操作 socket 会从用户态进入内核态，而 send 方法会将数据一路传到传输层。在识别到是 TCP 协议后，会调用 tcp_sendmsg 方法。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// net/ipv4/tcp.c</span>
<span class="token comment">// 以下省略了大量逻辑</span>
<span class="token keyword">int</span> <span class="token function">tcp_sendmsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 如果还有可以放数据的空间</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">skb_availroom</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 尝试拷贝待发送数据到发送缓冲区</span>
    err <span class="token operator">=</span> <span class="token function">skb_add_data_nocache</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> from<span class="token punctuation">,</span> copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 下面是尝试发送的逻辑代码,先省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 tcp_sendmsg 中， 核心工作就是将待发送的数据组织按照先后顺序放入到发送缓冲区中， 然后根据实际情况（比如拥塞窗口等）判断是否要发数据。如果不发送数据，那么此时直接返回。</p><br><h2 id="如果缓冲区满了会怎么办" tabindex="-1"><a class="header-anchor" href="#如果缓冲区满了会怎么办"><span>如果缓冲区满了会怎么办</span></a></h2><p>前面提到的情况里是，发送缓冲区有足够的空间，可以用于拷贝待发送数据。</p><h3 id="如果发送缓冲区空间不足-或者满了-执行发送-会怎么样" tabindex="-1"><a class="header-anchor" href="#如果发送缓冲区空间不足-或者满了-执行发送-会怎么样"><span>如果发送缓冲区空间不足，或者满了，执行发送，会怎么样？</span></a></h3><p>这里分两种情况。</p><p>首先，socket 在创建的时候，是可以设置是<strong>阻塞</strong>的还是<strong>非阻塞</strong>的。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM <span class="token operator">|</span> SOCK_NONBLOCK<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如通过上面的代码，就可以将 <code>socket</code> 设置为<strong>非阻塞</strong> （<code>SOCK_NONBLOCK</code>）。</p><p>当发送缓冲区<strong>满了</strong>，如果还向 socket 执行 send</p><ul><li>如果此时 socket 是阻塞的，那么程序会在那<strong>干等、死等</strong>，直到释放出新的缓存空间，就继续把数据拷进去，然后<strong>返回</strong>。</li></ul><figure><img src="https://cdn.xiaobaidebug.top/image/send阻塞.gif" alt="send阻塞" tabindex="0" loading="lazy"><figcaption>send阻塞</figcaption></figure><ul><li>如果此时 socket 是非阻塞的，程序就会<strong>立刻返回</strong>一个 <code>EAGAIN</code> 错误信息，意思是 <code>Try again</code> , 现在缓冲区满了，你也别等了，待会再试一次。</li></ul><figure><img src="https://cdn.xiaobaidebug.top/image/send非阻塞.gif" alt="send非阻塞" tabindex="0" loading="lazy"><figcaption>send非阻塞</figcaption></figure><p>我们可以简单看下源码是怎么实现的。还是回到刚才的 <code>tcp_sendmsg</code> 发送方法中。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">tcp_sendmsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">skb_availroom</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ..如果有足够缓冲区就执行balabla</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果发送缓冲区没空间了，那就等到有空间，至于等的方式，分阻塞和非阻塞</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">sk_stream_wait_memory</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>timeo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> do_error<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里面提到的 <code>sk_stream_wait_memory</code> 会根据<code>socket</code>是否阻塞，来决定是<strong>一直等</strong>，还是<strong>等一会就返回</strong>。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sk_stream_wait_memory</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">*</span>timeo_p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 非阻塞模式时，会等到超时返回 EAGAIN</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>等待超时<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EAGAIN<span class="token punctuation">;</span>
     <span class="token comment">// 阻塞等待时，会等到发送缓冲区有足够的空间了，才跳出</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sk_stream_memory_free</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm_wait<span class="token punctuation">)</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="如果接收缓冲区为空-执行-recv-会怎么样" tabindex="-1"><a class="header-anchor" href="#如果接收缓冲区为空-执行-recv-会怎么样"><span>如果接收缓冲区为空，执行 recv 会怎么样？</span></a></h3><p>接收缓冲区也是类似的情况。</p><p>当接收缓冲区<strong>为空</strong>，如果还向 socket 执行 recv</p><ul><li>如果此时 socket 是阻塞的，那么程序会在那<strong>干等</strong>，直到接收缓冲区有数据，就会把数据从接收缓冲区拷贝到用户缓冲区，然后<strong>返回</strong>。</li></ul><figure><img src="https://cdn.xiaobaidebug.top/image/recv阻塞.gif" alt="recv阻塞" tabindex="0" loading="lazy"><figcaption>recv阻塞</figcaption></figure><ul><li>如果此时 socket 是非阻塞的，程序就会<strong>立刻返回</strong>一个 <code>EAGAIN</code> 错误信息。</li></ul><figure><img src="https://cdn.xiaobaidebug.top/image/recv非阻塞2.gif" alt="recv非阻塞" tabindex="0" loading="lazy"><figcaption>recv非阻塞</figcaption></figure><p>下面用一张图汇总一下，方便大家保存面试的时候用哈哈哈。</p><figure><img src="https://cdn.xiaobaidebug.top/image/socket.png" alt="socket读写缓冲区满了的情况汇总" tabindex="0" loading="lazy"><figcaption>socket读写缓冲区满了的情况汇总</figcaption></figure><br><h2 id="如果-socket-缓冲区还有数据-执行-close-了-会怎么样" tabindex="-1"><a class="header-anchor" href="#如果-socket-缓冲区还有数据-执行-close-了-会怎么样"><span>如果 socket 缓冲区还有数据，执行 close 了，会怎么样？</span></a></h2><p>首先我们要知道，<strong>一般正常情况下，发送缓冲区和接收缓冲区 都应该是空的。</strong></p><p>如果发送、接收缓冲区长时间非空，说明有数据堆积，这往往是由于一些网络问题或用户应用层问题，导致数据没有正常处理。</p><p>正常情况下，如果 <code>socket</code> 缓冲区<strong>为空</strong>，执行 <code>close</code>。就会触发四次挥手。</p><figure><img src="https://cdn.xiaobaidebug.top/image/TCP四次挥手4.png" alt="TCP四次挥手" tabindex="0" loading="lazy"><figcaption>TCP四次挥手</figcaption></figure><p>这个也是面试老八股文内容了，<strong>这里我们只需要关注第一次挥手，发的是 <code>FIN</code> 就够了</strong>。</p><br><h3 id="如果接收缓冲区有数据时-执行-close-了-会怎么样" tabindex="-1"><a class="header-anchor" href="#如果接收缓冲区有数据时-执行-close-了-会怎么样"><span>如果接收缓冲区有数据时，执行 close 了，会怎么样？</span></a></h3><p><code>socket close</code> 时，主要的逻辑在 <code>tcp_close()</code> 里实现。</p><p>先说结论，关闭过程主要有两种情况：</p><ul><li>如果接收缓冲区<strong>还有数据未读</strong>，会先把接收缓冲区的数据清空，然后给对端发一个 RST。</li><li>如果接收缓冲区是<strong>空的</strong>，那么就调用 <code>tcp_send_fin()</code> 开始进行四次挥手过程的第一次挥手。</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">tcp_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 如果接收缓冲区有数据，那么清空数据</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>skb <span class="token operator">=</span> <span class="token function">__skb_dequeue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sk<span class="token operator">-&gt;</span>sk_receive_queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		u32 len <span class="token operator">=</span> <span class="token function">TCP_SKB_CB</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>end_seq <span class="token operator">-</span> <span class="token function">TCP_SKB_CB</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>seq <span class="token operator">-</span>
			  <span class="token function">tcp_hdr</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>fin<span class="token punctuation">;</span>
		data_was_unread <span class="token operator">+=</span> len<span class="token punctuation">;</span>
		<span class="token function">__kfree_skb</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span>data_was_unread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果接收缓冲区的数据被清空了，发 RST</span>
		<span class="token function">tcp_send_active_reset</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> sk<span class="token operator">-&gt;</span>sk_allocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcp_close_state</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 正常四次挥手， 发 FIN</span>
		<span class="token function">tcp_send_fin</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 等待关闭</span>
	<span class="token function">sk_stream_wait_close</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.xiaobaidebug.top/image/recvbuf非空.gif" alt="recvbuf非空" tabindex="0" loading="lazy"><figcaption>recvbuf非空</figcaption></figure><br><h3 id="如果发送缓冲区有数据时-执行-close-了-会怎么样" tabindex="-1"><a class="header-anchor" href="#如果发送缓冲区有数据时-执行-close-了-会怎么样"><span>如果发送缓冲区有数据时，执行 close 了，会怎么样？</span></a></h3><p>以前以为，这种情况下，内核会把发送缓冲区数据清空，然后四次挥手。</p><p>但是发现源码<strong>并不是这样的</strong>。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">tcp_send_fin</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 获得发送缓冲区的最后一块数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token operator">*</span>tskb <span class="token operator">=</span> <span class="token function">tcp_write_queue_tail</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">tcp_sock</span> <span class="token operator">*</span>tp <span class="token operator">=</span> <span class="token function">tcp_sk</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 如果发送缓冲区还有数据</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>tskb <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">tcp_send_head</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">sk_under_memory_pressure</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">TCP_SKB_CB</span><span class="token punctuation">(</span>tskb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>tcp_flags <span class="token operator">|=</span> TCPHDR_FIN<span class="token punctuation">;</span> <span class="token comment">// 把最后一块数据值为 FIN</span>
		<span class="token function">TCP_SKB_CB</span><span class="token punctuation">(</span>tskb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>end_seq<span class="token operator">++</span><span class="token punctuation">;</span>
		tp<span class="token operator">-&gt;</span>write_seq<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 发送缓冲区没有数据，就造一个FIN包</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 发送数据</span>
	<span class="token function">__tcp_push_pending_frames</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token function">tcp_current_mss</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">,</span> TCP_NAGLE_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，还有些数据没发出去，内核会把发送缓冲区最后一个数据块拿出来。然后置为 FIN。</p><p><code>socket</code> 缓冲区是个<strong>先进先出</strong>的队列，这种情况是指，内核会等待 TCP 层安静地把发送缓冲区数据都<strong>发完</strong>，最后再执行 四次挥手的第一次挥手（FIN 包）。</p><p>有一点需要注意的是，只有在<strong>接收缓冲区为空的前提下</strong>，我们才有可能走到 <code>tcp_send_fin()</code> 。而只有在进入了这个方法之后，我们才有可能考虑<strong>发送缓冲区是否为空</strong>的场景。</p><figure><img src="https://cdn.xiaobaidebug.top/image/sendbuf非空.gif" alt="sendbuf非空" tabindex="0" loading="lazy"><figcaption>sendbuf非空</figcaption></figure><br><h1 id="udp-部分" tabindex="-1"><a class="header-anchor" href="#udp-部分"><span>UDP 部分</span></a></h1><h2 id="udp-也有缓冲区吗" tabindex="-1"><a class="header-anchor" href="#udp-也有缓冲区吗"><span>UDP 也有缓冲区吗</span></a></h2><p>说完 TCP 了，我们聊聊 UDP。这对好基友，同时都是传输层里的重要协议。既然前面提到 TCP 有发送、接收缓冲区，那 UDP 有吗？</p><p>以前我以为。</p><blockquote><p>&quot;每个 UDP socket 都有一个接收缓冲区，没有发送缓冲区，从概念上来说就是只要有数据就发，不管对方是否可以正确接收，正因为不需要缓冲数据，所以也不需要发送缓冲区。&quot;</p></blockquote><p>后来我发现我错了。</p><p>UDP socket 也是 socket，一个 socket 就是会有收和发两个缓冲区。<strong>跟用什么协议关系不大</strong>。</p><p>有没有是一回事，用不用又是另外一回事。</p><br><h2 id="udp-不用发送缓冲区" tabindex="-1"><a class="header-anchor" href="#udp-不用发送缓冲区"><span>UDP 不用发送缓冲区？</span></a></h2><p>事实上，UDP 不仅<code>有</code>发送缓冲区，也<code>用</code>发送缓冲区。</p><p>一般正常情况下，会把数据直接拷到发送缓冲区后直接发送。</p><p>还有一种情况，是在发送数据的时候，设置一个 <code>MSG_MORE</code> 的标记。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">int</span> sock<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// flag 置为 MSG_MORE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>大概的意思是告诉内核，待会还有其他<strong>更多消息</strong>要一起发，先别着急发出去。此时内核就会把这份数据先用<strong>发送缓冲区</strong>缓存起来，待会应用层说 ok 了，再一起发。</p><p>我们可以看下源码。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">udp_sendmsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// corkreq 为 true 表示是 MSG_MORE 的方式，仅仅组织报文，不发送；</span>
	<span class="token keyword">int</span> corkreq <span class="token operator">=</span> up<span class="token operator">-&gt;</span>corkflag <span class="token operator">||</span> msg<span class="token operator">-&gt;</span>msg_flags<span class="token operator">&amp;</span>MSG_MORE；

	<span class="token comment">//  将要发送的数据，按照MTU大小分割，每个片段一个skb；并且这些</span>
	<span class="token comment">//  skb会放入到套接字的发送缓冲区中；该函数只是组织数据包，并不执行发送动作。</span>
	err <span class="token operator">=</span> <span class="token function">ip_append_data</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> fl4<span class="token punctuation">,</span> getfrag<span class="token punctuation">,</span> msg<span class="token operator">-&gt;</span>msg_iov<span class="token punctuation">,</span> ulen<span class="token punctuation">,</span>
			     <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">udphdr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ipc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rt<span class="token punctuation">,</span>
			     corkreq <span class="token operator">?</span> msg<span class="token operator">-&gt;</span>msg_flags<span class="token operator">|</span>MSG_MORE <span class="token operator">:</span> msg<span class="token operator">-&gt;</span>msg_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 没有启用 MSG_MORE 特性，那么直接将发送队列中的数据发送给IP。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>corkreq<span class="token punctuation">)</span>
		err <span class="token operator">=</span> <span class="token function">udp_push_pending_frames</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，不管是不是 <code>MSG_MORE</code>， IP 都会先把数据放到发送队列中，然后根据实际情况再考虑是不是立刻发送。</p><p>而我们大部分情况下，都不会用 <code>MSG_MORE</code>，也就是来一个数据包就直接发一个数据包。从这个行为上来说，<strong>虽然 UDP 用上了发送缓冲区，但实际上并没有起到&quot;缓冲&quot;的作用。</strong></p><br><h1 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h1><p>这篇文章，我也就写了 20 个小时吧。画图也就画吐了<strong>而已</strong>，每天早上 7 点钟爬起来写一个多小时再去上班。</p><p>兄弟们都是自家人，点不<strong>点赞</strong>，在不<strong>在看</strong>什么的，没关系的，大家看开心了就好。</p><p><strong>在看，点赞</strong>什么的，我不是特别在意，真的，真的，别不信啊。</p><p>不三连也真的没关系的。</p><p>兄弟们不要在意啊。</p><p>我是心口不一的小白，我们下期见！</p><br><h5 id="别说了-一起在知识的海洋里呛水吧" tabindex="-1"><a class="header-anchor" href="#别说了-一起在知识的海洋里呛水吧"><span>别说了，一起在知识的海洋里呛水吧</span></a></h5><p><strong>点击</strong>下方名片，关注公众号:【小白 debug】<br><img src="https://cdn.xiaobaidebug.top/1696069689495.png" alt="" loading="lazy"></p><br><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>`,128),u={href:"https://mp.weixin.qq.com/s/0H8WL6QeZ2VbO1hHPkn8Ug",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,[n("p",null,[n("a",{href:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A1%AC%E6%A0%B8%EF%BC%81%E6%BC%AB%E7%94%BB%E5%9B%BE%E8%A7%A3HTTP%E7%9F%A5%E8%AF%86%E7%82%B9_%E9%9D%A2%E8%AF%95%E9%A2%98"},"硬核！漫画图解 HTTP 知识点+面试题")])],-1),k={href:"https://mp.weixin.qq.com/s/BJqp72EyEMahxi2XOfSrBQ",target:"_blank",rel:"noopener noreferrer"};function g(m,v){const s=p("ExternalLinkIcon");return o(),c("div",null,[r,n("ul",null,[n("li",null,[n("p",null,[n("a",u,[a("TCP 粘包 数据包：我只是犯了每个数据包都会犯的错 |硬核图解"),t(s)])])]),d,n("li",null,[n("p",null,[n("a",k,[a("硬核图解！30 张图带你搞懂！路由器，集线器，交换机，网桥，光猫有啥区别？"),t(s)])])])])])}const f=e(l,[["render",g],["__file","动图图解！代码执行send成功后，数据就发出去了吗？.html.vue"]]),h=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%EF%BC%81%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Csend%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%B0%B1%E5%8F%91%E5%87%BA%E5%8E%BB%E4%BA%86%E5%90%97%EF%BC%9F.html","title":"动图图解！代码执行send成功后，数据就发出去了吗？","lang":"zh-CN","frontmatter":{"title":"动图图解！代码执行send成功后，数据就发出去了吗？","date":"2021-08-10T22:57:55.000Z","tags":null,"categories":"图解网络","description":"今天又是被倾盆的需求淹没的一天。 有没有人知道，那种“我用 3 句话，就让产品为我砍了 18 个需求”的鸡汤课在哪报名，想报。 \\"听懂掌声\\"的那种课就算了，太费手了。 扯远了，回到我们今天的正题，我们了解下这篇文的目录。 目录目录 代码执行 send 成功后，数据就发出去了吗？ 回答这个问题之前，需要了解什么是Socket 缓冲区。 Socket 缓冲...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%EF%BC%81%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Csend%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%B0%B1%E5%8F%91%E5%87%BA%E5%8E%BB%E4%BA%86%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"动图图解！代码执行send成功后，数据就发出去了吗？"}],["meta",{"property":"og:description","content":"今天又是被倾盆的需求淹没的一天。 有没有人知道，那种“我用 3 句话，就让产品为我砍了 18 个需求”的鸡汤课在哪报名，想报。 \\"听懂掌声\\"的那种课就算了，太费手了。 扯远了，回到我们今天的正题，我们了解下这篇文的目录。 目录目录 代码执行 send 成功后，数据就发出去了吗？ 回答这个问题之前，需要了解什么是Socket 缓冲区。 Socket 缓冲..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/image/8e7e47794e20a373.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T07:59:24.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"动图图解！代码执行send成功后，数据就发出去了吗？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:published_time","content":"2021-08-10T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-04T07:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动图图解！代码执行send成功后，数据就发出去了吗？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/image/8e7e47794e20a373.jpeg\\",\\"https://cdn.xiaobaidebug.top/image/2b1dc921fecd27e1.gif\\",\\"https://cdn.xiaobaidebug.top/image/send%E7%9B%AE%E5%BD%95.png\\",\\"https://cdn.xiaobaidebug.top/image/socket_api.png\\",\\"https://cdn.xiaobaidebug.top/image/%E4%B8%80%E4%B8%AAsocket%E6%9C%89%E4%B8%A4%E4%B8%AA%E7%BC%93%E5%86%B2%E5%8C%BA.png\\",\\"https://cdn.xiaobaidebug.top/image/tcp_sendmsg%E9%80%BB%E8%BE%913.png\\",\\"https://cdn.xiaobaidebug.top/image/send%E9%98%BB%E5%A1%9E.gif\\",\\"https://cdn.xiaobaidebug.top/image/send%E9%9D%9E%E9%98%BB%E5%A1%9E.gif\\",\\"https://cdn.xiaobaidebug.top/image/recv%E9%98%BB%E5%A1%9E.gif\\",\\"https://cdn.xiaobaidebug.top/image/recv%E9%9D%9E%E9%98%BB%E5%A1%9E2.gif\\",\\"https://cdn.xiaobaidebug.top/image/socket.png\\",\\"https://cdn.xiaobaidebug.top/image/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B4.png\\",\\"https://cdn.xiaobaidebug.top/image/recvbuf%E9%9D%9E%E7%A9%BA.gif\\",\\"https://cdn.xiaobaidebug.top/image/sendbuf%E9%9D%9E%E7%A9%BA.gif\\",\\"https://cdn.xiaobaidebug.top/1696069689495.png\\"],\\"datePublished\\":\\"2021-08-10T22:57:55.000Z\\",\\"dateModified\\":\\"2024-03-04T07:59:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%EF%BC%81%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Csend%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%B0%B1%E5%8F%91%E5%87%BA%E5%8E%BB%E4%BA%86%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3%EF%BC%81%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Csend%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%B0%B1%E5%8F%91%E5%87%BA%E5%8E%BB%E4%BA%86%E5%90%97%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"动图图解！代码执行send成功后，数据就发出去了吗？"}],["meta",{"property":"og:description","content":"今天又是被倾盆的需求淹没的一天。 有没有人知道，那种“我用 3 句话，就让产品为我砍了 18 个需求”的鸡汤课在哪报名，想报。 \\"听懂掌声\\"的那种课就算了，太费手了。 扯远了，回到我们今天的正题，我们了解下这篇文的目录。 目录目录 代码执行 send 成功后，数据就发出去了吗？ 回答这个问题之前，需要了解什么是Socket 缓冲区。 Socket 缓冲..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T07:59:24.000Z"}],["meta",{"property":"article:published_time","content":"2021-08-10T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-04T07:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动图图解！代码执行send成功后，数据就发出去了吗？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-10T22:57:55.000Z\\",\\"dateModified\\":\\"2024-03-04T07:59:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是 socket 缓冲区","slug":"什么是-socket-缓冲区","link":"#什么是-socket-缓冲区","children":[{"level":3,"title":"怎么观察 socket 缓冲区","slug":"怎么观察-socket-缓冲区","link":"#怎么观察-socket-缓冲区","children":[]}]},{"level":2,"title":"执行 send 发送的字节，会立马发送吗？","slug":"执行-send-发送的字节-会立马发送吗","link":"#执行-send-发送的字节-会立马发送吗","children":[]},{"level":2,"title":"如果缓冲区满了会怎么办","slug":"如果缓冲区满了会怎么办","link":"#如果缓冲区满了会怎么办","children":[{"level":3,"title":"如果发送缓冲区空间不足，或者满了，执行发送，会怎么样？","slug":"如果发送缓冲区空间不足-或者满了-执行发送-会怎么样","link":"#如果发送缓冲区空间不足-或者满了-执行发送-会怎么样","children":[]},{"level":3,"title":"如果接收缓冲区为空，执行 recv 会怎么样？","slug":"如果接收缓冲区为空-执行-recv-会怎么样","link":"#如果接收缓冲区为空-执行-recv-会怎么样","children":[]}]},{"level":2,"title":"如果 socket 缓冲区还有数据，执行 close 了，会怎么样？","slug":"如果-socket-缓冲区还有数据-执行-close-了-会怎么样","link":"#如果-socket-缓冲区还有数据-执行-close-了-会怎么样","children":[{"level":3,"title":"如果接收缓冲区有数据时，执行 close 了，会怎么样？","slug":"如果接收缓冲区有数据时-执行-close-了-会怎么样","link":"#如果接收缓冲区有数据时-执行-close-了-会怎么样","children":[]},{"level":3,"title":"如果发送缓冲区有数据时，执行 close 了，会怎么样？","slug":"如果发送缓冲区有数据时-执行-close-了-会怎么样","link":"#如果发送缓冲区有数据时-执行-close-了-会怎么样","children":[]}]},{"level":2,"title":"UDP 也有缓冲区吗","slug":"udp-也有缓冲区吗","link":"#udp-也有缓冲区吗","children":[]},{"level":2,"title":"UDP 不用发送缓冲区？","slug":"udp-不用发送缓冲区","link":"#udp-不用发送缓冲区","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1709539164000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":3}]},"readingTime":{"minutes":11.2,"words":3360},"filePathRelative":"计算机基础/网络基础/核心知识点/动图图解！代码执行send成功后，数据就发出去了吗？.md","localizedDate":"2021年8月10日","autoDesc":true}');export{f as comp,h as data};
