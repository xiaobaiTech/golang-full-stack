import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c as i,a as n,b as s,d as e,e as t}from"./app-BNb2vhTN.js";const c={},r=t('<h1 id="go-入门面试题" tabindex="-1"><a class="header-anchor" href="#go-入门面试题"><span>Go 入门面试题</span></a></h1><h2 id="与其他语言相比-使用-go-有什么好处" tabindex="-1"><a class="header-anchor" href="#与其他语言相比-使用-go-有什么好处"><span>与其他语言相比，使用 Go 有什么好处？</span></a></h2><ul><li>与其他作为学术实验开始的语言不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的生活更轻松。</li><li>Golang 针对并发进行了优化，并且在规模上运行良好。</li><li>由于单一的标准代码格式，Golang 通常被认为比其他语言更具可读性。</li><li>自动垃圾收集明显比 Java 或 Python 更有效，因为它与程序同时执行。</li></ul><h2 id="golang-使用什么数据类型" tabindex="-1"><a class="header-anchor" href="#golang-使用什么数据类型"><span>Golang 使用什么数据类型？</span></a></h2><p>Golang 使用以下类型：</p><ul><li>Method</li><li>Boolean</li><li>Numeric</li><li>String</li><li>Array</li><li>Slice</li><li>Struct</li><li>Pointer</li><li>Function</li><li>Interface</li><li>Map</li><li>Channel</li></ul><h2 id="golang开发新手常犯的50个错误" tabindex="-1"><a class="header-anchor" href="#golang开发新手常犯的50个错误"><span>Golang开发新手常犯的50个错误</span></a></h2>',7),u={href:"https://blog.csdn.net/gezhonglei2007/article/details/52237582",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"关于整型切片的初始化-下面正确的是",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于整型切片的初始化-下面正确的是"},[n("span",null,"关于整型切片的初始化，下面正确的是？")])],-1),k=n("p",null,"A. s := make([]int)",-1),g=n("p",null,"B. s := make([]int, 0)",-1),h=n("p",null,"C. s := make([]int, 5, 10)",-1),m=n("p",{"1,":"","2,":"","3,":"","4,":"",5:""},"D. s := []int",-1),v=t(`<p>答案</p><blockquote><p>B C D</p></blockquote><h2 id="下列代码是否会触发异常" tabindex="-1"><a class="header-anchor" href="#下列代码是否会触发异常"><span>下列代码是否会触发异常？</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test59</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    intChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    stringChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    intChan <span class="token operator">&lt;-</span> <span class="token number">1</span>
    stringChan <span class="token operator">&lt;-</span> <span class="token string">&quot;hello&quot;</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> value <span class="token operator">:=</span> <span class="token operator">&lt;-</span>intChan<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">case</span> value <span class="token operator">:=</span> <span class="token operator">&lt;-</span>stringChan<span class="token punctuation">:</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案</p><blockquote><p>不一定，当两个chan同时有值时，select 会随机选择一个可用通道做收发操作</p></blockquote><h2 id="关于channel的特性-下面说法正确的是" tabindex="-1"><a class="header-anchor" href="#关于channel的特性-下面说法正确的是"><span>关于channel的特性，下面说法正确的是？</span></a></h2><p>A. 给一个 nil channel 发送数据，造成永远阻塞</p><p>B. 从一个 nil channel 接收数据，造成永远阻塞</p><p>C. 给一个已经关闭的 channel 发送数据，引起 panic</p><p>D. 从一个已经关闭的 channel 接收数据，如果缓冲区中为空，则返回一个零值</p><p>答案</p><blockquote><p>A B C D</p></blockquote><h2 id="下列代码有什么问题" tabindex="-1"><a class="header-anchor" href="#下列代码有什么问题"><span>下列代码有什么问题？</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">123</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>j<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案</p><blockquote><p>Go语言中，常量无法寻址, 是不能进行取指针操作的</p></blockquote><h2 id="下列代码输出什么" tabindex="-1"><a class="header-anchor" href="#下列代码输出什么"><span>下列代码输出什么？</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test62</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> x <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案</p><blockquote><p>012</p><p>range 一个返回值时，这个值是下标，两个值时，第一个是下标，第二个是值，当 x 为 map时，第一个是key，第二个是value</p></blockquote><h2 id="关于无缓冲和有冲突的channel-下面说法正确的是" tabindex="-1"><a class="header-anchor" href="#关于无缓冲和有冲突的channel-下面说法正确的是"><span>关于无缓冲和有冲突的channel，下面说法正确的是？</span></a></h2><p>A. 无缓冲的channel是默认的缓冲为1的channel；</p><p>B. 无缓冲的channel和有缓冲的channel都是同步的；</p><p>C. 无缓冲的channel和有缓冲的channel都是非同步的；</p><p>D. 无缓冲的channel是同步的，而有缓冲的channel是非同步的；</p><p>答案</p><blockquote><p>D</p></blockquote><h2 id="下列代码输出什么-1" tabindex="-1"><a class="header-anchor" href="#下列代码输出什么-1"><span>下列代码输出什么？</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Foo</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;empty interface&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;non-empty interface&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">Test64</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
    <span class="token function">Foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案</p><blockquote><p>non-empty interface</p><p>接口除了有静态类型，还有动态类型和动态值，<br> 当且仅当动态值和动态类型都为 nil 时，接口类型值才为 nil。<br> 这里的 x 的动态类型是 *int，所以 x 不为 nil</p></blockquote><h2 id="关于select机制-下面说法正确的是" tabindex="-1"><a class="header-anchor" href="#关于select机制-下面说法正确的是"><span>关于select机制，下面说法正确的是?</span></a></h2><p>A. select机制用来处理异步IO问题；</p><p>B. select机制最大的一条限制就是每个case语句里必须是一个IO操作；</p><p>C. golang在语言级别支持select关键字；</p><p>D. select关键字的用法与switch语句非常类似，后面要带判断条件；</p><p>答案</p><blockquote><p>A B C</p></blockquote><h2 id="go-程序中的包是什么" tabindex="-1"><a class="header-anchor" href="#go-程序中的包是什么"><span>Go 程序中的包是什么？</span></a></h2><p>包(pkg)是 Go 工作区中包含 Go 源文件或其他包的目录。源文件中的每个函数、变量和类型都存储在链接包中。每个 Go 源文件都属于一个包，该包在文件顶部使用以下命令声明：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> <span class="token operator">&lt;</span>packagename<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以使用以下方法导入和导出包以重用导出的函数或类型：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token operator">&lt;</span>packagename<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Golang 的标准包是 fmt，其中包含格式化和打印功能，如 Println().</p><h2 id="关于字符串拼接-下列正确的是" tabindex="-1"><a class="header-anchor" href="#关于字符串拼接-下列正确的是"><span>关于字符串拼接,下列正确的是?</span></a></h2><p>A. str := &#39;abc&#39; + &#39;123&#39;</p><p>B. str := &quot;abc&quot; + &quot;123&quot;</p><p>C. str ：= &#39;123&#39; + &quot;abc&quot;</p><p>D. fmt.Sprintf(&quot;abc%d&quot;, 123)</p><p>答案</p><blockquote><p>B D 双引号用来表示字符串 string，其实质是一个 byte 类型的数组，单引号表示 rune 类型。</p></blockquote><h2 id="相关推荐" tabindex="-1"><a class="header-anchor" href="#相关推荐"><span>相关推荐</span></a></h2>`,53),b={href:"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/2.Go%E8%BF%9B%E9%98%B6.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://golangguide.top/golang/%E5%B8%B8%E7%94%A8%E5%8C%85%E5%A4%A7%E5%85%A8.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://golangguide.top/golang/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.html",target:"_blank",rel:"noopener noreferrer"};function _(G,A){const a=l("ExternalLinkIcon");return p(),i("div",null,[r,n("p",null,[n("a",u,[s("https://blog.csdn.net/gezhonglei2007/article/details/52237582"),e(a)])]),d,k,g,h,m,v,n("ul",null,[n("li",null,[n("p",null,[n("a",b,[s("golang进阶面试题八股文合集"),e(a)])])]),n("li",null,[n("p",null,[n("a",f,[s("golang常用标准库第三方库大全"),e(a)])])]),n("li",null,[n("p",null,[n("a",y,[s("golang学习路线"),e(a)])])])])])}const E=o(c,[["render",_],["__file","1.Go入门.html.vue"]]),w=JSON.parse('{"path":"/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html","title":"Go 入门面试题","lang":"zh-CN","frontmatter":{"description":"Go 入门面试题 与其他语言相比，使用 Go 有什么好处？ 与其他作为学术实验开始的语言不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的生活更轻松。 Golang 针对并发进行了优化，并且在规模上运行良好。 由于单一的标准代码格式，Golang 通常被认为比其他语言更具可读性。 自动垃圾收集明显比 Java 或 Python 更有效，...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"Go 入门面试题"}],["meta",{"property":"og:description","content":"Go 入门面试题 与其他语言相比，使用 Go 有什么好处？ 与其他作为学术实验开始的语言不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的生活更轻松。 Golang 针对并发进行了优化，并且在规模上运行良好。 由于单一的标准代码格式，Golang 通常被认为比其他语言更具可读性。 自动垃圾收集明显比 Java 或 Python 更有效，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T02:05:04.000Z"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:modified_time","content":"2024-02-28T02:05:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 入门面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-28T02:05:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/1.Go%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"Go 入门面试题"}],["meta",{"property":"og:description","content":"Go 入门面试题 与其他语言相比，使用 Go 有什么好处？ 与其他作为学术实验开始的语言不同，Go 代码的设计是务实的。每个功能和语法决策都旨在让程序员的生活更轻松。 Golang 针对并发进行了优化，并且在规模上运行良好。 由于单一的标准代码格式，Golang 通常被认为比其他语言更具可读性。 自动垃圾收集明显比 Java 或 Python 更有效，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T02:05:04.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-28T02:05:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 入门面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-28T02:05:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"与其他语言相比，使用 Go 有什么好处？","slug":"与其他语言相比-使用-go-有什么好处","link":"#与其他语言相比-使用-go-有什么好处","children":[]},{"level":2,"title":"Golang 使用什么数据类型？","slug":"golang-使用什么数据类型","link":"#golang-使用什么数据类型","children":[]},{"level":2,"title":"Golang开发新手常犯的50个错误","slug":"golang开发新手常犯的50个错误","link":"#golang开发新手常犯的50个错误","children":[]},{"level":2,"title":"关于整型切片的初始化，下面正确的是？","slug":"关于整型切片的初始化-下面正确的是","link":"#关于整型切片的初始化-下面正确的是","children":[]},{"level":2,"title":"下列代码是否会触发异常？","slug":"下列代码是否会触发异常","link":"#下列代码是否会触发异常","children":[]},{"level":2,"title":"关于channel的特性，下面说法正确的是？","slug":"关于channel的特性-下面说法正确的是","link":"#关于channel的特性-下面说法正确的是","children":[]},{"level":2,"title":"下列代码有什么问题？","slug":"下列代码有什么问题","link":"#下列代码有什么问题","children":[]},{"level":2,"title":"下列代码输出什么？","slug":"下列代码输出什么","link":"#下列代码输出什么","children":[]},{"level":2,"title":"关于无缓冲和有冲突的channel，下面说法正确的是？","slug":"关于无缓冲和有冲突的channel-下面说法正确的是","link":"#关于无缓冲和有冲突的channel-下面说法正确的是","children":[]},{"level":2,"title":"下列代码输出什么？","slug":"下列代码输出什么-1","link":"#下列代码输出什么-1","children":[]},{"level":2,"title":"关于select机制，下面说法正确的是?","slug":"关于select机制-下面说法正确的是","link":"#关于select机制-下面说法正确的是","children":[]},{"level":2,"title":"Go 程序中的包是什么？","slug":"go-程序中的包是什么","link":"#go-程序中的包是什么","children":[]},{"level":2,"title":"关于字符串拼接,下列正确的是?","slug":"关于字符串拼接-下列正确的是","link":"#关于字符串拼接-下列正确的是","children":[]},{"level":2,"title":"相关推荐","slug":"相关推荐","link":"#相关推荐","children":[]}],"git":{"createdTime":1707842411000,"updatedTime":1709085904000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":3}]},"readingTime":{"minutes":3.61,"words":1082},"filePathRelative":"golang/面试题/1.Go入门.md","localizedDate":"2024年2月13日","autoDesc":true}');export{E as comp,w as data};
