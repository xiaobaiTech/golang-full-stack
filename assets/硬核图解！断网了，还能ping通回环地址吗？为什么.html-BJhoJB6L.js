import{_ as o,c as p,b as e,d as s,e as t,a as i,o as c,r}from"./app-B3fHpbRm.js";const g={},l={href:"https://mp.weixin.qq.com/s/XsZYiLxZ0AXjVMBgWCnmzw",target:"_blank",rel:"noopener noreferrer"},d={href:"https://mp.weixin.qq.com/s/VLHCu6b5Anx8HEj_gQZfOg",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/PwIbKDTi0uSxhUWC56sJYg",target:"_blank",rel:"noopener noreferrer"},u={href:"https://mp.weixin.qq.com/s/BJqp72EyEMahxi2XOfSrBQ",target:"_blank",rel:"noopener noreferrer"};function E(b,n){const a=r("ExternalLinkIcon");return c(),p("div",null,[e("p",null,[n[1]||(n[1]=s("首发于个人公众号：小白 debug")),n[2]||(n[2]=e("br",null,null,-1)),n[3]||(n[3]=s(" 原文地址：")),e("a",l,[n[0]||(n[0]=s("硬核图解！断网了，还能 ping 通 127.0.0.1 吗？为什么？")),t(a)])]),n[8]||(n[8]=i(`<p>你<strong>女神爱不爱你</strong>，你问她，她可能不会告诉你。</p><p>但<strong>网通不通</strong>，你 <code>ping</code> 一下就知道了。</p><p>可能看到标题，你就知道答案了，但是你了解背后的原因吗？那如果把 <code>127.0.0.1</code> 换成 <code>0.0.0.0</code> 或 <code>localhost</code> 会怎么样呢？ 你知道这几个<code>IP</code>有什么区别吗？</p><p>以前面试的时候就遇到过这个问题，大家看个动图了解下面试官和我当时的场景，求当时小白的心里阴影面积。</p><figure><img src="https://cdn.xiaobaidebug.top/image/cache_1623425479_3538.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>话不多说，我们直接开车。</p><p>拔掉网线，断网。</p><figure><img src="https://cdn.xiaobaidebug.top/image/006WD51tly1fxvyqnfervj308c08c3yo.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后在控制台输入<code> ping 127.0.0.1</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">ping</span> <span class="token number">127.0</span>.0.1
PING <span class="token number">127.0</span>.0.1 <span class="token punctuation">(</span><span class="token number">127.0</span>.0.1<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">127.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.080</span> ms
<span class="token number">64</span> bytes from <span class="token number">127.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.093</span> ms
<span class="token number">64</span> bytes from <span class="token number">127.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.074</span> ms
<span class="token number">64</span> bytes from <span class="token number">127.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.079</span> ms
<span class="token number">64</span> bytes from <span class="token number">127.0</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.079</span> ms
^C
--- <span class="token number">127.0</span>.0.1 <span class="token function">ping</span> statistics ---
<span class="token number">5</span> packets transmitted, <span class="token number">5</span> packets received, <span class="token number">0.0</span>% packet loss
round-trip min/avg/max/stddev <span class="token operator">=</span> <span class="token number">0.074</span>/0.081/0.093/0.006 ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明，拔了网线，<code>ping 127.0.0.1</code> 是<strong>能 ping 通的</strong>。</p><p>其实这篇文章看到这里，标题前半个问题已经被回答了。但是我们可以再想深一点。</p><p>为什么断网了还能 <code>ping</code> 通 <code> 127.0.0.1</code> 呢？</p><p><strong>这能说明你不用交网费就能上网吗？</strong></p><p><strong>不能。</strong></p><p>首先我们需要进入基础科普环节。</p><p>不懂的同学看了就懂了，懂的看了就当查漏补缺吧。</p><h2 id="什么是-127-0-0-1" tabindex="-1"><a class="header-anchor" href="#什么是-127-0-0-1"><span>什么是 127.0.0.1</span></a></h2><p>首先，这是个 <code>IPV4</code> 地址。</p><p><code>IPV4</code> 地址有 <code>32</code> 位，一个字节有 <code>8</code> 位，共 <code>4</code> 个字节。</p><p>其中<strong>127 开头的都属于回环地址</strong>，也是 <code>IPV4</code> 的特殊地址，没什么道理，就是人为规定的。</p><p>而<code>127.0.0.1</code>是<strong>众多</strong>回环地址中的一个。之所以不是 <code>127.0.0.2</code> ，而是 <code>127.0.0.1</code>，是因为源码里就是这么定义的，也没什么道理。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* Address to loopback in software to local host.  */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">INADDR_LOOPBACK</span>		<span class="token expression"><span class="token number">0x7f000001</span>	</span><span class="token comment">/* 127.0.0.1   */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.xiaobaidebug.top/image/回环地址.png" alt="回环地址" tabindex="0" loading="lazy"><figcaption>回环地址</figcaption></figure><p><code>IPv4</code> 的地址是 <code>32</code> 位的，2 的 32 次方，大概是<code>40+亿</code>。地球光人口就 76 亿了，40 亿 IP 这点量，<strong>塞牙缝都不够</strong>，实际上<strong>IP 也确实用完</strong>了。</p><p>所以就有了<code>IPV6</code>， <code>IPv6</code> 的地址是 <code>128</code> 位的，大概是 2 的 128 次方 ≈<strong>10 的 38 次方</strong>。据说地球的沙子数量大概是 <strong>10 的 23 次方</strong>，所以 IPV6 的 IP 可以认为用不完。</p><p>IPV4 以 8 位一组，每组之间用 <strong>.</strong> 号隔开。</p><p>IPV6 就以 16 位为一组，每组之间用 <strong>:</strong> 号隔开。如果全是 0，那么可以省略不写。</p><figure><img src="https://cdn.xiaobaidebug.top/image/ipv6回环地址.png" alt="ipv6回环地址" tabindex="0" loading="lazy"><figcaption>ipv6回环地址</figcaption></figure><p>在 IPV4 下的回环地址是 <code>127.0.0.1</code>，在<code>IPV6</code>下，表达为 <code>::1</code> 。中间把<strong>连续的 0</strong>给省略了，之所以不是<strong>7 个 冒号</strong>，而是<strong>2 个冒号:</strong> ， 是因为一个 IPV6 地址中<strong>只允许出现⼀次两个连续的冒号</strong>。</p><blockquote><p>多说一句： 在 IPV4 下用的是 <strong>ping 127.0.0.1</strong> 命令。 在 IPV6 下用的是 <strong>ping6 ::1</strong> 命令。</p></blockquote><h2 id="什么是-ping" tabindex="-1"><a class="header-anchor" href="#什么是-ping"><span>什么是 ping</span></a></h2><p>ping 是应用层命令，可以理解为它跟游戏或者聊天软件属于同一层。只不过聊天软件可以收发消息，还能点个赞什么的，有很多复杂的功能。而 ping 作为一个小软件，它的功能比较简单，就是<strong>尝试</strong>发送一个小小的消息到目标机器上，判断目的机器是否<strong>可达</strong>，其实也就是判断目标机器网络是否能连通。</p><p>ping 应用的底层，用的是网络层的<strong>ICMP 协议</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/IP和ICMP和Ping所在分层.png" alt="IP和ICMP和Ping所在分层" tabindex="0" loading="lazy"><figcaption>IP和ICMP和Ping所在分层</figcaption></figure><p>虽然 ICMP 协议和 IP 协议<strong>都属于网络层协议</strong>，但其实<strong>ICMP 也是利用了 IP 协议进行消息的传输</strong>。</p><figure><img src="https://cdn.xiaobaidebug.top/image/ip和icmp的关系.png" alt="ip和icmp的关系" tabindex="0" loading="lazy"><figcaption>ip和icmp的关系</figcaption></figure><p>所以，大家在这里完全可以简单的理解为 ping 某个 IP 就是往某个 IP 地址发个消息。</p><h2 id="tcp-发数据和-ping-的区别" tabindex="-1"><a class="header-anchor" href="#tcp-发数据和-ping-的区别"><span>TCP 发数据和 ping 的区别</span></a></h2><p>一般情况下，我们会使用 TCP 进行网络数据传输，那么我们可以看下它和 ping 的区别。</p><figure><img src="https://cdn.xiaobaidebug.top/image/ping和普通发消息的关系2.png" alt="ping和普通发消息的关系" tabindex="0" loading="lazy"><figcaption>ping和普通发消息的关系</figcaption></figure><p>ping 和其他应用层软件都属于<strong>应用层</strong>。</p><p>那么我们横向对比一下，比方说聊天软件，如果用的是 TCP 的方式去发送消息。</p><p>为了发送消息，那就得先知道往哪发。linux 里万物皆文件，那你要发消息的目的地，也是个文件，这里就引出了 socket 的概念。</p><p>要使用 <code>socket</code> , 那么首先需要创建它。</p><p>在 TCP 传输中创建的方式是 <code>socket(AF_INET, SOCK_STREAM, 0);</code>，其中 <code>AF_INET</code> 表示将使用 IPV4 里 <strong>host:port</strong> 的方式去解析待会你输入的网络地址。<code>SOCK_STREAM</code> 是指使用面向字节流的 TCP 协议，<strong>工作在传输层</strong>。</p><p>创建好了 <code>socket</code> 之后，就可以愉快的把要传输的数据写到这个文件里。调用 socket 的<code>sendto</code>接口的过程中进程会从<strong>用户态进入到内核态</strong>，最后会调用到 <code>sock_sendmsg</code> 方法。</p><p>然后进入传输层，带上<code>TCP</code>头。网络层带上<code>IP</code>头，数据链路层带上 <code>MAC</code>头等一系列操作后。进入网卡的<strong>发送队列 ring buffer</strong> ，顺着网卡就发出去了。</p><p>回到 <code>ping</code> ， 整个过程也基本跟 <code>TCP</code> 发数据类似，差异的地方主要在于，创建 <code>socket</code> 的时候用的是 <code>socket(AF_INET,SOCK_RAW,IPPROTO_ICMP)</code>，<code>SOCK_RAW</code> 是原始套接字 ，<strong>工作在网络层</strong>， 所以构建<code>ICMP</code>（网络层协议）的数据，是再合适不过了。ping 在进入内核态后最后也是调用的 <code>sock_sendmsg</code> 方法，进入到网络层后加上<strong>ICMP 和 IP 头</strong>后，数据链路层加上<strong>MAC 头</strong>，也是顺着网卡发出。因此 本质上 ping 跟 普通应用发消息 在程序流程上没太大差别。</p><p>这也解释了**为什么当你发现怀疑网络有问题的时候，别人第一时间是问你能 ping 通吗？**因为可以简单理解为 ping 就是自己组了个数据包，让系统按着其他软件发送数据的路径往外发一遍，能通的话说明其他软件发的数据也能通。</p><h2 id="为什么断网了还能-ping-通-127-0-0-1" tabindex="-1"><a class="header-anchor" href="#为什么断网了还能-ping-通-127-0-0-1"><span>为什么断网了还能 ping 通 127.0.0.1</span></a></h2><p>前面提到，有网的情况下，ping 最后是<strong>通过网卡</strong>将数据发送出去的。</p><p>那么断网的情况下，网卡已经不工作了，ping 回环地址却一切正常，我们可以看下这种情况下的工作原理。</p><figure><img src="https://cdn.xiaobaidebug.top/image/ping回环地址.png" alt="ping回环地址" tabindex="0" loading="lazy"><figcaption>ping回环地址</figcaption></figure><p>从应用层到传输层再到网络层。这段路径跟 ping 外网的时候是几乎是一样的。到了网络层，系统会根据目的 IP，在路由表中获取对应的<strong>路由信息</strong>，而这其中就包含选择<strong>哪个网卡</strong>把消息发出。</p><p>当发现<strong>目标 IP 是外网 IP</strong>时，会从&quot;真网卡&quot;发出。</p><p>当发现<strong>目标 IP 是回环地址</strong>时，就会选择<strong>本地网卡</strong>。</p><p>本地网卡，其实就是个**&quot;假网卡&quot;<strong>，它不像&quot;真网卡&quot;那样有个<code>ring buffer</code>什么的，&quot;假网卡&quot;会把数据推到一个叫 <code> input_pkt_queue</code> 的 <strong>链表</strong> 中。这个链表，其实是所有网卡共享的，上面挂着发给本机的各种消息。消息被发送到这个链表后，会再触发一个</strong>软中断**。</p><p>专门处理软中断的工具人**&quot;ksoftirqd&quot;** （这是个<strong>内核线程</strong>），它在收到软中断后就会立马去链表里把消息取出，然后顺着数据链路层、网络层等层层往上传递最后给到应用程序。</p><figure><img src="https://cdn.xiaobaidebug.top/image/工具人ksoftirqd.png" alt="工具人ksoftirqd" tabindex="0" loading="lazy"><figcaption>工具人ksoftirqd</figcaption></figure><p>ping 回环地址和<strong>通过 TCP 等各种协议发送数据到回环地址</strong>都是走这条路径。整条路径从发到收，都没有经过&quot;真网卡&quot;。**之所以 127.0.0.1 叫本地回环地址，可以理解为，消息发出到这个地址上的话，就不会出网络，在本机打个转就又回来了。**所以断网，依然能 <code>ping</code> 通 <code>127.0.0.1</code>。</p><h2 id="ping-回环地址和-ping-本机地址有什么区别" tabindex="-1"><a class="header-anchor" href="#ping-回环地址和-ping-本机地址有什么区别"><span>ping 回环地址和 ping 本机地址有什么区别</span></a></h2><p>我们在 mac 里执行 <code>ifconfig</code> 。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">ifconfig</span>
lo0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">804</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,LOOPBACK,RUNNING,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">16384</span>
	inet <span class="token number">127.0</span>.0.1 netmask 0xff000000
	<span class="token punctuation">..</span>.
en0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">886</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST<span class="token operator">&gt;</span> mtu <span class="token number">1500</span>
	inet <span class="token number">192.168</span>.31.6 netmask 0xffffff00 broadcast <span class="token number">192.168</span>.31.255
    <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>能看到 <strong>lo0</strong>，表示本地回环接口，对应的地址，就是我们前面提到的 <strong>127.0.0.1</strong> ，也就是<strong>回环地址</strong>。</p><p>和 <strong>eth0</strong>，表示本机第一块网卡，对应的 IP 地址是<strong>192.168.31.6</strong>，管它叫<strong>本机 IP</strong>。</p><p>之前一直认为 ping 本机 IP 的话会通过&quot;真网卡&quot;出去，然后遇到第一个路由器，再发回来到本机。</p><p>为了验证这个说法，可以进行抓包，但结果跟上面的说法并不相同。</p><figure><img src="https://cdn.xiaobaidebug.top/image/image-20210611225434437.png" alt="ping 127.0.0.1" tabindex="0" loading="lazy"><figcaption>ping 127.0.0.1</figcaption></figure><br><figure><img src="https://cdn.xiaobaidebug.top/image/image-20210611225140197.png" alt="ping 本机地址" tabindex="0" loading="lazy"><figcaption>ping 本机地址</figcaption></figure><p>可以看到 ping 本机 IP 跟 ping 回环地址一样，相关的网络数据，都是走的 <strong>lo0</strong>，本地回环接口，也就是前面提到的**&quot;假网卡&quot;**。</p><p>只要走了本地回环接口，那数据都不会发送到网络中，在本机网络协议栈中兜一圈，就发回来了。因此 <strong>ping 回环地址和 ping 本机地址没有区别</strong>。</p><h2 id="_127-0-0-1-和-localhost-以及-0-0-0-0-有区别吗" tabindex="-1"><a class="header-anchor" href="#_127-0-0-1-和-localhost-以及-0-0-0-0-有区别吗"><span>127.0.0.1 和 localhost 以及 0.0.0.0 有区别吗</span></a></h2><p>回到文章开头动图里的提问，算是面试八股文里的老常客了。</p><p>以前第一次用 <code>nginx</code> 的时候，发现用这几个 <code>IP</code>，都能正常访问到 <code>nginx</code> 的欢迎网页。一度认为这几个 <code>IP</code> 都是一样的。</p><figure><img src="https://cdn.xiaobaidebug.top/image/image-20210530190253656.png" alt="访问127.0.0.1:80" tabindex="0" loading="lazy"><figcaption>访问127.0.0.1:80</figcaption></figure><figure><img src="https://cdn.xiaobaidebug.top/image/image-20210530190335350.png" alt="访问localhost:80" tabindex="0" loading="lazy"><figcaption>访问localhost:80</figcaption></figure><figure><img src="https://cdn.xiaobaidebug.top/image/image-20210530190410662.png" alt="访问0.0.0.0:80" tabindex="0" loading="lazy"><figcaption>访问0.0.0.0:80</figcaption></figure><figure><img src="https://cdn.xiaobaidebug.top/image/image-20210530191958500.png" alt="访问本机的IP地址" tabindex="0" loading="lazy"><figcaption>访问本机的IP地址</figcaption></figure><p>但本质上还是有些区别的。</p><p>首先 <code>localhost</code> 就不叫 <code>IP</code>，它是一个域名，就跟 <code>&quot;baidu.com&quot;</code>,是一个形式的东西，只不过默认会把它解析为 <code>127.0.0.1</code> ，当然这可以在 <code>/etc/hosts</code> 文件下进行修改。</p><p>所以默认情况下，使用 <code>localhost</code> 跟使用 <code>127.0.0.1</code> 确实是没区别的。</p><p>其次就是 <code>0.0.0.0</code>，执行 ping 0.0.0.0 ，是会失败的，因为它在<code>IPV4</code>中表示的是无效的<strong>目标地址</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">ping</span> <span class="token number">0.0</span>.0.0
PING <span class="token number">0.0</span>.0.0 <span class="token punctuation">(</span><span class="token number">0.0</span>.0.0<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
ping: sendto: No route to <span class="token function">host</span>
ping: sendto: No route to <span class="token function">host</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但它还是很有用处的，回想下，我们启动服务器的时候，一般会 <code>listen</code> 一个 IP 和端口，等待客户端的连接。</p><p>如果此时 <code>listen</code> 的是本机的 <code>0.0.0.0</code> , 那么它表示本机上的<strong>所有 IPV4 地址</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/* Address to accept any incoming messages. */
<span class="token comment">#define	INADDR_ANY		((unsigned long int) 0x00000000) /* 0.0.0.0   */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子。刚刚提到的 <code>127.0.0.1</code> 和 <code>192.168.31.6</code> ，都是本机的 IPV4 地址，如果监听 <code>0.0.0.0</code> ，那么用上面两个地址，都能访问到这个服务器。</p><p>当然， 客户端 <code>connect</code> 时，不能使用 <code>0.0.0.0</code> 。必须指明要连接哪个服务器 IP。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li><p><code>127.0.0.1</code> 是<strong>回环地址</strong>。<code>localhost</code>是<strong>域名</strong>，但默认等于 <code>127.0.0.1</code>。</p></li><li><p><code>ping</code> 回环地址和 <code>ping</code> 本机地址，是一样的，走的是<strong>lo0 &quot;假网卡&quot;</strong>，都会经过网络层和数据链路层等逻辑，最后在快要出网卡前<strong>狠狠拐了个弯</strong>， 将数据插入到一个<strong>链表</strong>后就<strong>软中断</strong>通知 <strong>ksoftirqd</strong> 来进行<strong>收数据</strong>的逻辑，<strong>压根就不出网络</strong>。所以断网了也能 <code>ping</code> 通回环地址。</p></li><li><p>如果服务器 <code>listen</code> 的是 <code>0.0.0.0</code>，那么此时用<code>127.0.0.1</code>和本机地址<strong>都可以</strong>访问到服务。</p></li></ul><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>最近工作上的事情太忙，本来就黑的黑眼圈，就更黑了，鸽了大家这么久实在不好意思哈。</p><p>这篇文章里，有几张大图本来都是动图，但是发现动起来之后发现字太小，点开来放大之后图又不会动了。有些影响体验，我就先改成静态图吧。</p><p>欢迎大家加我微信（公众号里右下角“联系我”），互相围观朋友圈砍一刀啥的哈哈。</p><p>如果文章对你有帮助，看下文章底部右下角，做点正能量的事情（<strong>点两下</strong>）支持一下。（<strong>疯狂暗示，拜托拜托，这对我真的很重要！</strong>）</p><p>我是小白，我们下期见。</p><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐：</span></a></h2>`,99)),e("ul",null,[e("li",null,[e("p",null,[e("a",d,[n[4]||(n[4]=s("动图图解！既然 IP 层会分片，为什么 TCP 层也还要分段？")),t(a)])])]),n[7]||(n[7]=e("li",null,[e("p",null,[e("a",{href:"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A1%AC%E6%A0%B8%EF%BC%81%E6%BC%AB%E7%94%BB%E5%9B%BE%E8%A7%A3HTTP%E7%9F%A5%E8%AF%86%E7%82%B9_%E9%9D%A2%E8%AF%95%E9%A2%98"},"硬核！漫画图解 HTTP 知识点+面试题")])],-1)),e("li",null,[e("p",null,[e("a",m,[n[5]||(n[5]=s("TCP 粘包 数据包：我只是犯了每个数据包都会犯的错 |硬核图解")),t(a)])])]),e("li",null,[e("p",null,[e("a",u,[n[6]||(n[6]=s("硬核图解！30 张图带你搞懂！路由器，集线器，交换机，网桥，光猫有啥区别？")),t(a)])])])]),n[9]||(n[9]=e("h5",{id:"别说了-一起在知识的海洋里呛水吧",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#别说了-一起在知识的海洋里呛水吧"},[e("span",null,"别说了，一起在知识的海洋里呛水吧")])],-1)),n[10]||(n[10]=e("p",null,"关注公众号:【小白 debug】",-1))])}const f=o(g,[["render",E],["__file","硬核图解！断网了，还能ping通回环地址吗？为什么.html.vue"]]),B=JSON.parse('{"path":"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A1%AC%E6%A0%B8%E5%9B%BE%E8%A7%A3%EF%BC%81%E6%96%AD%E7%BD%91%E4%BA%86%EF%BC%8C%E8%BF%98%E8%83%BDping%E9%80%9A%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80%E5%90%97%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88.html","title":"硬核图解！断网了，还能ping通 127.0.0.1 吗？为什么？","lang":"zh-CN","frontmatter":{"title":"硬核图解！断网了，还能ping通 127.0.0.1 吗？为什么？","date":"2021-06-25T22:57:55.000Z","tags":null,"categories":"图解网络","description":"首发于个人公众号：小白 debug 原文地址：硬核图解！断网了，还能 ping 通 127.0.0.1 吗？为什么？ 你女神爱不爱你，你问她，她可能不会告诉你。 但网通不通，你 ping 一下就知道了。 可能看到标题，你就知道答案了，但是你了解背后的原因吗？那如果把 127.0.0.1 换成 0.0.0.0 或 localhost 会怎么样呢？ 你知道...","head":[["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A1%AC%E6%A0%B8%E5%9B%BE%E8%A7%A3%EF%BC%81%E6%96%AD%E7%BD%91%E4%BA%86%EF%BC%8C%E8%BF%98%E8%83%BDping%E9%80%9A%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80%E5%90%97%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"硬核图解！断网了，还能ping通 127.0.0.1 吗？为什么？"}],["meta",{"property":"og:description","content":"首发于个人公众号：小白 debug 原文地址：硬核图解！断网了，还能 ping 通 127.0.0.1 吗？为什么？ 你女神爱不爱你，你问她，她可能不会告诉你。 但网通不通，你 ping 一下就知道了。 可能看到标题，你就知道答案了，但是你了解背后的原因吗？那如果把 127.0.0.1 换成 0.0.0.0 或 localhost 会怎么样呢？ 你知道..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaobaidebug.top/image/cache_1623425479_3538.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T13:55:00.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"硬核图解！断网了，还能ping通 127.0.0.1 吗？为什么？"}],["meta",{"property":"article:author","content":"小白debug"}],["meta",{"property":"article:published_time","content":"2021-06-25T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-12T13:55:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"硬核图解！断网了，还能ping通 127.0.0.1 吗？为什么？\\",\\"image\\":[\\"https://cdn.xiaobaidebug.top/image/cache_1623425479_3538.gif\\",\\"https://cdn.xiaobaidebug.top/image/006WD51tly1fxvyqnfervj308c08c3yo.jpg\\",\\"https://cdn.xiaobaidebug.top/image/%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80.png\\",\\"https://cdn.xiaobaidebug.top/image/ipv6%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80.png\\",\\"https://cdn.xiaobaidebug.top/image/IP%E5%92%8CICMP%E5%92%8CPing%E6%89%80%E5%9C%A8%E5%88%86%E5%B1%82.png\\",\\"https://cdn.xiaobaidebug.top/image/ip%E5%92%8Cicmp%E7%9A%84%E5%85%B3%E7%B3%BB.png\\",\\"https://cdn.xiaobaidebug.top/image/ping%E5%92%8C%E6%99%AE%E9%80%9A%E5%8F%91%E6%B6%88%E6%81%AF%E7%9A%84%E5%85%B3%E7%B3%BB2.png\\",\\"https://cdn.xiaobaidebug.top/image/ping%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80.png\\",\\"https://cdn.xiaobaidebug.top/image/%E5%B7%A5%E5%85%B7%E4%BA%BAksoftirqd.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20210611225434437.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20210611225140197.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20210530190253656.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20210530190335350.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20210530190410662.png\\",\\"https://cdn.xiaobaidebug.top/image/image-20210530191958500.png\\"],\\"datePublished\\":\\"2021-06-25T22:57:55.000Z\\",\\"dateModified\\":\\"2024-05-12T13:55:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小白debug\\",\\"url\\":\\"https://xiaobaidebug.top/\\"}]}"],["link",{"rel":"canonical","href":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A1%AC%E6%A0%B8%E5%9B%BE%E8%A7%A3%EF%BC%81%E6%96%AD%E7%BD%91%E4%BA%86%EF%BC%8C%E8%BF%98%E8%83%BDping%E9%80%9A%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80%E5%90%97%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:url","content":"https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A1%AC%E6%A0%B8%E5%9B%BE%E8%A7%A3%EF%BC%81%E6%96%AD%E7%BD%91%E4%BA%86%EF%BC%8C%E8%BF%98%E8%83%BDping%E9%80%9A%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80%E5%90%97%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88.html"}],["meta",{"property":"og:site_name","content":"golang全栈指南"}],["meta",{"property":"og:title","content":"硬核图解！断网了，还能ping通 127.0.0.1 吗？为什么？"}],["meta",{"property":"og:description","content":"首发于个人公众号：小白 debug 原文地址：硬核图解！断网了，还能 ping 通 127.0.0.1 吗？为什么？ 你女神爱不爱你，你问她，她可能不会告诉你。 但网通不通，你 ping 一下就知道了。 可能看到标题，你就知道答案了，但是你了解背后的原因吗？那如果把 127.0.0.1 换成 0.0.0.0 或 localhost 会怎么样呢？ 你知道..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T13:55:00.000Z"}],["meta",{"property":"article:published_time","content":"2021-06-25T22:57:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-12T13:55:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"硬核图解！断网了，还能ping通 127.0.0.1 吗？为什么？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-25T22:57:55.000Z\\",\\"dateModified\\":\\"2024-05-12T13:55:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是 127.0.0.1","slug":"什么是-127-0-0-1","link":"#什么是-127-0-0-1","children":[]},{"level":2,"title":"什么是 ping","slug":"什么是-ping","link":"#什么是-ping","children":[]},{"level":2,"title":"TCP 发数据和 ping 的区别","slug":"tcp-发数据和-ping-的区别","link":"#tcp-发数据和-ping-的区别","children":[]},{"level":2,"title":"为什么断网了还能 ping 通 127.0.0.1","slug":"为什么断网了还能-ping-通-127-0-0-1","link":"#为什么断网了还能-ping-通-127-0-0-1","children":[]},{"level":2,"title":"ping 回环地址和 ping 本机地址有什么区别","slug":"ping-回环地址和-ping-本机地址有什么区别","link":"#ping-回环地址和-ping-本机地址有什么区别","children":[]},{"level":2,"title":"127.0.0.1 和 localhost 以及 0.0.0.0 有区别吗","slug":"_127-0-0-1-和-localhost-以及-0-0-0-0-有区别吗","link":"#_127-0-0-1-和-localhost-以及-0-0-0-0-有区别吗","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"文章推荐：","slug":"文章推荐","link":"#文章推荐","children":[]}],"git":{"createdTime":1708315055000,"updatedTime":1715522100000,"contributors":[{"name":"xiaobai","email":"xiaobaidebug@gmail.com","commits":3},{"name":"xiaobai-tech","email":"948485496@qq.com","commits":1}]},"readingTime":{"minutes":11.12,"words":3335},"filePathRelative":"计算机基础/网络基础/核心知识点/硬核图解！断网了，还能ping通回环地址吗？为什么.md","localizedDate":"2021年6月25日","autoDesc":true}');export{f as comp,B as data};
